---
layout: post
title: TDD, RSpec & Conway's Game of Life
date: 2012-10-08 21:22
comments: true
tags: commentary
redirect_from: "/blog/2012/10/08/tdd/"
---

On my continuing quest to do more micro-projects, I decided to begin focusing on TDD today. After doing a little RSpec Googling, I came across [this live coding](https://vimeo.com/31403388) video for doing TDD with RSpec on [Conway's Game of Life](http://en.wikipedia.org/wiki/Conway's_Game_of_Life), something I hadn't heard of before.

After watching about half the video, I realized I was far enough along that I could try it myself. So I took a stab at it doing TDD the whole way. It was actually pretty fun doing a simple OO Ruby project and getting my feet wet with RSpec. I've always had this ugly feeling of repeating myself with tests, which is one reason I never could bring myself to write tests upfront for my little Rails projects.

It turns out (as everyone knows) that testing actually saves the repetition that comes with hand-testing everything in irb. If I had a nickel for every time I sat there banging away at the keyboard constructing objects and relationships in the Rails console just to do a reload and wipe everything out, I'd be rich (and a cliche).

In any case, it was apparent very quickly that I was really saving myself a lot of headaches by writing tests. The feedback loop was much quicker writing tests first. Fixing bugs and not having to re-establish all of your test setup by hand each time makes it much easier to focus on the bug at hand. And this was just for a three-class micro-project. I can only imagine how much headaches testing saves in large scale Rails projects.

RSpec was actually a lot more intuitive than I expected. It helped that I found an old cheat sheet to kind of guide my thinking of how my `should` statements should be structured. I tried to keep all the best practices in mind while writing my tests, but I'm sure I missed quite a bit on my first run. Looking back, I probably should have had a few more edge case tests especially on the 4 big rules. I'm still getting used to `describe`, `context`, `let`, `before`, and all the other structural stuff. It doesn't help that, from what I've seen, there seems to be a personal style to writing tests that varies. It varies in both test structure and amount of testing.

I also forced myself to get a primer on Ruby Debug (using the debugger gem). It's a little different than I'm used to with the full IDE and the goodies that Xcode offers, but I'm sure it'll be another useful tool in the toolbox.

I wrote a `Cell` class and a `World` class in what I think was good OO. Then I wrote a `Display` class that handles printing the world to the terminal (and even a little animation). I didn't write tests for that though, it was kind of a just-for-kicks deal.

Sidebar: this actually reminds me a lot of the big project we did in my C++ class Sophomore year of high school. We spent what seemed like several months writing all these classes to simulate fish. I can't remember exactly what the rules were, but I remember it being a bit tough to wrap my mind around. I don't think I really understood the difference between UI code and game logic back then. I didn't get that STDOUT was all we really needed for the concepts we were learning. I kept wanting to understand the GUI classes when all that was in the curriculum were the comp sci basics.

I'm not sure if my code is worth posting to github. I'll keep it off for now and try to leave room for the more important/interesting projects I've got planned.
