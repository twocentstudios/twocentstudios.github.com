<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>twocentstudios</title>
    <description>A coding blog covering iOS, Swift, and other programming topics.</description>
    <link>https://twocentstudios.com/</link>
    <atom:link href="https://twocentstudios.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 24 Jan 2025 02:08:13 -0600</pubDate>
    <lastBuildDate>Fri, 24 Jan 2025 02:08:13 -0600</lastBuildDate>
    <generator>Jekyll v3.9.3</generator>
    
      <item>
        <title>Eki Bright - The Case for DIY Routing</title>
        <description>&lt;p&gt;When I set out making the first prototypes of Eki Bright, my train timetables iOS app for the Tokyo metropolitan area, I had no intentions of tackling routing. In fact, that was one of the selling points; the lack of routing, like lack of maps, made it visually and conceptually simpler for solving the problem of getting the next train departure time at any particular station.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-diy-route-example.jpg&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;A DIY route in Eki Bright as it appears in the bottom Route Bar&quot; title=&quot;A DIY route in Eki Bright as it appears in the bottom Route Bar&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A DIY route in Eki Bright as it appears in the bottom Route Bar&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I eventually did add routing, in a form I call &lt;em&gt;DIY routing&lt;/em&gt;, but it grew organically out of the existing feature set, and it stays within the same niche as I’ve been targeting thus far: train riders who know where they’re going and how to get there. A tool for &lt;em&gt;power users&lt;/em&gt;, so-to-speak.&lt;/p&gt;

&lt;p&gt;In this post, I want to make the case for DIY routing: why it’s a useful addition to the full-featured routing apps we all use regularly. I’ve never used anything like DIY routing before, so either it’s already obsolete, or the problem was solved &lt;em&gt;well enough&lt;/em&gt; by other apps that no one had bothered to explore other solutions until now.&lt;/p&gt;

&lt;p&gt;I’ll use Google Maps the illustrative example of a &lt;em&gt;full-featured&lt;/em&gt; routing app. I’ll use 乗換案内 (Norikae Annai or Japan Transit Planner in English) as the illustrative example of a &lt;em&gt;railway-only&lt;/em&gt; routing app. And this post will be focused on the Tokyo-area of Japan.&lt;/p&gt;

&lt;h2 id=&quot;what-is-diy-routing&quot;&gt;What is DIY routing?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Full-featured routing&lt;/strong&gt; is choosing your departure point (often “current location” via GPS) and your destination point and allowing a routing algorithm propose several route options to choose from. Each routing option will often include multiple modes (e.g. walk, train, bus) and be optimized based on some goal (e.g. soonest arrival time, cost, complexity).&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-gmaps-full-featured.png&quot; width=&quot;&quot; height=&quot;200&quot; alt=&quot;A full-featured routing interface in Google Maps where the departure and destination points are required in order to calculate a route&quot; title=&quot;A full-featured routing interface in Google Maps where the departure and destination points are required in order to calculate a route&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A full-featured routing interface in Google Maps where the departure and destination points are required in order to calculate a route&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In contrast, &lt;strong&gt;DIY routing&lt;/strong&gt; is documenting your own train-based route segment-by-segment starting from the departure station. A segment consists of one train and its departure station and arrival station, and therefore scheduled departure and arrival times. Multiple segments can be combined with transfers in-between.&lt;/p&gt;

&lt;p&gt;A completed two segment route with one transfer looks like this:&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-diy-route-basha-ebisu.png&quot; width=&quot;&quot; height=&quot;200&quot; alt=&quot;A 2-segment DIY route with a transfer at Nakameguro 中目黒&quot; title=&quot;A 2-segment DIY route with a transfer at Nakameguro 中目黒&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A 2-segment DIY route with a transfer at Nakameguro 中目黒&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And a screencast of what it looks like assembling this two segment route in the app.&lt;/p&gt;

&lt;video src=&quot;/images/eki-bright-diy-route-create.mp4&quot; controls=&quot;&quot; preload=&quot;none&quot; poster=&quot;/images/eki-bright-diy-route-create.png&quot; width=&quot;300&quot;&gt;&lt;/video&gt;

&lt;p&gt;After you’ve created a route, the pertinent details update automatically as a Live Activity in the Dynamic Island and on the lock screen.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-diy-route-dynamic-island.png&quot; width=&quot;&quot; height=&quot;200&quot; alt=&quot;A DIY route as it appears in the Dynamic Island compact view&quot; title=&quot;A DIY route as it appears in the Dynamic Island compact view&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A DIY route as it appears in the Dynamic Island compact view&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-diy-route-lock-screen.png&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;A DIY route as it appears as a Live Activity in the lock screen before departure&quot; title=&quot;A DIY route as it appears as a Live Activity in the lock screen before departure&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A DIY route as it appears as a Live Activity in the lock screen before departure&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-use-cases-for-diy-routing&quot;&gt;The use cases for DIY routing&lt;/h2&gt;

&lt;p&gt;You may be wondering, “if I already know how to get to my destination without the aid of an algorithmic route service, why would I go through the trouble of creating one myself each time I take a trip?”&lt;/p&gt;

&lt;p&gt;Sure, I sometimes use the station timetable widgets I’ve set up to optimize leaving the house to catch the next train.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-widget-category-color.jpg&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;Using a widget to check train times before leaving the house&quot; title=&quot;Using a widget to check train times before leaving the house&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Using a widget to check train times before leaving the house&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But other times I plan ahead maybe an hour or two to ensure I catch the (fastest) limited express train while also getting to my destination in time. I do this quickly by setting up the first departure of a DIY route, and the departure time immediately appears in my dynamic island so I can keep an eye on it.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-diy-route-dynamic-island.png&quot; width=&quot;&quot; height=&quot;200&quot; alt=&quot;Checking my planned departure in the dynamic island while doing something else&quot; title=&quot;Checking my planned departure in the dynamic island while doing something else&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Checking my planned departure in the dynamic island while doing something else&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sometimes I’ll set up the full route, but other times I’ll only set the initial departure and set up the rest of the DIY route while I’m waiting on the platform or even when I’m already on the train. No need to do it all at once.&lt;/p&gt;

&lt;p&gt;If you’ve got a whole DIY route set up, you get the following benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Remember when to leave your current location to catch the train you want.&lt;/li&gt;
  &lt;li&gt;Remember which train to board when you get to the departure station.&lt;/li&gt;
  &lt;li&gt;Remember when to get off at the transfer station.&lt;/li&gt;
  &lt;li&gt;Remember which train to board at the transfer station.&lt;/li&gt;
  &lt;li&gt;Remember when to get off at your arrival station.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All while browsing other apps or while your iPhone is locked.&lt;/p&gt;

&lt;h3 id=&quot;use-case-flexibility-in-departure&quot;&gt;Use case: flexibility in departure&lt;/h3&gt;

&lt;p&gt;When I’m picking my departure time in Eki Bright, I’m immediately presented with the full list, including train type (e.g. local, express). It’s quick and easy to understand at a glance what my options are. The interface has only a slight bias for “leaving now” departures, showing the next 6 departures on the station detail screen and the next ~11 departures on the station timetable screen. It’s not much more difficult to plan an hour or two ahead.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-station-timetable-station-detail.png&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Departures as they appear on the Station Timetable and Station Detail screens&quot; title=&quot;Departures as they appear on the Station Timetable and Station Detail screens&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Departures as they appear on the Station Timetable and Station Detail screens&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similarly, once you’ve added a departure to a DIY route, you can see and select 2 departures before and after the active departure. This lets you quickly recover if you miss your train or decide to leave a little early.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-alternate-departures.png&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;Alternate departures shown when tapping the departure station 馬車道&quot; title=&quot;Alternate departures shown when tapping the departure station 馬車道&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Alternate departures shown when tapping the departure station 馬車道&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In contrast, other routing apps are purely optimized for “leaving now” departures, and are forced to use a variant of the time picker control in a modal view if you’re leaving even a little later.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-gmaps-departure-time.png&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Choosing a departure time in Google Maps&quot; title=&quot;Choosing a departure time in Google Maps&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Choosing a departure time in Google Maps&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Other routing apps also have various interfaces for re-routing to the next or previous train. But I’ve found each implementation to be lacking, either in update speed or UI clarity, mostly because the interfaces need to assist users who aren’t familiar with the route.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-applemaps-alternate-departures.png&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;List of alternate departures in Apple Maps&quot; title=&quot;List of alternate departures in Apple Maps&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;List of alternate departures in Apple Maps&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;use-case-no-false-sense-of-accuracy-in-walking-transfer-times&quot;&gt;Use case: no false sense of accuracy in walking transfer times&lt;/h3&gt;

&lt;p&gt;Full-featured routing apps default to choosing the start location of your route via GPS and then calculating the train portion of the route based on the best estimate walk time to the departure station. I think this method works fine for general users.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-gmaps-walking-to-train.png&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;Google Maps showing walking directions to the departure station&quot; title=&quot;Google Maps showing walking directions to the departure station&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Google Maps showing walking directions to the departure station&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, as a power-user, I’ve found these estimates to be inaccurate to the point where they’re disruptive to my route planning.&lt;/p&gt;

&lt;p&gt;First, GPS accuracy is often quite spotty in many parts of street-level Tokyo, and even worse if you’re in one of the many underground spaces.&lt;/p&gt;

&lt;p&gt;The app must also make a tradeoff between waiting for the GPS signal to stabilize and providing a route. Waiting longer may return a more accurate GPS location, but may cause the user to become impatient, or even miss a train in rare cases.&lt;/p&gt;

&lt;p&gt;Since the walking shares the street with cars and buses, due to traffic light timings walking time estimates will always need to build in some margin of error.&lt;/p&gt;

&lt;p&gt;And finally, full-featured routing apps have no setting for “I’m a slow walker” or “I can run if it means I catch the express train and therefore a ~15 minute earlier arrival time”. This means they sometimes won’t show you a route you could easily make unless you set the departure time back a minute or two.&lt;/p&gt;

&lt;p&gt;It’s frustrating to try to work around these apps when they’re being “smart”. I need to enter my departure coordinates exactly by typing or fiddling with the map view. Or I need to open up the departure time picker and guess and check spinning the dials enough to trigger a more ideal set of route results.&lt;/p&gt;

&lt;p&gt;Many times, I’ve been on the station platform trying to quickly double check the info for a soon-to-depart train, but Google Maps will not show me that train because it thinks I need to walk 5 minutes to the train station due to the GPS accuracy.&lt;/p&gt;

&lt;p&gt;Norikae Annai assumes you’re already at the departure station and provides no walk guidance or departure time adjustment. This default configuration is fine for when you’re already at the station, but slow if you want to account for a couple minute walk.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-norikae-annai-route-setup.jpg&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;Creating a route with Norikae Annai requires selecting a departure and arrival station&quot; title=&quot;Creating a route with Norikae Annai requires selecting a departure and arrival station&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Creating a route with Norikae Annai requires selecting a departure and arrival station&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You either need to use the departure time picker modal or tap through to other departures (if you can find those buttons between the ads).&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-norikae-annai-alternate-departures.png&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;Choosing alternate departures in Norikae Annai (the orange buttons between the ad views)&quot; title=&quot;Choosing alternate departures in Norikae Annai (the orange buttons between the ad views)&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Choosing alternate departures in Norikae Annai (the orange buttons between the ad views)&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;use-case-optimizing-transfer-times&quot;&gt;Use case: optimizing transfer times&lt;/h3&gt;

&lt;p&gt;Estimating transfer times between segments is a variant of the above problem of estimating walking times to the departure station.&lt;/p&gt;

&lt;p&gt;In Eki Bright, this problem is handled the same way as above. The app does not try to make any smart estimates it can’t guarantee, but instead gives you tools and surfaces relevant information to optimize transfers on your own.&lt;/p&gt;

&lt;p&gt;If I know my route and transfer pretty well, I can estimate my absolute fastest time walking from platform to platform. From there, I can quickly see the next couple departure options and easily decide whether I can rush to make the next transfer or whether I can take my time (perhaps stopping for a drink, or snack, or to use the restroom).&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-diy-route-transfer-alternate-departures.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Alternate departures for a transfer shown in the bottom half of the screen above the route bar. I know this transfer occurs on the same platform, so one minute is enough.&quot; title=&quot;Alternate departures for a transfer shown in the bottom half of the screen above the route bar. I know this transfer occurs on the same platform, so one minute is enough.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Alternate departures for a transfer shown in the bottom half of the screen above the route bar. I know this transfer occurs on the same platform, so one minute is enough.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Google Maps has a reasonably good interface for checking other transfer time options. But as far as selecting a default option, it seems to be using its walking distance algorithm even within stations. For this example Nakameguro transfer, it seems to think the transfer will take a 1 minute walk, even though these two trains actually stop on adjacent sides of the same platform and usually wait for one another.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-gmaps-nakame-transfer.png&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Google Maps chooses the 22:51 departure but shows the 22:47 departure in a dropdown menu&quot; title=&quot;Google Maps chooses the 22:51 departure but shows the 22:47 departure in a dropdown menu&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Google Maps chooses the 22:51 departure but shows the 22:47 departure in a dropdown menu&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Noriakae Annai doesn’t even have an option for choosing an alternate transfer. It’s not clear to me how the app chooses possible transfer times by default. But in the below example, I can see in Eki Bright that if I get off the Toyoko-line train right after it arrives, I have a good chance of making the Hibiya-line transfer departing at the exact same time.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-norikae-annai-nakame-transfer.png&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Norikae Annai also shows the 22:51 departure, but has no option to show the user the 22:47 option&quot; title=&quot;Norikae Annai also shows the 22:51 departure, but has no option to show the user the 22:47 option&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Norikae Annai also shows the 22:51 departure, but has no option to show the user the 22:47 option&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-diy-route-nakame-transfer.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Eki Bright shows the 22:47 transfer option by &apos;default&apos;, but it&apos;s easy to see/select the alternate 22:51 departure as well&quot; title=&quot;Eki Bright shows the 22:47 transfer option by &apos;default&apos;, but it&apos;s easy to see/select the alternate 22:51 departure as well&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Eki Bright shows the 22:47 transfer option by &apos;default&apos;, but it&apos;s easy to see/select the alternate 22:51 departure as well&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;use-case-eliminating-distractions-like-maps&quot;&gt;Use case: eliminating distractions like maps&lt;/h3&gt;

&lt;p&gt;Other routing apps dedicate most of their UI to departure point, arrival point, routing options, maps, and proposed routes.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-gmaps-default-route-select.png&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Google Maps&apos; default route selection screen&quot; title=&quot;Google Maps&apos; default route selection screen&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Google Maps&apos; default route selection screen&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you already know which proposed route you want to take, but just need to know the departure time, the rest of the UI is just distraction and visual noise.&lt;/p&gt;

&lt;p&gt;In contrast, Eki Bright is optimized to get you, a power user, to your first departure time as quickly as possible. Since user preferences and situations are different, I use a layering approach: lock screen widgets, today view widgets, home screen widgets, and bookmarks on the app’s home screen.&lt;/p&gt;

&lt;p&gt;Priority for routing is secondary, since it can be ignored completely or set up en route with no consequences.&lt;/p&gt;

&lt;p&gt;Eliminating the necessity of choosing a destination is a big win for Eki Bright.&lt;/p&gt;

&lt;p&gt;Eliminating the necessity of a map is also a big win. Maps take up a lot of screen real estate.&lt;/p&gt;

&lt;p&gt;Other routing apps, even Google Maps, have their own version of timetable-based UI. However, the UI and UX is usually a secondary concern and quite clumsy. They’re not intended to be a full featured replacement for routing, nor do they incorporate progressive disclosure where you can use the departure time as a jumping off point to create a route.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-gmaps-station-departures.png&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Google Maps station departures screen for Ebisu station&quot; title=&quot;Google Maps station departures screen for Ebisu station&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Google Maps station departures screen for Ebisu station&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;use-case-browsing-waypoints-while-en-route&quot;&gt;Use case: browsing waypoints while en route&lt;/h3&gt;

&lt;p&gt;When using Google Maps for routing, it’s not possible to browse waypoints like restaurants while you’re in the middle of navigating. Using another app for routing (not only Eki Bright) allows you to still search for a restaurant at your destination while still being able to keep track of your departure time.&lt;/p&gt;

&lt;h2 id=&quot;when-does-it-not-make-sense-to-use-diy-routing&quot;&gt;When does it not make sense to use DIY routing?&lt;/h2&gt;

&lt;h3 id=&quot;unfamiliar-routes&quot;&gt;Unfamiliar routes&lt;/h3&gt;

&lt;p&gt;Straight up, if you don’t know how to get from your departure station to your arrival station, it will be frustrating and difficult (but not impossible) to derive an ideal route using the Eki Bright UX.&lt;/p&gt;

&lt;h3 id=&quot;comparing-multiple-routes&quot;&gt;Comparing multiple routes&lt;/h3&gt;

&lt;p&gt;If you think you have the option of using two different routes, but aren’t sure which is better (i.e. faster, cheaper), Eki Bright will not be useful in making that decision.&lt;/p&gt;

&lt;h3 id=&quot;ultra-short-routes-with-no-fixed-schedule&quot;&gt;Ultra-short routes with no fixed schedule&lt;/h3&gt;

&lt;p&gt;The Yamanote line only has one type (“local”) and comes quite frequently (every ~3-4 minutes). Although it has a published schedule, in most cases trains will not wait for their departure time. This makes it ill suited to plan around if it’s the only segment of a trip. You’ll usually want to go to the platform whenever you’re ready to leave (odds are you won’t need to wait long). This is the dream of all public transportation, right?&lt;/p&gt;

&lt;h3 id=&quot;planning-over-one-day-in-advance&quot;&gt;Planning over one day in advance&lt;/h3&gt;

&lt;p&gt;Although Eki Bright has access to timetables for weekdays, weekends, and holidays, selecting a schedule other than the current day’s is not currently supported. Also, DIY routes are assumed to be temporary and reset at the end of the day. Therefore, you can’t use Eki Bright to plan routes in advance.&lt;/p&gt;

&lt;h2 id=&quot;my-progression-of-designing-diy-routing&quot;&gt;My progression of designing DIY routing&lt;/h2&gt;

&lt;p&gt;Eki Bright started as a list of stations and the station timetable for each.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-station-list-timetable-screens.png&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;The station list and station timetable screens in version 1.0&quot; title=&quot;The station list and station timetable screens in version 1.0&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The station list and station timetable screens in version 1.0&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Right before launch, I decided to add the train timetable for each departure as a third layer of the navigation.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-train-timetable-multiple-railways.gif&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;The train timetable screen with a train that runs multiple railways&quot; title=&quot;The train timetable screen with a train that runs multiple railways&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The train timetable screen with a train that runs multiple railways&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This was arguably unnecessary, but as soon as I added it, I immediately found it useful. I could now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Check which stations any train stopped at.&lt;/li&gt;
  &lt;li&gt;Check the arrival time of the train at my destination station.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a single-segment trip, this was useful enough. I started using Eki Bright for more than I originally expected to.&lt;/p&gt;

&lt;p&gt;However, this interface didn’t work for two segment trips that required a transfer. To work around the limitation, I needed to make a mental note of the arrival time of the first segment, then go back to the home screen and search for that station. But this would mean I lost access to the timetable of the first train.&lt;/p&gt;

&lt;p&gt;From here, the next logical step was linking a station in the train timetable screen to its station timetable. This would make it quicker to tap through and see the departure and arrival times for the full route, but I’d need to pop the stack to see earlier times.&lt;/p&gt;

&lt;p&gt;After creating some other features, I finally decided to tackle routing. My idea was maintain a bottom toolbar that floated above all screens and showed the route as the user was assembling it. I added a button to each station on the train timetable screen to allow the user to add a departure or arrival station to a route segment.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-route-bar-train-timetable.png&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Train timetable screen with add-to-route buttons at each station&quot; title=&quot;Train timetable screen with add-to-route buttons at each station&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Train timetable screen with add-to-route buttons at each station&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This UI immediately solved a lot of my problems. The implementation was more difficult than I expected though. I wanted to support alternate departures out of the gate, and alternate departures need to account for a selected destination segment since not all trains go to all destinations. Plus I needed to show the user when the route configuration was not temporally possible. All the usual hardening aspects of creating a production-ready feature.&lt;/p&gt;

&lt;p&gt;But once I had the chance to use DIY routing in the field, I found it &lt;em&gt;fun&lt;/em&gt;. Tapping through a couple screens, choosing my trains, switching up my departure times on the fly; I felt like I was in full control.&lt;/p&gt;

&lt;p&gt;It was an obvious next step to add Live Activities and Dynamic Island support (which presented their own implementation challenges). Once these were implemented, DIY routes felt even more like the logical jumping off point for several other features that continued to improve the experience of riding trains.&lt;/p&gt;

&lt;p&gt;The last complementary feature I added before taking a breather was share cards. I found myself often screenshotting and cropping the route bar after I’d created a DIY route and sending it via messaging apps to my friends to tell them when I’d arrive to meet them. So I added a share button and made an attractive little PNG image that’s easy to copy or export to share.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-share-cards.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;A sampling of various DIY route share cards from the Eki Bright marketing images&quot; title=&quot;A sampling of various DIY route share cards from the Eki Bright marketing images&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A sampling of various DIY route share cards from the Eki Bright marketing images&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From my past product experience, having some sort of shareable content is a surefire way to increase interest in your app. For a train timetables app, external sharing is a tough proposition. But hopefully these share cards will help spread the word assuming I can get enough users to the bottom of that long funnel.&lt;/p&gt;

&lt;h2 id=&quot;how-to-convinceteach-people-to-tryuse-diy-routing&quot;&gt;How to convince/teach people to try/use DIY routing&lt;/h2&gt;

&lt;p&gt;After developing this feature from scratch and using it for a few months, I’m sold. I think DIY routing is great and I use it for 90% of my trips around Tokyo.&lt;/p&gt;

&lt;p&gt;But I’ll admit I haven’t figured out a way to convince people to try using DIY routing in Eki Bright. This blog post is a way to get my thoughts and arguments in order.&lt;/p&gt;

&lt;p&gt;I spent a couple weeks gently polishing the UX and adding the Live Activities feature in order to make the effort of making a DIY route better rewarded. But now I need to actually convince users to try it, and also effectively teach them how to use it.&lt;/p&gt;

&lt;p&gt;Is the most effective teaching method tooltips? An interactive onboarding? A video tutorial? All of the above? This will be a future task.&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jan 2025 10:43:00 -0600</pubDate>
        <link>https://twocentstudios.com/2025/01/24/eki-bright-the-case-for-diy-routing/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/01/24/eki-bright-the-case-for-diy-routing/</guid>
        
        <category>ekibright</category>
        
        
      </item>
    
      <item>
        <title>Core Location Modern API Tips</title>
        <description>&lt;p&gt;The Core Location framework for Apple platforms received some fresh API updates alongside even more permissions minutia in iOS 17 and iOS 18.&lt;/p&gt;

&lt;p&gt;In this post I’ll list as many gotchas as I’ve found in the “modern” Core Location as of iOS 18.1 while developing my train timetables app &lt;a href=&quot;/2024/07/27/eki-bright-tokyo-area-train-timetables/&quot;&gt;Eki Bright&lt;/a&gt;. Some documented, some not. This is not a quick start or tutorial, but you may want to skim it if you’re thinking about using an iOS 17+ Core Location API so you know what to look out for.&lt;/p&gt;

&lt;p&gt;I’ll be discussing iOS usage of Core Location exclusively (not macOS, visionOS, watchOS).&lt;/p&gt;

&lt;h1 id=&quot;overall-recommendations&quot;&gt;Overall recommendations&lt;/h1&gt;

&lt;h2 id=&quot;prefer-cllocationmanager-over-clmonitor-and-cllocationupdate&quot;&gt;Prefer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationManager&lt;/code&gt; over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationManager&lt;/code&gt; has been around since the beginning of iPhone OS. Its delegate-based API can feel a bit cumbersome in the current era, but overall, I would still recommend creating your own wrapper over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationManager&lt;/code&gt; if the core competency of your app is even adjacent to location services.&lt;/p&gt;

&lt;p&gt;As far as I can tell, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; are both wrappers themselves over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationManager&lt;/code&gt; albeit with fewer options, fewer capabilities, and many more gotchas spread across iOS minor versions.&lt;/p&gt;

&lt;p&gt;If you’d still like to try them, please read my observations below.&lt;/p&gt;

&lt;h2 id=&quot;prefer-clservicesession-if-your-deployment-target-is-ios-180&quot;&gt;Prefer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt; if your deployment target is iOS 18.0+&lt;/h2&gt;

&lt;p&gt;In my testing, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt; has worked as advertised and requires less babysitting than the older imperative location permission APIs.&lt;/p&gt;

&lt;p&gt;Location services permissions is still ripe with complexity and edge cases, so I recommend reading all the documentation and my observations below.&lt;/p&gt;

&lt;h1 id=&quot;official-documentation&quot;&gt;Official documentation&lt;/h1&gt;

&lt;p&gt;I’ll start by listing the documentation for the iOS 17+ APIs I’ve found useful.&lt;/p&gt;

&lt;h2 id=&quot;wwdc-videos&quot;&gt;WWDC videos&lt;/h2&gt;

&lt;p&gt;There are three videos from WWDC 2023 and 2024 from the Core Location team introducing iOS 17 and iOS 18 changes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2023/10180&quot;&gt;Discover streamlined location updates (2023)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2023/10147&quot;&gt;Meet Core Location Monitor (2023)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2024/10212&quot;&gt;What’s new in location authorization (2024)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These videos do a nice job of explaining the rationale behind the new APIs. They also illustrate the intended usage pretty well for extremely simple use cases.&lt;/p&gt;

&lt;h2 id=&quot;sample-projects&quot;&gt;Sample projects&lt;/h2&gt;

&lt;p&gt;The sample projects, although very freshly updated, do a poor job of actually proving the capabilities of the framework work as advertised. They’re more useful in seeing how the API designers intend the framework user to compose all the pieces together.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/corelocation/adopting-live-updates-in-core-location&quot;&gt;Adopting live updates in Core Location&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/corelocation/monitoring-location-changes-with-core-location&quot;&gt;Monitoring location changes with Core Location&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;warning-about-the-documentation&quot;&gt;Warning about the documentation&lt;/h2&gt;

&lt;p&gt;Some official articles have been written or rewritten assuming your app’s base deployment is iOS 17 or iOS 18. &lt;a href=&quot;https://developer.apple.com/documentation/corelocation/suspending-authorization-requests&quot;&gt;Suspending authorization requests&lt;/a&gt; shows only permission requests based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;…while some articles have not been updated. &lt;a href=&quot;https://developer.apple.com/documentation/corelocation/requesting-authorization-to-use-location-services&quot;&gt;Requesting authorization to use location services&lt;/a&gt; does not mention &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt; at all.&lt;/p&gt;

&lt;p&gt;Some newer API’s documentation pages are missing important notes that exist in their deprecated counterpart API’s pages. For example, &lt;a href=&quot;https://developer.apple.com/documentation/corelocation/clmonitor-2r51v&quot;&gt;CLMonitor&lt;/a&gt; and &lt;a href=&quot;https://developer.apple.com/documentation/corelocation/cllocationmanager/startmonitoring(for:)&quot;&gt;startMonitoring(for:)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Be sure to check the individual pages under &lt;a href=&quot;https://developer.apple.com/documentation/corelocation/deprecated-symbols&quot;&gt;Deprecated symbols&lt;/a&gt; as well.&lt;/p&gt;

&lt;h1 id=&quot;tips&quot;&gt;Tips&lt;/h1&gt;

&lt;p&gt;This section is an unstructured brain dump of everything I’ve run into while using the iOS 17+ Core Location APIs. I’ve divided up the subsections into:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Permissions (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Background operation&lt;/li&gt;
  &lt;li&gt;Location updates firehose (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Location monitoring (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;permissions&quot;&gt;Permissions&lt;/h2&gt;

&lt;p&gt;I recommend starting by reading &lt;a href=&quot;https://developer.apple.com/documentation/corelocation/requesting-authorization-to-use-location-services&quot;&gt;Requesting authorization to use location services&lt;/a&gt; carefully, and watching &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2024/10212&quot;&gt;What’s new in location authorization&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;implicit-vs-explicit-clservicesession-usage&quot;&gt;Implicit vs. explicit CLServiceSession usage&lt;/h3&gt;

&lt;p&gt;In iOS 18+, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; allow implicit usage of permissions via the underlying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt; mechanism. If you’re using iOS 17 or below, or using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationManager&lt;/code&gt; you can skip this part.&lt;/p&gt;

&lt;p&gt;As a pseudo flowchart:&lt;/p&gt;

&lt;p&gt;If:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You’re only using either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; (not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationManager&lt;/code&gt;) &lt;em&gt;and&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;You’re supporting iOS 18+ &lt;em&gt;and&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;You only need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whenInUse&lt;/code&gt; authorization without explicit full accuracy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then you have 2 options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use implicit authorization: simply call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; and Core Location will take a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt; (the permissions mechanism) for you behind the scenes.&lt;/li&gt;
  &lt;li&gt;Use explicit authorization: add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSLocationRequireExplicitServiceSession&lt;/code&gt; key to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt; and hold an instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt; for as long as you’re getting values from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You’re only using either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; (not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationManager&lt;/code&gt;) &lt;em&gt;and&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;You’re supporting iOS 18+ &lt;em&gt;and&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;You need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always&lt;/code&gt; authorization &lt;em&gt;or&lt;/em&gt; explicit full accuracy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then:&lt;/p&gt;

&lt;p&gt;You must take a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt;. You can still add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSLocationRequireExplicitServiceSession&lt;/code&gt; if you want to ensure you don’t make a mistake.&lt;/p&gt;

&lt;h3 id=&quot;testing-the-full-accuracy-permission-prompt&quot;&gt;Testing the full accuracy permission prompt&lt;/h3&gt;

&lt;p&gt;One way to test the permission prompt for full accuracy usage is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Start a fresh copy of your app on a simulator.&lt;/li&gt;
  &lt;li&gt;Trigger the location prompt and allow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whenInUse&lt;/code&gt; permissions.&lt;/li&gt;
  &lt;li&gt;Force quit the app.&lt;/li&gt;
  &lt;li&gt;In the simulator’s Settings.app, go to your app’s settings page -&amp;gt; Location Services and disable Full Accuracy.&lt;/li&gt;
  &lt;li&gt;Cold launch your app.&lt;/li&gt;
  &lt;li&gt;Trigger your feature that requires full accuracy permissions.&lt;/li&gt;
  &lt;li&gt;The permission prompt should appear.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/core-location-full-accuracy-prompt.jpg&quot; width=&quot;&quot; height=&quot;380&quot; alt=&quot;An example of the temporary full accuracy permission prompt&quot; title=&quot;An example of the temporary full accuracy permission prompt&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;An example of the temporary full accuracy permission prompt&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you approve this permission prompt it will still appear every time you trigger your feature in future cold launches (it’s “temporary” after all).&lt;/p&gt;

&lt;h3 id=&quot;localizing-fullaccuracypurposekey&quot;&gt;Localizing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fullAccuracyPurposeKey&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Full accuracy requests are available in two API:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/corelocation/clservicesession-pt7n/init(authorization:fullaccuracypurposekey:)&quot;&gt;init(authorization:fullAccuracyPurposeKey:)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/corelocation/cllocationmanager/requesttemporaryfullaccuracyauthorization(withpurposekey:completion:)&quot;&gt;requestTemporaryFullAccuracyAuthorization(withPurposeKey:completion:)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(This is another one of those cases where all the documentation is on the page of the deprecated API.)&lt;/p&gt;

&lt;p&gt;I’m using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt; in the following manner:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;CLServiceSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;authorization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;whenInUse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fullAccuracyPurposeKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NSLocationTemporaryUsageDescriptionDictionaryMonitor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Specifying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fullAccuracyPurposeKey&lt;/code&gt; tells &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt; that the feature associated with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt; instance prefers having &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fullAccuracy&lt;/code&gt;, and will try to prompt for it automatically when possible (“possible” being any number of rules).&lt;/p&gt;

&lt;p&gt;The relevant part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt; should look like the below plist for specifying your app’s reason for wanting full accuracy permission. Notice I have two different keys because I have two features that each instantiate their own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;plist&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSLocationTemporaryUsageDescriptionDictionary&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSLocationTemporaryUsageDescriptionDictionaryMonitor&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;NSLocationTemporaryUsageDescriptionDictionaryMonitor&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSLocationTemporaryUsageDescriptionDictionaryNearbyStations&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;NSLocationTemporaryUsageDescriptionDictionaryNearbyStations&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you’re not localizing and have no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InfoPlist.xcstrings&lt;/code&gt;, you can add the actual message you show the user to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;string&amp;gt;your message&amp;lt;/string&amp;gt;&lt;/code&gt; part.&lt;/p&gt;

&lt;p&gt;If you are localizing, then you should add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSLocationTemporaryUsageDescriptionDictionaryMonitor&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSLocationTemporaryUsageDescriptionDictionaryNearbyStations&lt;/code&gt; as keys in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InfoPlist.xcstrings&lt;/code&gt; file, with the corresponding translations.&lt;/p&gt;

&lt;p&gt;In the above plist I’ve repeated the key name as the value, but it won’t be used since I added the key to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InfoPlist.xcstrings&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I’ve used a key name with the full prefix of the root dictionary key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSLocationTemporaryUsageDescriptionDictionary&lt;/code&gt;, but you can use any valid localization key name.&lt;/p&gt;

&lt;p&gt;The setup is documented &lt;a href=&quot;https://developer.apple.com/documentation/corelocation/cllocationmanager/requesttemporaryfullaccuracyauthorization(withpurposekey:completion:)&quot;&gt;in this API&lt;/a&gt; and &lt;a href=&quot;https://developer.apple.com/forums/thread/652801?answerId=624692022#624692022&quot;&gt;in the forums&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;location-updates-in-the-background&quot;&gt;Location updates in the background&lt;/h2&gt;

&lt;p&gt;If you need to run in the background based on location changes, you have a few requirements and a few options to consider.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You must to add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Background Modes -&amp;gt; Location updates&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Signing &amp;amp; Capabilities&lt;/code&gt; section of your app target.&lt;/li&gt;
  &lt;li&gt;You must still add the proper permissions key (probably &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSLocationWhenInUseUsageDescription&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSLocationAlwaysAndWhenInUseUsageDescription&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;You must have either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.whenInUse&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.always&lt;/code&gt; permission. As far as I know, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fullAccuracy&lt;/code&gt; permission is not required but I imagine the lack of it would affect most features that require background location updates.&lt;/li&gt;
  &lt;li&gt;You must either:
    &lt;ul&gt;
      &lt;li&gt;Run a Live Activity &lt;em&gt;or&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;Create and hold an instance of &lt;a href=&quot;https://developer.apple.com/documentation/corelocation/clbackgroundactivitysession-3mzv3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLBackgroundActivitySession&lt;/code&gt;&lt;/a&gt; (which is conceptually a single-purpose pre-configured Live Activity).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;You must^ be subscribed to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AsyncStream&lt;/code&gt; from either a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdates&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; instance. (^I have not tested how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationManager&lt;/code&gt; APIs work with iOS 17+ location background APIs, so you are on your own verifying how they work.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I want to specifically call out that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.always&lt;/code&gt; permission is &lt;em&gt;not&lt;/em&gt; required to receive location updates in the background assuming the above requirements are satisfied. As discussed in &lt;a href=&quot;https://developer.apple.com/documentation/corelocation/requesting-authorization-to-use-location-services&quot;&gt;this article&lt;/a&gt;, the main difference between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whenInUse&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always&lt;/code&gt; permission is that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always&lt;/code&gt; permission, your app has the chance of being cold launched in the background in response to “significant location change, visits, and region monitoring services” if it was previously terminated.&lt;/li&gt;
  &lt;li&gt;With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whenInUse&lt;/code&gt; permission, if your app is terminated for any reason, the user must open it again before location updates may be received in the background.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: there’s something called a &lt;a href=&quot;https://developer.apple.com/documentation/corelocation/creating-a-location-push-service-extension&quot;&gt;Location push service extension&lt;/a&gt; that requires &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.always&lt;/code&gt; permission, but I have no experience with what the other requirements are for this feature.&lt;/p&gt;

&lt;p&gt;Relevant docs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/corelocation/handling-location-updates-in-the-background&quot;&gt;Handling location updates in the background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2023/10180&quot;&gt;Discover streamlined location updates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/corelocation/requesting-authorization-to-use-location-services&quot;&gt;Requesting authorization to use location services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-location-updates-firehose-cllocationupdate&quot;&gt;The location updates firehose (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate.liveUpdates&lt;/code&gt; returns a stream of both location coordinates, “errors”, and permissions issues in the form of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; struct.&lt;/p&gt;

&lt;p&gt;Although in theory the API is more streamlined for the simplest of use cases, I’d generally still recommend creating your own system around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationManager&lt;/code&gt; if you’re doing anything that requires stability, robustness, or reliability with Core Location. Regardless, some usage notes for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; are below.&lt;/p&gt;

&lt;h3 id=&quot;ios-18-recommended&quot;&gt;iOS 18+ recommended&lt;/h3&gt;

&lt;p&gt;Although &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; was introduced in iOS 17, I don’t recommend using it until iOS 18 for the following reasons:&lt;/p&gt;

&lt;p&gt;In my testing, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate.liveUpdates&lt;/code&gt; will return no results on iOS 17 when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fullAccuracy&lt;/code&gt; permission is denied. I have no idea whether this was related to the permissions system and fixed in iOS 18 alongside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt; or whether it was simply a bug, but iOS 18 has the expected behavior of returning less accurate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; results when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fullAccuracy&lt;/code&gt; is denied by the user.&lt;/p&gt;

&lt;p&gt;According to the WWDC video, when background usage is not requested by the app, Core Location handles automatically disabling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate.liveUpdates&lt;/code&gt; when going to the background and re-enabling it when coming back into the foreground, but only in iOS 18 alongside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt;. I can’t say for sure how it works in iOS 17, only that my view layer was handling this manually to make sure there were no issues.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; does not include any properties for permissions or other errors in iOS 17 (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorizationDenied&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locationUnavailable&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Not a huge issue by any means, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate.isStationary&lt;/code&gt; was introduced in iOS 17 and deprecated in iOS 18 and renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate.stationary&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;stationary-is-rarely-set-when-the-app-is-in-the-foreground&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stationary&lt;/code&gt; is rarely set (when the app is in the foreground?)&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stationary&lt;/code&gt; flag is set “on the last update before updates are paused because the device has stopped moving” according to the &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2024/10212?time=1003&quot;&gt;WWDC video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What “stopped moving” means is not explicitly documented.&lt;/p&gt;

&lt;p&gt;In practice I’ve never seen an update with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stationary&lt;/code&gt; flag set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;. Based on hints from the WWDC videos, my hypothesis is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stationary&lt;/code&gt; is most relevant when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; and your app is in the background. Perhaps in that setting, Core Location will offer fewer updates and set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stationary&lt;/code&gt; flag more liberally.&lt;/p&gt;

&lt;h3 id=&quot;cllocationupdate-has-no-concept-of-filtering&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; has no concept of filtering&lt;/h3&gt;

&lt;p&gt;The “old” API &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationManager&lt;/code&gt; has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distanceFilter&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;desiredAccuracy&lt;/code&gt; you can use to have Core Location filter updates on your behalf.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; does not have these options. You have to do filtering on the stream yourself.&lt;/p&gt;

&lt;p&gt;Perhaps the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate.LiveConfiguration&lt;/code&gt; values are supposed to influence this instead.&lt;/p&gt;

&lt;h3 id=&quot;cllocationupdatelocationunavailable-is-unpredictable&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate.locationUnavailable&lt;/code&gt; is unpredictable&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locationUnavailable&lt;/code&gt; was introduced in iOS 18. Previously, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; could only have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;location == nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I expected &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locationUnavailable&lt;/code&gt; to be useful as a way to change my UI and alert my users that there may be a temporary issue with getting their location.&lt;/p&gt;

&lt;p&gt;In practice, the behavior changed in iOS 18.1 and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locationUnavailable&lt;/code&gt; updates would be returned in quick succession and interspersed with normal location updates under what I’d consider ideal device conditions. It caused my UI to flicker in distressing ways (nod to SwiftUI) and was unpredictable enough to be hard to filter manually.&lt;/p&gt;

&lt;p&gt;For now, I’ve started ignoring &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locationUnavailable&lt;/code&gt; updates completely. I’ll probably revisit it again in iOS 19 to see whether it’s stable enough to positively influence the UX.&lt;/p&gt;

&lt;h3 id=&quot;updates-are-returned-about-1-or-2-times-per-second&quot;&gt;Updates are returned about 1 or 2 times per second&lt;/h3&gt;

&lt;p&gt;I haven’t seen any official documentation about the update interval from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate.liveUpdates&lt;/code&gt;. In practice I usually see updates on average of about 1 or 2 per second while in the foreground. It’s similar on device and on the simulator. Just an FYI.&lt;/p&gt;

&lt;h3 id=&quot;background-behavior-of-cllocationupdate&quot;&gt;Background behavior of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;I don’t (yet) have a feature that uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; in the background so my testing has been light. But I can report that I’ve seen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; send results while in the background as long as the app has been configured properly for it (see the above “Location updates in the background” section).&lt;/p&gt;

&lt;h2 id=&quot;location-monitoring-clmonitor&quot;&gt;Location monitoring (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt;)&lt;/h2&gt;

&lt;h3 id=&quot;documented-limitations&quot;&gt;Documented limitations&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/corelocation/cllocationmanager/startmonitoring(for:)&quot;&gt;Source&lt;/a&gt; for most of the below quotes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An app can register up to 20 regions at a time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From my testing in iOS 18.1, if you add more than 20, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; will emit one event for each condition over the limit with state &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor.Event.State.unmonitored&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;According to the WWDC video, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor.Event.conditionLimitExceeded&lt;/code&gt; should also be set in this case, although I haven’t confirmed this.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The region monitoring service requires network connectivity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, a note from &lt;a href=&quot;https://developer.apple.com/documentation/corelocation/cllocationmanager/startmonitoringsignificantlocationchanges()&quot;&gt;startMonitoringSignificantLocationChanges&lt;/a&gt; says that “If the device is able to retrieve data from the network, the location manager is much more likely to deliver notifications in a timely manner.”&lt;/p&gt;

&lt;p&gt;So maybe network connectivity isn’t always required?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;an app can expect to receive the appropriate region entered or region exited notification within 3 to 5 minutes on average, if not sooner.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is more or less what I’ve experienced in my testing, with the simulator reporting slightly less on average than the device. It makes testing difficult and also makes it difficult to ensure my feature reacts predictably in the background.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In iOS 6, regions with a radius between 1 and 400 meters work better on iPhone 4S or later devices.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since this hasn’t been updated since iOS 6, the only other advice I’ve found was in &lt;a href=&quot;https://developer.apple.com/forums/thread/757363?answerId=791471022#791471022&quot;&gt;this forums thread&lt;/a&gt; where an Apple engineer says to be careful about making the regions too small:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Also, I wonder if your regions are appropriately large. If you are getting significant location updates every 5 miles, that means you are in an area where the mobile/wifi based signal coverage (which these services depend on) is only adequate for that kind of accuracy. If your region radii are smaller than what the horizontalAccuracy the significant location updates provide, you may actually miss the entry or exit events to those smaller regions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above quote broadly references a note buried in the &lt;a href=&quot;https://developer.apple.com/documentation/corelocation/cllocationmanager/startmonitoringsignificantlocationchanges()&quot;&gt;startMonitoringSignificantLocationChanges&lt;/a&gt; documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Apps can expect a notification as soon as the device moves 500 meters or more from its previous notification.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;clmonitor-on-the-ios-simulator&quot;&gt;CLMonitor on the iOS simulator&lt;/h3&gt;

&lt;p&gt;I had varying success using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; on the iOS 18.1 simulator alongside active location simulation using a GPX file (discussed later). It was a flakey enough that I’d recommend using a real device, although using one was only slightly more successful in verifying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; usage.&lt;/p&gt;

&lt;h3 id=&quot;clmonitoreventstate-values&quot;&gt;CLMonitor.Event.State values&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/corelocation/clmonitor-2r51v/event/state-swift.typealias&quot;&gt;CLMonitor.Event.State&lt;/a&gt; is an alias for the undocumented &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__CLMonitoringState&lt;/code&gt;. I can only access the values occasionally via autocomplete:&lt;/p&gt;

&lt;p&gt;My understanding of the 4 states is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unknown&lt;/code&gt;: the initial state of the condition unless otherwise specified at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt; callsite.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unmonitored&lt;/code&gt;: I believe this is only used when there are too many conditions (over the 20 limit) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; is reporting which conditions will not be monitored.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unsatisfied&lt;/code&gt;: the device is outside the condition region.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;satisfied&lt;/code&gt;: the device is inside the condition region.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-to-set-up-clmonitor&quot;&gt;How to set up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;When using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; (on iOS 18+) you need to manage the lifetime of multiple objects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt; for ensuring Core Location knows your permission goals.&lt;/li&gt;
  &lt;li&gt;A named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; instance for registering conditions.&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; that awaits &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await monitor.events&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your requirements are simple – for example, you’re only monitoring a static condition – you can do all this setup in one place and then tear everything down when cancelling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;monitor.events&lt;/code&gt; stream.&lt;/p&gt;

&lt;p&gt;My requirements are more complicated. The user can modify their route at any time, which triggers a full update of which conditions are monitored. The route may be discarded, at which point I need to stop all monitoring completely.&lt;/p&gt;

&lt;p&gt;If the conditions you need to monitor change unpredictably, I recommend the following pseudocode when changing monitored conditions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If there are no more conditions to monitor:
    &lt;ul&gt;
      &lt;li&gt;Cancel any existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; you have monitoring events already.&lt;/li&gt;
      &lt;li&gt;If a monitor exists, remove all conditions from it, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; it out.&lt;/li&gt;
      &lt;li&gt;Call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invalidate&lt;/code&gt; and  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; out the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLBackgroundActivitySession&lt;/code&gt; if it exists.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; out the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt; if it exists.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Otherwise:
    &lt;ul&gt;
      &lt;li&gt;Create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt; if one does not already exist.&lt;/li&gt;
      &lt;li&gt;Create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLBackgroundActivitySession&lt;/code&gt; if one does not already exist and you want monitoring to keep your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whenInUse&lt;/code&gt; authorized app alive in the background without a dedicated Live Activity.&lt;/li&gt;
      &lt;li&gt;Create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; with a static name if one does not already exist.&lt;/li&gt;
      &lt;li&gt;Calculate which identifiers you need to add and which ones you need to remove (or simpler: remove all conditions and add all new ones)&lt;/li&gt;
      &lt;li&gt;Remove unused conditions&lt;/li&gt;
      &lt;li&gt;Add new conditions&lt;/li&gt;
      &lt;li&gt;If a monitoring &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; exists, do nothing.&lt;/li&gt;
      &lt;li&gt;Otherwise, start a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; awaiting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor.events&lt;/code&gt; and save a reference to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tips-for-creating-a-system-around-clmonitor&quot;&gt;Tips for creating a system around CLMonitor&lt;/h3&gt;

&lt;h4 id=&quot;you-should-target-ios-18&quot;&gt;You should target iOS 18+&lt;/h4&gt;

&lt;p&gt;You can technically use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; with iOS 17, but handling permissions will be either be more complicated or less robust without &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt; (iOS 18+).&lt;/p&gt;

&lt;h4 id=&quot;you-need-to-keep-a-reference-to-clservicesession-clmonitor-and-the-task-that-contains-your-monitoring&quot;&gt;You &lt;em&gt;need&lt;/em&gt; to keep a reference to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt;, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; that contains your monitoring&lt;/h4&gt;

&lt;p&gt;This is because:&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt; defines the authorization requirements of your use of location services for the lifetime of your feature that uses them.&lt;/p&gt;

&lt;p&gt;It is dangerous to try to “recover” a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; with the same name via the initializer if you lose the reference. This means that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; is not designed to be cheaply created and discarded. I tried this strategy at first: create a monitor and discard the old one each time my conditions changed. However, the internal bookkeeping done by Core Location means that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; may outlive your expectations. This means that if you try to initialize a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; with the same name too soon after you’ve discarded one, the app will crash with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Assertion failure in +[CLMonitor _requestMonitorWithConfiguration:locationManager:completion:], CLMonitor.mm:517
Terminating app due to uncaught exception &apos;NSInternalInconsistencyException&apos;, reason: &apos;Monitor named myMonitor is already in use&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From my testing, it seems best to subscribe to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor.events&lt;/code&gt; once and only once per instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; over the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt;’s entire lifetime. Let me try to explain this thoroughly.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;You add some conditions to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;You subscribe to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor.events&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Now you want to change the conditions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, you should keep the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; and the subscription to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor.events&lt;/code&gt; alive and call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor.add&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor.remove&lt;/code&gt; as necessary.&lt;/p&gt;

&lt;p&gt;The other reason it’s “better” to do diffing and only add/remove conditions as necessary is because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; keeps some state on your behalf as illustrated by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor.record(for:)&lt;/code&gt; API that returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor.Record.lastEvent&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;do-not-treat-clmonitor-as-cheaply-disposable&quot;&gt;Do not treat &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; as cheaply disposable&lt;/h4&gt;

&lt;p&gt;You &lt;em&gt;should not&lt;/em&gt; discard the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; and immediately create a new one with the same name (crash described above) and you &lt;em&gt;should not&lt;/em&gt; cancel the subscription and create a new subscription.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; has a bug (I presume) where any later subscription attempt to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor.events&lt;/code&gt; after the first has been cancelled will itself cancel and fall through immediately.&lt;/p&gt;

&lt;h4 id=&quot;do-not-subscribe-to-clmonitor-multiple-times-simultaneously&quot;&gt;Do not subscribe to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; multiple times simultaneously&lt;/h4&gt;

&lt;p&gt;You &lt;em&gt;should not&lt;/em&gt; try to subscribe to the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; multiple times for whatever reason you might want to do that. In my testing, events will be pushed out randomly between subscriptions. This may be a standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AsyncStream&lt;/code&gt; behavior, but regardless, I can’t think of a reason why you’d want this behavior unless you were building some sort of system of distributed workers.&lt;/p&gt;

&lt;h4 id=&quot;you-may-tear-down-the-system-and-stop-monitoring-completely-while-still-being-able-to-recreate-the-system-later&quot;&gt;You &lt;em&gt;may&lt;/em&gt; tear down the system and stop monitoring completely, while still being able to recreate the system later&lt;/h4&gt;

&lt;p&gt;OK, so what about the situation where you &lt;em&gt;do&lt;/em&gt; want to completely stop monitoring but also retain the ability to start monitoring again later?&lt;/p&gt;

&lt;p&gt;The “stop monitoring for now” situation should be covered by the above pseudocode. As long as you do the proper cleanup of cancelling the subscription, removing conditions from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt;, and removing your reference to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLServiceSession&lt;/code&gt; you should be set up fine to recreate the entire system at some later point (but &lt;em&gt;not&lt;/em&gt; right away, with “right away” meaning at least in the same run loop).&lt;/p&gt;

&lt;h4 id=&quot;define-your-system-as-an-actor&quot;&gt;Define your system as an actor&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actor&lt;/code&gt;, which means that basically every one of its APIs requires an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt;. I found it more idiomatic and convenient to define my wrapper system as an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actor&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;reinitializing-the-system-in-a-terminatedcold-launch-scenario&quot;&gt;Reinitializing the system in a terminated/cold launch scenario&lt;/h4&gt;

&lt;p&gt;There are specific requirements around reinitializing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; system after the app has been terminated. My use case doesn’t require this functionality, and therefore my implementation does not handle it. If you do need to handle it (and have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.always&lt;/code&gt; authorization), I encourage you to read &lt;a href=&quot;https://developer.apple.com/documentation/corelocation/handling-location-updates-in-the-background&quot;&gt;the docs&lt;/a&gt;, &lt;a href=&quot;https://developer.apple.com/documentation/corelocation/monitoring-location-changes-with-core-location&quot;&gt;sample code&lt;/a&gt;, and watch &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2023/10147/&quot;&gt;the WWDC video&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;be-careful-about-running-multiple-clmonitor-instances-simultaneously&quot;&gt;Be careful about running multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; instances simultaneously&lt;/h4&gt;

&lt;p&gt;In theory, it should be fine to create multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; instances within the same app session. However, the “up to 20 conditions” limitation is per-app, so with multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt;s you will need to ensure globally you’re not exceeding that limit (if your use case has a danger of doing so).&lt;/p&gt;

&lt;p&gt;I haven’t tested running multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt;s in parallel, so your milage my vary.&lt;/p&gt;

&lt;h3 id=&quot;clmonitor-wrapper-sample-code&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; wrapper sample code&lt;/h3&gt;

&lt;p&gt;Below is a lightly tested implementation of the above pseudocode based on my app’s own implementation. I’d encourage you to use it only as reference when writing your own implementation based on your own app’s requirements and testing it accordingly.&lt;/p&gt;

&lt;p&gt;This implementation assumes you’ve set up the rest of your project correctly with permissions strings, background modes, etc.&lt;/p&gt;

&lt;p&gt;This implementation allows you create an instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SampleLocationMonitor&lt;/code&gt; with the same lifetime as your app (read: singleton). Call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;monitor()&lt;/code&gt; each time your set of conditions changes. If the input set of conditions is empty, the instance will go dormant, otherwise it will update the conditions interactively.&lt;/p&gt;

&lt;p&gt;This implementation also supports background operation via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLBackgroundActivitySession&lt;/code&gt;. You should remove this if you already have a Live Activity tied to the lifetime of your monitoring. Or remove it if you don’t need any updates in the background.&lt;/p&gt;

&lt;p&gt;The missing piece (see “TODO” below) is what you want to do in response to receiving an event. In my case (not shown), I’m simply refreshing a Live Activity based on an existing schedule.&lt;/p&gt;

&lt;p&gt;If you want access to all events, I would be careful about modifying this to return the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;monitor.events&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AsyncStream&lt;/code&gt; directly because of the limitations discussed above, namely: there can only be one subscription per &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLMonitor&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; you cannot cancel a subscription and create a new one later.&lt;/p&gt;

&lt;p&gt;Instead, I’d consider either:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Registering a closure along side each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MonitorCondition&lt;/code&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SampleLocationMonitor&lt;/code&gt; to execute (this may be difficult to design due to Swift 6 concurrency isolation).&lt;/li&gt;
  &lt;li&gt;Creating a long-lived &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AsyncStream&lt;/code&gt; as a property of and bound to the lifetime of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SampleLocationMonitor&lt;/code&gt; that relays all events to a subscriber.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I haven’t tested either strategy, so your milage my vary.&lt;/p&gt;

&lt;p&gt;Anyway, here is the sample implementation:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonitorCondition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Identifiable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sendable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Hashable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;coordinates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLLocationCoordinate2D&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radiusInMeters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLLocationDistance&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;@available(iOS 18.0, *)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SampleLocationMonitor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;authSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLServiceSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLMonitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;backgroundSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLBackgroundActivitySession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;monitoringTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;monitorID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;monitor&quot;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;monitorConditions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MonitorCondition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ync&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monitorConditions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;monitoringTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;monitoringTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;monitor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;monitoringIdentifiers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;identifiers&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitoringIdentifiers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;backgroundSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;invalidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;backgroundSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;authSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;authSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authSession&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLServiceSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;authorization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;whenInUse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fullAccuracyPurposeKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NSLocationTemporaryUsageDescriptionDictionarySampleLocationMonitor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authSession&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;backgroundSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backgroundSession&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLBackgroundActivitySession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLMonitor&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;existingMonitor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;existingMonitor&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newMonitor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLMonitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monitorID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newMonitor&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;nf&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monitorConditions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CLMonitor supports up to 20 conditions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;existingIdentifiers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;identifiers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;identifiersToAdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monitorConditions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subtracting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;existingIdentifiers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;identifiersToRemove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;existingIdentifiers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subtracting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monitorConditions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifierToRemove&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifiersToRemove&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;identifierToRemove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitorCondition&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitorConditions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifiersToAdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monitorCondition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLMonitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CircularGeographicCondition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitorCondition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coordinates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitorCondition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radiusInMeters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitorCondition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;suming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unsatisfied&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monitoringTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;monitoringTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// Optional: the last event if you need to do comparisons to derive _entry_ or _exit_ events.&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lastEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastEvent&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// TODO: Do whatever you want to do with the events here&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monitoringTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitoringTask&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;h3 id=&quot;simulating-a-moving-location&quot;&gt;Simulating a moving location&lt;/h3&gt;

&lt;p&gt;I had some success using simulated location changes via GPX files. It works on both simulator and device.&lt;/p&gt;

&lt;p&gt;The GPX file playback starts immediately on app launch. The file playback will repeat immediately after reaching the last entry.&lt;/p&gt;

&lt;p&gt;I used this tutorial: &lt;a href=&quot;https://digitalbunker.dev/simulating-a-moving-location-in-ios/&quot;&gt;Simulating A Moving Location In iOS&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;fixing-issue-where-gpx-files-cannot-be-selected-in-the-file-picker-in-xcode&quot;&gt;Fixing issue where GPX files cannot be selected in the file picker in Xcode&lt;/h3&gt;

&lt;p&gt;A strange issue blocked me from using location simulation at first.&lt;/p&gt;

&lt;p&gt;In the file picker that appears when selecting “Add GPS Exchange to Project” in the Scheme editor, all GPX files would be greyed out and unselectable. The issue appeared in a few random Stack Overflow and forum posts scattered across several years.&lt;/p&gt;

&lt;p&gt;Eventually I tracked it down to an app I had installed called Guitar Pro asserting ownership over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gpx&lt;/code&gt; files in macOS system wide. I confirmed this with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mdls&lt;/code&gt; CLI utility (output abridged for clarity):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mdls basha-yoko.gpx

_kMDItemDisplayNameWithExtensions  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;basha-yoko.gpx&quot;&lt;/span&gt;
kMDItemContentCreationDate         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2024-11-30 03:31:08 +0000
kMDItemContentType                 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.arobas-music.guitarpro6.document&quot;&lt;/span&gt;
kMDItemContentTypeTree             &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;com.arobas-music.guitarpro6.document&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;public.data&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;public.item&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
kMDItemDisplayName                 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;basha-yoko.gpx&quot;&lt;/span&gt;
kMDItemDocumentIdentifier          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 57051
kMDItemKind                        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Guitar Pro 6 document&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Uninstalling Guitar Pro was the only thing that fixed it long enough for me to select one file. After I restarted my computer, the file picker was broken again.&lt;/p&gt;

&lt;p&gt;For anyone else suffering with this issue, you may be able to fix it by opening your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xcscheme&lt;/code&gt; file (sometimes embedded in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xcodeproj&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xcodeworkspace&lt;/code&gt; bundle) and adding the following xml when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locations.gpx&lt;/code&gt; is in the same folder as your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xcodeproj&lt;/code&gt;. Basically, the file path of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;identifier&lt;/code&gt; is in reference to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xcscheme&lt;/code&gt; file, which in my case is two folders deep inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xcodeproj&lt;/code&gt; bundle.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;LocationScenarioReference&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;identifier =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;../../locations.gpx&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;referenceType =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LocationScenarioReference&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The only way to tell if it’s working is by running it on the simulator and seeing it the location updates are played back as you’d expect. For me, Xcode still wouldn’t show the GPX file as active in its UI.&lt;/p&gt;

&lt;p&gt;I don’t think your GPX file needs to be added to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xcodeproj&lt;/code&gt; but I’m not 100% sure.&lt;/p&gt;

&lt;p&gt;Reference: &lt;a href=&quot;https://forums.developer.apple.com/forums/thread/686875&quot;&gt;Apple forums&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I hope this post will help those in the Core Location avant-garde.&lt;/p&gt;

&lt;p&gt;Core Location is an important part of my app, but I still have many other features to manage, so although I’ll try to update this post with any new behavior I discover, I also welcome any well-researched tips or links to related blog posts. Feel free to send them over.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Dec 2024 16:20:00 -0600</pubDate>
        <link>https://twocentstudios.com/2024/12/02/core-location-modern-api-tips/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2024/12/02/core-location-modern-api-tips/</guid>
        
        <category>apple</category>
        
        <category>ios</category>
        
        <category>ekibright</category>
        
        
      </item>
    
      <item>
        <title>Eki Bright - Design of Station Detail</title>
        <description>&lt;p&gt;I’ve done a few nice-sized releases of &lt;a href=&quot;/2024/07/27/eki-bright-tokyo-area-train-timetables/&quot;&gt;Eki Bright&lt;/a&gt; since my &lt;a href=&quot;/2024/08/06/eki-bright-developing-the-app-for-ios/&quot;&gt;first launch&lt;/a&gt; in August.&lt;/p&gt;

&lt;p&gt;Eki Bright is my solo-developed iOS app for viewing station timetables for the Tokyo-area train network.&lt;/p&gt;

&lt;p&gt;In this post, I want to share some of the design decisions for a screen I added in v1.2 and v1.3: the &lt;strong&gt;station detail screen&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-current.jpg&quot; width=&quot;&quot; height=&quot;600&quot; alt=&quot;The station detail screen, added in v1.2&quot; title=&quot;The station detail screen, added in v1.2&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The station detail screen, added in v1.2&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;The first release of Eki Bright had 4 screens: home, station timetable, train timetable, and station search (disregarding the about screen, nearby screen, and widgets).&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-app-v1.png&quot; width=&quot;&quot; height=&quot;380&quot; alt=&quot;The four screens available in v1.0&quot; title=&quot;The four screens available in v1.0&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The four screens available in v1.0&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In all honesty, even the “nearby stations” section of the home screen and the train timetables screens were superfluous to my original concept for the app. Even station search by text was only required to populate your station bookmarks.&lt;/p&gt;

&lt;p&gt;However, as most projects go, the scope started to naturally increase as I found myself out and about using the prototype and missing features.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-with-the-station-timetable-screen&quot;&gt;The problem with the station timetable screen&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;Station&lt;/strong&gt; is the core model concept in the app. A &lt;strong&gt;Railway&lt;/strong&gt; connects an ordered group of stations.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-railway-model.png&quot; width=&quot;&quot; height=&quot;320&quot; alt=&quot;A Station belongs to a Railway&quot; title=&quot;A Station belongs to a Railway&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A Station belongs to a Railway&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A &lt;strong&gt;StationTimetable&lt;/strong&gt; shows when a &lt;strong&gt;Train&lt;/strong&gt; departs a &lt;strong&gt;Station&lt;/strong&gt; going in one &lt;strong&gt;Direction&lt;/strong&gt; on a particular &lt;strong&gt;Schedule&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-station-timetable-model.png&quot; width=&quot;&quot; height=&quot;370&quot; alt=&quot;A StationTimetable is defined by its Station, Direction, and Schedule&quot; title=&quot;A StationTimetable is defined by its Station, Direction, and Schedule&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A StationTimetable is defined by its Station, Direction, and Schedule&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I already had a simple station timetable screen whose focus was on departure times.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-simple-timetable.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;The simple station timetable screen in v1.0&quot; title=&quot;The simple station timetable screen in v1.0&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The simple station timetable screen in v1.0&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The station timetable screen was built as the logical next step to choosing a &lt;strong&gt;StationBookmark&lt;/strong&gt;. A &lt;strong&gt;StationBookmark&lt;/strong&gt; stores both the &lt;strong&gt;Station&lt;/strong&gt; a user often departs from and the &lt;strong&gt;Direction&lt;/strong&gt; they’re headed. For example, I often depart from &lt;em&gt;Bashamichi&lt;/em&gt; station going &lt;em&gt;inbound&lt;/em&gt; towards Yokohama on a &lt;em&gt;weekday&lt;/em&gt; schedule.&lt;/p&gt;

&lt;p&gt;Without that second piece of data – the &lt;strong&gt;Direction&lt;/strong&gt; – there’s not enough information yet to show a timetable. Not a problem for bookmarks, but a big problem for nearby stations and searched stations.&lt;/p&gt;

&lt;p&gt;For v1.0, my design solution was:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add a direction switcher to the station timetable screen (when applicable – some stations only have one direction).&lt;/li&gt;
  &lt;li&gt;Default the user to one of the directions when they selected a station from nearby or search.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The assumption was that the user would double check the default direction and switch to the opposite direction if necessary. More than half the time, this gets the user to their desired information (the timetable) faster than the alternative designs.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-timetable-direction-segmented.jpg&quot; width=&quot;&quot; height=&quot;600&quot; alt=&quot;Station timetable screen in v1.0 with a direction segmented control&quot; title=&quot;Station timetable screen in v1.0 with a direction segmented control&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Station timetable screen in v1.0 with a direction segmented control&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One alternative design would be to show both rail directions as tappable buttons on the home or search screen.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-alternate-nearby.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Unimplemented alternative design making the user choose both station and direction at the same time&quot; title=&quot;Unimplemented alternative design making the user choose both station and direction at the same time&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Unimplemented alternative design making the user choose both station and direction at the same time&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another alternative design would be to present an inter-statial screen that only asked: “which direction are you going?”&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-station-detail-alternate.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Alternative design explored during pre-release making the user choose a direction in a separate step after choosing a station before showing the timetable&quot; title=&quot;Alternative design explored during pre-release making the user choose a direction in a separate step after choosing a station before showing the timetable&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Alternative design explored during pre-release making the user choose a direction in a separate step after choosing a station before showing the timetable&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I considered both those alternatives to be clearer in the short term, but slower in the long term once the user understood the flow.&lt;/p&gt;

&lt;p&gt;My guiding principle of the app is speed. Therefore, I chose the v1.0 design solution with the intention to return to the decision later.&lt;/p&gt;

&lt;h2 id=&quot;identifying-user-flows&quot;&gt;Identifying user flows&lt;/h2&gt;

&lt;p&gt;There’s clearly two user main user flows that branch off from when the user opens the app:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A. The user is in a familiar place and chooses a station bookmark&lt;/li&gt;
  &lt;li&gt;B. The user is in an unfamiliar place and chooses a nearby station&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-use-cases.png&quot; width=&quot;&quot; height=&quot;600&quot; alt=&quot;(A) and (B) use cases&quot; title=&quot;(A) and (B) use cases&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;(A) and (B) use cases&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Additionally, there’s a third flow for when the user is perhaps first setting up their bookmarks or doing some other station research.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C. The user is searching for a station by text&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use cases (B) and (C) are similar in that &lt;em&gt;the user needs to choose a direction&lt;/em&gt;, so I’ll combine them.&lt;/p&gt;

&lt;p&gt;The (A) case is already solved well enough with the existing station timetable screen. If anything, it’d be great to &lt;em&gt;remove&lt;/em&gt; the complexity of having a direction switcher in this case where it’s ambiguously useful.&lt;/p&gt;

&lt;p&gt;My goal was to find a better solution to the (B) use cases than I’d previously pitched (to myself).&lt;/p&gt;

&lt;h2 id=&quot;identifying-design-goals&quot;&gt;Identifying design goals&lt;/h2&gt;

&lt;p&gt;The primary design goal is for the user to find their timetable departure as quickly as possible with as few taps as possible.&lt;/p&gt;

&lt;p&gt;Another key observation I got from my own experience and user feedback was that it’s often quite burdensome trying to figure out which direction is the &lt;em&gt;correct&lt;/em&gt; one in any given trip scenario.&lt;/p&gt;

&lt;p&gt;Of course, this is mostly a solved problem with traditional algorithmic based routing based on departure and destination points, like the UX of Google Maps or Jorudan apps. You type in your destination and the app gives you a route and tells you which platform to wait at.&lt;/p&gt;

&lt;p&gt;But despite of the ease of use of traditional routing apps, I was still finding myself wanting to explore the relative simplicity of a &lt;em&gt;departure-based&lt;/em&gt; UX rather than a &lt;em&gt;destination-based&lt;/em&gt; UX.&lt;/p&gt;

&lt;p&gt;So my secondary design goal was helping the user decide which direction was correct as quickly as possible with the least amount of mental overhead.&lt;/p&gt;

&lt;p&gt;And finally, I realized that I had a lot of often extraneous yet sometimes interesting and useful data about each station that I had nowhere to display. As a tertiary goal, it would be nice to have a place for all that data that respects the principle of &lt;em&gt;progressive disclosure&lt;/em&gt;: staying out of the way while still being accessible when desired.&lt;/p&gt;

&lt;h2 id=&quot;exploring-solutions&quot;&gt;Exploring solutions&lt;/h2&gt;

&lt;p&gt;Starting from the most important of the design goals, I started mapping out the station detail screen.&lt;/p&gt;

&lt;h3 id=&quot;first-design-goal-timetable-departures&quot;&gt;First design goal: timetable departures&lt;/h3&gt;

&lt;p&gt;If we want the user to find their timetable departure as quickly as possible, the most direct solution is to simply show the timetables for both directions as the same time. The upside to this design is that there are no additional taps. The downside is visual complexity.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-side-by-side-timetables.png&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;An interface sketch with timetable items for directions side-by-side&quot; title=&quot;An interface sketch with timetable items for directions side-by-side&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;An interface sketch with timetable items for directions side-by-side&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Honestly, this was the biggest unknown that I wrestled with throughout the design and implementation process. I doubled down on the bet that the gain in speed would outweigh the visual complexity of the screen. The only way to test it was to progressively build out more and more of the screen, enough so that I could test it in context with a wide variety of stations in a wide variety of situations.&lt;/p&gt;

&lt;p&gt;But showing two directions means doubling much of the data on the screen. And making the visual complexity even worse.&lt;/p&gt;

&lt;p&gt;What fell out of this design decision was that there were situations where the user &lt;em&gt;had&lt;/em&gt; already specified which direction they were interested in. In this case, the screen could hide a full column.&lt;/p&gt;

&lt;p&gt;What made this screen different from the station timetable screen? Well, I would have truncate the full timetable since there were other sections. The fact that I could link out the station timetable screen meant I could be smart about narrowing down the timetable items based on projected use cases.&lt;/p&gt;

&lt;p&gt;Most often, the user is starting their journey &lt;em&gt;now&lt;/em&gt; and doesn’t need earlier departures. I can also bet the user is not planning a journey too far into the future. But I need to account for stations that have significantly frequent departures with different train types and destination stations. Without knowing how much could be fit on the screen, I guessed &lt;em&gt;4 timetable items&lt;/em&gt; would fit the requirements (and later expanded it to 6).&lt;/p&gt;

&lt;p&gt;For better or worse (UX), showing a station’s departures for both directions &lt;strong&gt;solves the first design goal&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;second-design-goal-determining-direction&quot;&gt;Second design goal: determining direction&lt;/h3&gt;

&lt;p&gt;The second design goal – giving the user enough information to determine their direction – also could be solved several ways. I turned to skeuomorphism and the humble rail diagram commonly found in train stations.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-bashamichi-photo.jpg&quot; width=&quot;&quot; height=&quot;500&quot; alt=&quot;A rail diagram on the wall at Bashamichi station&quot; title=&quot;A rail diagram on the wall at Bashamichi station&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A rail diagram on the wall at Bashamichi station&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The rail diagram format has several upsides:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Almost all train riders have seen its shape before.&lt;/li&gt;
  &lt;li&gt;I already have the data to construct it dynamically.&lt;/li&gt;
  &lt;li&gt;It maps somewhat logically to directions.&lt;/li&gt;
  &lt;li&gt;It shows both terminal stations and neighboring stations (one of which is usually enough to orient a rider)&lt;/li&gt;
  &lt;li&gt;It implicitly includes railway information so users don’t get confused about e.g. &lt;em&gt;which&lt;/em&gt; Shibuya station they’re looking at.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Posting a rail diagram at the top of the screen acts as a guide. The user can look for their destination station on the left or right side of the rail diagram, and then choose a departure from the timetable on that side. &lt;strong&gt;This solved the second design goal.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The distinct look of the rail diagram also acted as a nice way to distinguish the station detail screen from the station timetable screen or other screens.&lt;/p&gt;

&lt;h3 id=&quot;third-design-goal-tactfully-show-infrequently-used-data&quot;&gt;Third design goal: tactfully show infrequently used data&lt;/h3&gt;

&lt;p&gt;Finally, there was the third design goal of including some lesser used information about the station.&lt;/p&gt;

&lt;p&gt;I started by listing out all the potential pieces of data that might fit.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-data-ideas.jpg&quot; width=&quot;&quot; height=&quot;600&quot; alt=&quot;Station data ideas&quot; title=&quot;Station data ideas&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Station data ideas&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To keep scope reasonable, I didn’t want to force myself to implement all these sections for the first release. But I did want to keep a record of ideas for later while also getting an intuitive feel for how flexible the design would be for adding new types of data.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-layout-ideas.jpg&quot; width=&quot;&quot; height=&quot;700&quot; alt=&quot;Layout ideas for the station detail screen&quot; title=&quot;Layout ideas for the station detail screen&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Layout ideas for the station detail screen&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this very rough sketch, I got to work on my design-via-SwiftUI procedure.&lt;/p&gt;

&lt;h2 id=&quot;arranging-the-composite-data&quot;&gt;Arranging the composite data&lt;/h2&gt;

&lt;p&gt;The required data for this screen is more complex than all the other screens so far.&lt;/p&gt;

&lt;p&gt;Starting from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Station.ID&lt;/code&gt;, I’d need the full &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Station&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Railway&lt;/code&gt; data.&lt;/p&gt;

&lt;p&gt;For timetables, I’d need 1 or 2 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Direction&lt;/code&gt; for each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Schedule&lt;/code&gt; because I’d committed during the planning phase to support user-selectable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Schedule&lt;/code&gt; alongside using the automatically calculated schedule for the current day.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aside: in retrospect, committing to user-selectable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Schedule&lt;/code&gt; was a significant development burden that was completely unnecessary and unrelated to any design goals. Although I fully designed and built the feature, because of its downstream unintended consequences on the UX of other screens, I ended up removing the option to use it before release.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-schedule-button.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;A schedule selector button (bottom right) fully implemented but removed before release&quot; title=&quot;A schedule selector button (bottom right) fully implemented but removed before release&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A schedule selector button (bottom right) fully implemented but removed before release&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For connected stations (i.e. transfer stations, connected railways), I had the data but had not yet imported it into the app’s domain model. I ended up adding this section in the next point release (v1.3).&lt;/p&gt;

&lt;p&gt;Disregarding the additional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Schedule&lt;/code&gt; infrastructure, it wasn’t significantly slower to create the composite model for this screen than it would have been to assemble a mock data structure. Therefore I designed with the final data structure fetched from the database. This is always preferable to mock data because the marginal cost of choosing other stations as test data to populate your design or prototype is so low. For example, it was much quicker to find station examples from the database with long text that broke my initial layouts.&lt;/p&gt;

&lt;h2 id=&quot;list-sections&quot;&gt;List sections&lt;/h2&gt;

&lt;h3 id=&quot;designing-and-implementing-the-railway-diagram&quot;&gt;Designing and implementing the railway diagram&lt;/h3&gt;

&lt;p&gt;The railway diagram was important enough to the design and implement first.&lt;/p&gt;

&lt;p&gt;I started with a paper sketch that helped me understand the nuanced cases I’d need to cover.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-railway-diagram-cases.jpg&quot; width=&quot;&quot; height=&quot;600&quot; alt=&quot;Sketch of the railway diagram and 5-ish distinct cases&quot; title=&quot;Sketch of the railway diagram and 5-ish distinct cases&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Sketch of the railway diagram and 5-ish distinct cases&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This was a fun design and layout challenge. I wanted to show the terminal stations of the railway and both neighboring stations to the target station. I also wanted to change the line style to be solid when the stations on the diagram were directly connected and dotted when there were other stations in between them.&lt;/p&gt;

&lt;p&gt;Of course, the Yamanote circle line broke a lot of my assumptions and required some special casing and a custom algorithm. But overall I felt like the design ended up where I wanted it to.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-final-railway-diagram.png&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;The finished railway diagram&quot; title=&quot;The finished railway diagram&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The finished railway diagram&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;designing-the-timetable-section&quot;&gt;Designing the timetable section&lt;/h3&gt;

&lt;p&gt;I reused the timetable item design language from other parts of the app. Including the 1-character train type indicator. Some lines are all local and all have the same destination, but many do not and require this data in order to be useful at a glance.&lt;/p&gt;

&lt;p&gt;In the first version, I always calculated the timetable lower cutoff based on the current (live updating) time. However, after implementing connecting stations, I realized that when calculating transfer times, it made sense to pass through times from previous screens and allow the user to toggle between them if necessary.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-toggle-departure-time.gif&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Toggling between cutoff times&quot; title=&quot;Toggling between cutoff times&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Toggling between cutoff times&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I was a little unsure of whether the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;...&lt;/code&gt; button would be clear enough to indicate the full station timetable. So far it seems to be okay.&lt;/p&gt;

&lt;h3 id=&quot;last-train-by-type&quot;&gt;Last train by type&lt;/h3&gt;

&lt;p&gt;A bit of speculative feature: I thought seeing last train times at a glance would be occasionally useful. You can see this data by searching for “last” in the Google Maps schedule selector, but it only shows the actual last train regardless of type. As a user, sometimes I want to know when the last limited express train is because for me taking the local is about twice as long.&lt;/p&gt;

&lt;p&gt;Technically, I should also be showing the last trains by both type &lt;em&gt;and&lt;/em&gt; destination. But for most railways, I think type is enough for now.&lt;/p&gt;

&lt;p&gt;Another tough part about this section was what to name it in both English and Japanese.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-last-train.png&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Last train by type (local, express, etc.)&quot; title=&quot;Last train by type (local, express, etc.)&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Last train by type (local, express, etc.)&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bookmarks&quot;&gt;Bookmarks&lt;/h3&gt;

&lt;p&gt;Bookmarks was one of the most difficult layout choices I had to make for station detail, and I’m still not completely satisfied with it.&lt;/p&gt;

&lt;p&gt;In my view as the designer of Eki Bright, bookmarks are the core feature of the app because they enable lookup speed and so heavily differentiate the app from its full-featured competitors. They also enable use of widgets, another core feature of the app.&lt;/p&gt;

&lt;p&gt;The flow of adding bookmarks needs to be &lt;em&gt;fast&lt;/em&gt;, &lt;em&gt;obvious&lt;/em&gt;, and &lt;em&gt;efficient&lt;/em&gt;, but after bookmarks are added, it will be rarely used. This makes it very difficult to design for.&lt;/p&gt;

&lt;p&gt;I ended up compromising. I added a bookmark icon to the top right navigation bar that scrolls to the bookmark button section lower in the list.&lt;/p&gt;

&lt;video src=&quot;/images/station-detail-bookmark-jump.mp4&quot; controls=&quot;&quot; preload=&quot;auto&quot; height=&quot;400&quot;&gt;&lt;/video&gt;

&lt;p&gt;Why not just have the button in the navigation bar work as the real button? Each station direction can have its own independent bookmark, so it makes more sense to have buttons segregated in the same way.&lt;/p&gt;

&lt;p&gt;Still, it’s confusing, and definitely requires a more long term solution.&lt;/p&gt;

&lt;h3 id=&quot;train-types&quot;&gt;Train types&lt;/h3&gt;

&lt;p&gt;Getting less useful now, but I still think it’s good to see an overview of which train types exists for more complicated railways.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-train-types.png&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;A list of train types that run from this station and their assigned category&quot; title=&quot;A list of train types that run from this station and their assigned category&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A list of train types that run from this station and their assigned category&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a future version, I’d like to add some calculations for each train type to show an average of how often each arrives and what part of the day each is active for.&lt;/p&gt;

&lt;h3 id=&quot;destination-stations&quot;&gt;Destination stations&lt;/h3&gt;

&lt;p&gt;Another rarely useful bit of information, depending on the railway. I added this mostly because it was easy to calculate.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-destinations.png&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;A list of destination stations and how many trains end there on the scheduled day&quot; title=&quot;A list of destination stations and how many trains end there on the scheduled day&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A list of destination stations and how many trains end there on the scheduled day&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;rail-direction-toggle&quot;&gt;Rail direction toggle&lt;/h3&gt;

&lt;p&gt;For stations that have more than one direction, the toolbar is shown with individually toggleable direction buttons.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-toggle-direction.gif&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Tap either button to hide or show it in the list&quot; title=&quot;Tap either button to hide or show it in the list&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Tap either button to hide or show it in the list&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;self-critique&quot;&gt;Self critique&lt;/h2&gt;

&lt;p&gt;As discussed above at various points, I think this screen has plenty of room left for improvement. However, I’m pleased enough with how it accomplishes the three design goals I set out to accomplish.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Railway diagram: there are a few stations where the text gets cut off in strange ways.&lt;/li&gt;
  &lt;li&gt;Bookmarks: I’d like to experiment with popping up a separate modal for adding a bookmark instead of scrolling the list.&lt;/li&gt;
  &lt;li&gt;Direction toggle buttons: I’d like to try moving these buttons above the railway diagram. Although important, in real usage I rarely find myself changing them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m of course interested in real user feedback. If you’re a Tokyo-area resident, &lt;a href=&quot;https://apps.apple.com/app/%E9%A7%85%E3%83%96%E3%83%A9%E3%82%A4%E3%83%88/id6504702463&quot;&gt;download the app&lt;/a&gt;, give it a go, and send me your thoughts.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Oct 2024 17:20:00 -0500</pubDate>
        <link>https://twocentstudios.com/2024/10/14/eki-bright-station-detail/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2024/10/14/eki-bright-station-detail/</guid>
        
        <category>apple</category>
        
        <category>ios</category>
        
        <category>ekibright</category>
        
        
      </item>
    
      <item>
        <title>Reminder: Conditional Breakpoints are Slow</title>
        <description>&lt;p&gt;Perhaps it’s obvious that conditional breakpoints in LLDB add noticeable execution latency, but it was a lesson I needed to relearn. And relearning this lesson is fun debugging story to share.&lt;/p&gt;

&lt;p&gt;The context of this story is specifically Swift Error breakpoints, which obscured the root cause of the issue long enough to cause me some serious emotional damage. Despite the lasting trauma, it was a happy ending because the fix required no code changes and no emergency app submissions.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Swift Error breakpoints with type filters or conditions can dramatically slow down execution when errors are thrown in a tight loop.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Disable conditional Swift Error breakpoints when you are not actively debugging with them.&lt;/li&gt;
  &lt;li&gt;Consider not using error handling for control flow in cases where the error handling could end up in a tight loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;issue-and-symptoms&quot;&gt;Issue and symptoms&lt;/h2&gt;

&lt;p&gt;During normal development, I noticed slow startup and noticeable hitching when navigating to and from screens that made database fetches. However, outside the normal build/run cycle, the hitching would disappear and the app would run quickly and smoothly.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/conditional-breakpoint-station-load.gif&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Loading speed of the station timetable screen on the simulator after a build and run (it was twice as slow on device)&quot; title=&quot;Loading speed of the station timetable screen on the simulator after a build and run (it was twice as slow on device)&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Loading speed of the station timetable screen on the simulator after a build and run (it was twice as slow on device)&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The problem appeared somewhat randomly and at first was not severe enough to disrupt my usual development cycle outside being a little annoying.&lt;/p&gt;

&lt;p&gt;After adding more features, the problem gradually became so pronounced that I could no longer debug normally. I would build and run to install the app, then immediately stop debugging and re-launch the app in order to continue testing.&lt;/p&gt;

&lt;p&gt;I did some light investigation throughout the subsequent weeks of development, but I never spent enough time to discover the root cause as I wanted to focus on shipping &lt;a href=&quot;/2024/08/06/eki-bright-developing-the-app-for-ios/&quot;&gt;Eki Bright&lt;/a&gt; to the App Store. At this point I had only confirmed that the issue was present:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In both Debug and Release build configurations.&lt;/li&gt;
  &lt;li&gt;In both the iOS simulator and on device.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;root-cause&quot;&gt;Root cause&lt;/h3&gt;

&lt;p&gt;Before diving into the full story, a TL;DR on root cause of the issue.&lt;/p&gt;

&lt;h4 id=&quot;swift-error-breakpoints&quot;&gt;Swift Error breakpoints&lt;/h4&gt;

&lt;p&gt;Xcode/LLDB has a useful breakpoint type for Swift errors. A fresh Swift Error breakpoint will pause execution when any error is thrown.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/conditional-breakpoint-add-menu.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;All the breakpoint types you can add in Xcode 15.4&quot; title=&quot;All the breakpoint types you can add in Xcode 15.4&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;All the breakpoint types you can add in Xcode 15.4&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Additionally, a Swift Error breakpoint can be conditional to a specific error type.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/conditional-breakpoint-swift-error-edit.jpg&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;Swift Error breakpoints also include a Type filter&quot; title=&quot;Swift Error breakpoints also include a Type filter&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Swift Error breakpoints also include a Type filter&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;grdb&quot;&gt;GRDB&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/groue/GRDB.swift&quot;&gt;GRDB&lt;/a&gt; is a “toolkit for SQLite databases”.&lt;/p&gt;

&lt;p&gt;GRDB has a useful feature called &lt;a href=&quot;https://github.com/groue/GRDB.swift/blob/dd6b98ce04eda39aa22f066cd421c24d7236ea8a/README.md#codable-records&quot;&gt;Codable Records&lt;/a&gt; alongside &lt;a href=&quot;https://github.com/groue/GRDB.swift/blob/dd6b98ce04eda39aa22f066cd421c24d7236ea8a/README.md#json-columns&quot;&gt;JSON Columns&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When a Codable record contains a property that is not a simple value (Bool, Int, String, Date, Swift enums, etc.), that value is encoded and decoded as a JSON string.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This feature makes it simple and boilerplate-free to use embedded JSON in the context of traditional SQL tables.&lt;/p&gt;

&lt;p&gt;Deep in the implementation details, GRDB uses Swift errors to fall back to JSON decoding when a column is not decodable as a simple value.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// GRDB/Record/FetchableRecord+Decodable.swift&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;/// The decoder that decodes from a database column&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ColumnDecoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FetchableRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyedBy&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;KeyedDecodingContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// We need to switch to JSON decoding&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONRequiredError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;/// The decoder that decodes a record from a database row&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_RowDecoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FetchableRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;KeyedContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;KeyedDecodingContainerProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromRow&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columnAtIndex&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decodable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// This decoding will fail for types that decode from keyed&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// or unkeyed containers, because we&apos;re decoding a single&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// value here (string, int, double, data, null). If such an&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// error happens, we&apos;ll switch to JSON decoding.&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;columnDecoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ColumnDecoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;columnIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;codingPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codingPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columnDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONRequiredError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// Decode from JSON&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;withUnsafeData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;atIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DecodingError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;valueNotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DecodingError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;codingPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codingPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;debugDescription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Missing Data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;databaseJSONDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSONRequiredError&lt;/code&gt; is used for control flow. When decoding dozens of rows with several JSON columns, this error will be thrown hundreds of times from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ColumnDecoder&lt;/code&gt; but caught and handled immediately in the caller &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_RowDecoder&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;swift-error-breakpoint--grdb&quot;&gt;Swift Error breakpoint + GRDB&lt;/h4&gt;

&lt;p&gt;Each time GRDB would throw a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSONRequiredError&lt;/code&gt;, the debugger would check a Swift Error breakpoint with the unrelated type filter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;train-timetable.AppDatabaseClient.Error&lt;/code&gt; I had set during feature development and forgotten about.&lt;/p&gt;

&lt;p&gt;Since the &lt;em&gt;throw-error-check-breakpoint&lt;/em&gt; procedure happened hundreds of times for certain queries, the result was a noticeable lag that appeared in the UI more and more as I added more features to the app and therefore database fetches.&lt;/p&gt;

&lt;h4 id=&quot;fix&quot;&gt;Fix&lt;/h4&gt;

&lt;p&gt;The fix was literally just disabling the Swift Error breakpoint.&lt;/p&gt;

&lt;h2 id=&quot;full-debugging-story&quot;&gt;Full debugging story&lt;/h2&gt;

&lt;p&gt;Although I do not enjoy living through a good debugging story, I enjoy telling a good debugging story.&lt;/p&gt;

&lt;p&gt;Documenting your bug investigation can feel slow, but it helps so much in retrospect to develop better instincts for next time. Doing so in a simple text log allowed me to write the following tale as it actually happened.&lt;/p&gt;

&lt;h3 id=&quot;measuring&quot;&gt;Measuring&lt;/h3&gt;

&lt;p&gt;My first step was narrowing down which area of the code was affected. Although almost all screens in my app use the database, the About screen does not, and did not show any sort of hitches.&lt;/p&gt;

&lt;p&gt;I re-ran a measurement test on both device and simulator that I had previously written.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testMeasureDatabaseFetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ync&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;measure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppDatabaseClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;liveValue&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;exp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expectation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetchStationTimetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stationID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Minatomirai.Minatomirai.Bashamichi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;railDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inbound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scheduleSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weekday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fulfill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I confirmed that this simple fetch was taking between 1.5 and 3.0 seconds when there’s no way it should be taking more than 0.01 seconds.&lt;/p&gt;

&lt;p&gt;I enabled database tracing in GRDB.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dbLogger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;subsystem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleIdentifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;db&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepareDatabase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dbLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Slow query: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This helped me keep an eye on query times throughout my investigation.&lt;/p&gt;

&lt;h3 id=&quot;poking-the-database&quot;&gt;Poking the database&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Slow query: 1.491s SELECT * FROM &quot;station&quot; WHERE &quot;id&quot
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first thing I noticed was that I was erroneously submitting way too many keys to the query when doing my ad-hoc database joins. However, after uniquing the keys, the query time didn’t change. After all, if that were the issue I’d see it in production too.&lt;/p&gt;

&lt;p&gt;I thought perhaps reading the database from the bundle could be the problem. But that setup is tacitly endorsed in the &lt;a href=&quot;https://swiftpackageindex.com/groue/grdb.swift/v6.29.0/documentation/grdb/databaseconnections#Opening-a-Connection&quot;&gt;GRDB quickstart&lt;/a&gt;. And again, I’d presumably see this problem in production.&lt;/p&gt;

&lt;p&gt;In fact, almost all the hypotheses I had at first didn’t make sense when considering this problem only appeared in the build/run cycle.&lt;/p&gt;

&lt;p&gt;Another symptom I noticed due to the database logging was that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EntityQuery&lt;/code&gt; I’d added when creating the widget extension was being called several times during app launch. This explained why app launch became unbearably slow at some point.&lt;/p&gt;

&lt;h3 id=&quot;the-debugger&quot;&gt;The debugger&lt;/h3&gt;

&lt;p&gt;At this point, I decided to fire up Instruments and do some profiling. But I couldn’t reproduce the problem with the default Instruments setup. I even changed the build configuration from the default of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Release&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Debug&lt;/code&gt; and still no change.&lt;/p&gt;

&lt;p&gt;This was my first clue that the debugger was involved. But how could I confirm this? Well, I found two ways.&lt;/p&gt;

&lt;p&gt;The first was disabling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Debug executable&lt;/code&gt; option in the Scheme settings under &lt;em&gt;Run&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/conditional-breakpoint-debug-executable.jpg&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;You can prevent Xcode from automatically attaching the debugger when running in the Scheme settings&quot; title=&quot;You can prevent Xcode from automatically attaching the debugger when running in the Scheme settings&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;You can prevent Xcode from automatically attaching the debugger when running in the Scheme settings&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Without the debugger attached, the issue was fixed!&lt;/strong&gt; This was a useful discovery. If I had to stop here, I could at least workaround the issue at the cost of not being able to use the debugger.&lt;/p&gt;

&lt;p&gt;The second confirmation of the debugger’s role in the issue would be useful later on in the investigation. It turns out you can manually attach a debugger to an app being profiled in Instruments.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/conditional-breakpoint-attach-debugger.jpg&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;You can manually attach/detach the debugger to/from a running process in Xcode&quot; title=&quot;You can manually attach/detach the debugger to/from a running process in Xcode&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;You can manually attach/detach the debugger to/from a running process in Xcode&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;rabbit-holes&quot;&gt;Rabbit holes&lt;/h3&gt;

&lt;p&gt;I’d like to say at this point I quickly narrowed down the problem even further. But unfortunately, I went down some unrelated rabbit holes. Yet those rabbit holes eventually led me to another useful discovery.&lt;/p&gt;

&lt;p&gt;A few stray pieces of advice I noticed while Googling prompted me to completely purge derived data, but that made no difference. I’d done this previously when testing whether the issue was fixed in Xcode 16 beta (it was not).&lt;/p&gt;

&lt;p&gt;I dug deeper into the extensive GRDB docs.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I tried switching from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DatabaseQueue&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DatabasePool&lt;/code&gt;. No change.&lt;/li&gt;
  &lt;li&gt;I tried switching from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db.read&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db.unsafeRead&lt;/code&gt; (and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.allowsUnsafeTransations&lt;/code&gt;). No change.&lt;/li&gt;
  &lt;li&gt;I tried adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; in front of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db.read&lt;/code&gt;. No change.&lt;/li&gt;
  &lt;li&gt;I stepped through the execution of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Station.fetchAll(_:keys:)&lt;/code&gt; and didn’t see anything too strange.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I changed my database calls to fetch all results (~2000) instead of just those for a few keys. The fetch time went up from 3 seconds to 30 seconds. This was actually a good clue that &lt;strong&gt;the slowdown scaled linearly with the number of results&lt;/strong&gt;. Although I didn’t yet know what that meant.&lt;/p&gt;

&lt;p&gt;I successfully attached the debugger to the app while profiling in Instruments. Strangely, I saw long calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt;, but the trace went dead there. Plus, the raw function duration values/weights looked normal. Instruments also highlighted a long hang during that period, which re-raised another lingering question: &lt;strong&gt;why was the UI hanging when the entire database fetch was happening on a background queue?&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Returning to the normal debugger, the extra long query generated by fetching all stations allowed me to pause execution during the database fetch. I had to hammer on the pause button in Xcode for it to “catch”, but when it did, I usually ended up in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ColumnDecoder&lt;/code&gt; struct mentioned earlier:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// The decoder that decodes from a database column&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ColumnDecoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FetchableRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyedBy&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;KeyedDecodingContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// We need to switch to JSON decoding&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONRequiredError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;--- execution usually paused here&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When pausing execution randomly as opposed to using a breakpoint, you can’t rely on landing in a relevant section of the code. However, in this case, stepping through and exploring this section of GRDB source showed me two important points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GRDB was intentionally using errors for control flow.&lt;/li&gt;
  &lt;li&gt;I should look into GRDB’s JSON column decoding support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;grdbs-json-column-decoding-support&quot;&gt;GRDB’s JSON column decoding support&lt;/h3&gt;

&lt;p&gt;I noticed my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Station&lt;/code&gt; model had two JSON columns, one of which I’d added later in development (in retrospect, another decision that unwittingly exacerbated the slowdown).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Station&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Identifiable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PersistableRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FetchableRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sendable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TitleLocalization&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;railDirections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;RailDirection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TitleLocalization&lt;/code&gt; is a super simple two-String struct and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RailDirection&lt;/code&gt; is an enum.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TitleLocalization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sendable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RailDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Identifiable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CaseIterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Comparable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sendable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inbound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Inbound&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outbound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Outbound&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I disabled temporarily decoding for these two columns by setting their values to constants.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Station&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Identifiable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PersistableRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FetchableRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sendable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TitleLocalization&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ja&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;railDirections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;RailDirection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inbound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outbound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Disabling decoding for the JSON columns fixed the slowdown!&lt;/strong&gt; This was another big breakthrough.&lt;/p&gt;

&lt;p&gt;So to summarize, at this point I had the following facts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Instruments time profile looked normal besides the hang.&lt;/li&gt;
  &lt;li&gt;The debugger was involved somehow.&lt;/li&gt;
  &lt;li&gt;GRDB’s JSON column decoding support was involved somehow.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;not-just-the-debugger-but-also-breakpoints&quot;&gt;Not just the debugger, but also breakpoints&lt;/h3&gt;

&lt;p&gt;I knew the debugger was my enemy, but I was now using it heavily to pause, step in and out and over code, and set breakpoints.&lt;/p&gt;

&lt;p&gt;At one point while stepping through GRDB code, I thought I was losing my mind. In my normal course of debugging I’d clicked the little “disable breakpoints” button in Xcode debug area header. Sometime later I noticed I could no longer reproduce the slowdown no matter what code I added or removed.&lt;/p&gt;

&lt;p&gt;Luckily I connected the dots and realized that it was disabling breakpoints that solved the slowdown. I’d successfully narrowed down the problem from &lt;em&gt;debugger&lt;/em&gt; to &lt;em&gt;breakpoint&lt;/em&gt;. But now what? Googling “how are breakpoints implemented in LLDB” was obviously a dead end.&lt;/p&gt;

&lt;h3 id=&quot;back-to-grdb&quot;&gt;Back to GRDB&lt;/h3&gt;

&lt;p&gt;In my two front war, I switched back to focusing on GRDB. I re-read the docs and tried a few small code tweaks to see if it was a model configuration problem on my end. After all, I’d written a lot of this code several months ago and probably moved on once it apparently worked.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I tried adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FetchableRecord&lt;/code&gt; conformance to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TitleLocalization&lt;/code&gt;, but that didn’t change anything and it didn’t make sense anyway.&lt;/li&gt;
  &lt;li&gt;I tried adding manual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codable&lt;/code&gt; implementations to both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TitleLocalization&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Station&lt;/code&gt;. No change.&lt;/li&gt;
  &lt;li&gt;I tried adding my own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSONDecoder&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Station&lt;/code&gt; via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static func databaseJSONDecoder(for column: String) -&amp;gt; JSONDecoder&lt;/code&gt; method on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FetchableRecord&lt;/code&gt; protocol. No change.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I tried manually decoding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TitleLocalization&lt;/code&gt; with my own one-off &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSONDecoder&lt;/code&gt; instance.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Station&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Identifiable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PersistableRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FetchableRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sendable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;decoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;titleString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;titleData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TitleLocalization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is a bit unintuitive because the top-level decoder from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Station&lt;/code&gt; is not a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSONDecoder&lt;/code&gt;; it’s a custom decoder from GRDB to decode a row of SQL data. I’m then manually creating a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSONDecoder&lt;/code&gt; to decode the raw string column as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TitleLocalization&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Somewhat as expected, bypassing the error-throwing logic in GRDB and &lt;strong&gt;using my own JSON decoding solved the slowdown&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;reconnaissance-and-rest&quot;&gt;Reconnaissance and Rest&lt;/h3&gt;

&lt;p&gt;I’d been investigating for about 6 hours straight and was starting to lose my mind, yet I felt so close to finding the underlying problem.&lt;/p&gt;

&lt;p&gt;At this point I was considering a few paths forward for the next day:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Workaround: give up using breakpoints indefinitely.&lt;/li&gt;
  &lt;li&gt;Workaround: rewrite my model layer’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codable&lt;/code&gt; support to manually decode all JSON columns, but in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEBUG&lt;/code&gt; mode only.&lt;/li&gt;
  &lt;li&gt;Ask for help: create a sample project that showed a minimal reproduction of the bug and share it in an Issue on the GRDB GitHub repo.&lt;/li&gt;
  &lt;li&gt;Forge ahead: continue investigating on my own.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before I hung it up for the day I wrote and shared a short &lt;a href=&quot;https://hachyderm.io/@twocentstudios/112920118896935621&quot;&gt;cry-for-help post&lt;/a&gt; on Mastodon.&lt;/p&gt;

&lt;p&gt;While writing the Mastodon post, I realized that I could leave the breakpoints feature enabled, but &lt;strong&gt;disable the individual breakpoints in the breakpoint panel and the slowdown was solved&lt;/strong&gt;. This led me to notice I had left a Swift Error breakpoint on that I’d must have added several weeks back and forgot about.&lt;/p&gt;

&lt;p&gt;Exasperated, I shared a few of the salient discoveries to my friend and fellow iOS dev Dave Fox. He asked:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So it’s purely down to that custom [Swift Error] breakpoint?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Without checking because I was now away from the computer, I responded, no, it was any breakpoint.&lt;/p&gt;

&lt;p&gt;I had dinner and went to bed, the investigation still stewing somewhere in the back of my mind.&lt;/p&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The solution&lt;/h3&gt;

&lt;p&gt;I woke up in the middle of the night and in a delirious state and the two pieces of the puzzle had suddenly come together.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I actually &lt;em&gt;hadn’t&lt;/em&gt; checked whether it was only the Swift Error breakpoint that caused the slowdown (triggered by Dave’s question).&lt;/li&gt;
  &lt;li&gt;The GRDB JSON column decoding implementation throws errors as normal control flow.&lt;/li&gt;
  &lt;li&gt;The number of errors thrown by GRDB would increase linearly with the number of rows and JSON columns.&lt;/li&gt;
  &lt;li&gt;My decoding workaround did not throw any errors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I got up and went to the computer and turned off the Swift Error breakpoint while leaving the other breakpoints on. &lt;strong&gt;The slowdown was fixed.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The solution finally made sense: LLDB conditionally type checking every error thrown by GRDB during JSON column decoding was taking significant time and adding up enough to be noticeable. Even though the decoding was happening off the main queue, the debugger was still locking up the entire app while it was processing the breakpoint.&lt;/p&gt;

&lt;p&gt;And thus, I solved the underlying problem. The problem caused no issues for my end users (besides slowing down my ability to ship new features) and required no code changes. I literally just needed to delete a breakpoint.&lt;/p&gt;

&lt;h2 id=&quot;retrospective&quot;&gt;Retrospective&lt;/h2&gt;

&lt;p&gt;At this point I look back and wonder, could I have solved this earlier? What heuristics can I incorporate into my future debugging investigation procedure? What can I do to proactively prevent an issue shaped like this in the future?&lt;/p&gt;

&lt;p&gt;A bug with the debugger as the root cause was new to me. I think it showed a weakness in my overall understanding of LLDB. Based on my awareness that Release builds are always faster than Debug builds (and &lt;a href=&quot;https://github.com/groue/GRDB.swift/issues/1173&quot;&gt;this issue&lt;/a&gt; from the GRDB repo, seemingly resigning to that fact), my assumption was that the root cause was the Debug build configuration. Although following that thinking, that couldn’t have been it because there was no slowdown after the debugger was detached.&lt;/p&gt;

&lt;p&gt;Another ambiguous point I should have clarified early on in the investigation: did the query trace times reported by SQLite include only time spent inside the SQLite library or did they also include time spent in GRDB while a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TRANSACTION&lt;/code&gt; was still open? The answer was the latter, and knowing that definitively would have allowed me to investigate GRDB internals with more confidence.&lt;/p&gt;

&lt;p&gt;The rabbit holes I went down were time consuming, but ultimately, pulling any string was enough to stumble upon insights that got me to the solution.&lt;/p&gt;

&lt;p&gt;The quickest path to the solution would have been:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The slowdown does not occur when debugging with Instruments in the Debug build configuration.
    &lt;ul&gt;
      &lt;li&gt;→ must be related to the debugger.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The slowdown does not occur when Xcode does not attach the debugger.
    &lt;ul&gt;
      &lt;li&gt;→ debugger-related confirmed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The slowdown does not occur when breakpoints are disabled at runtime.
    &lt;ul&gt;
      &lt;li&gt;→ must be related to breakpoints.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The slowdown does not occur when breakpoints are enabled but no individual breakpoints are disabled.
    &lt;ul&gt;
      &lt;li&gt;→ must be an individual breakpoint.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The slowdown does not occur when a normal breakpoint is enabled but a conditional breakpoint is not enabled.
    &lt;ul&gt;
      &lt;li&gt;→ must be the conditional breakpoint.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The slowdown occurs when only the conditional breakpoint is enabled.
    &lt;ul&gt;
      &lt;li&gt;→ conditional breakpoint root-cause confirmed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The big missing piece in being able to jump to each conclusion was the understanding of &lt;em&gt;what components make up a debugger?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If I would have thought: “A debugger’s primary component tools are viewing memory, viewing thread state, viewing the stack frame, setting breakpoints, setting watchpoints, and executing statements”, it may then have been obvious, either right away or through process of elimination, that a way the debugger could directly affect execution was through breakpoints or watchpoints.&lt;/p&gt;

&lt;p&gt;Ultimately, I think most programmers feel instinctual dread when they suspect the bug they’re investigating &lt;em&gt;changes its behavior when it’s being observed&lt;/em&gt;. The quantum nature of these bugs is why we call them &lt;a href=&quot;https://en.wikipedia.org/wiki/Heisenbug&quot;&gt;&lt;em&gt;Heisenbugs&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even though I was admittedly slow in connecting the dots along the debugger line of inquiry, I do give myself credit for recognizing that GRDB was using errors for control flow and filing that away as notable in the back of my head.&lt;/p&gt;

&lt;p&gt;Perhaps I should have jumped first to trying to reproduce the slowdown in a clean room project. However, in this particular case I believe that approach would have been counterproductive and taken longer to find the root cause. The clean room project would have taken time to build up to the complexity of main app, and at that point would still not have any chance of recreating the issue (because I would not have noticed the offending breakpoint still in the main app).&lt;/p&gt;

&lt;p&gt;This experience was a good opportunity to spelunk through the docs and extensive codebase of GRDB. Spelunking through unfamiliar codebases is itself a muscle that must be stretched regularly.&lt;/p&gt;

&lt;p&gt;It would have been nicer to have solved this issue in one hour instead of six (plus the weeks I spent working around it). But I am satisfied I discovered the root cause in one session (plus sleep).&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hopefully you’ve stored this tidbit about the relative slowness of conditional breakpoints away in your memory alongside all the other great Xcode trivia, and you’ll recognize this issue immediately should you ever come across it. Hopefully you enjoyed the story, and I hope I don’t have another one like it for a while.&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Aug 2024 00:02:00 -0500</pubDate>
        <link>https://twocentstudios.com/2024/08/08/conditional-breakpoints/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2024/08/08/conditional-breakpoints/</guid>
        
        <category>apple</category>
        
        <category>ios</category>
        
        <category>debugging</category>
        
        
      </item>
    
      <item>
        <title>Eki Bright - Developing the App for iOS</title>
        <description>&lt;p&gt;Continuing my series of posts about my latest iOS app, Eki Bright 駅ブライト, I’ll discuss the more interesting parts of app at version 1.0.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-app-icon.jpg&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;Eki Bright app icon&quot; title=&quot;Eki Bright app icon&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Eki Bright app icon&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please check out the other posts in the series:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/2024/07/27/eki-bright-tokyo-area-train-timetables/&quot;&gt;Eki Bright - Tokyo Area Train Timetables&lt;/a&gt;&lt;/strong&gt; - the motivation behind the app and the solution I’ve begun to explore&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;This post&lt;/strong&gt; - the high-level implementation details&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tokyo-area residents can download the app from the &lt;a href=&quot;https://apps.apple.com/app/%E9%A7%85%E3%83%96%E3%83%A9%E3%82%A4%E3%83%88/id6504702463&quot;&gt;App Store&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Eki Bright is currently closed source due to data licensing issues, but I’d like to open source it as some point once I get that aspect figured out.&lt;/p&gt;

&lt;h2 id=&quot;stats&quot;&gt;Stats&lt;/h2&gt;

&lt;p&gt;Before starting digging into the details, I’ll go over some stats about the app for context.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The app has 6 screens (5 with behavior).&lt;/li&gt;
  &lt;li&gt;The app has around 5700 lines of Swift code.&lt;/li&gt;
  &lt;li&gt;The app has a minimum deployment target of iOS 17.0.&lt;/li&gt;
  &lt;li&gt;The app supports only the iPhone form factor. There’s no technical reason for this. It was mostly to reduce complexity, promotional material requirements, and testing for the first release.&lt;/li&gt;
  &lt;li&gt;The app uses about 5 packages via Swift Package Manager: ComposableArchitecture, Collections, AsyncAlgorithms, DependenciesAdditions, GRDB, HolidayJp. ComposableArchitecture relies on several other pointfreeco packages, which I also use directly.&lt;/li&gt;
  &lt;li&gt;The app uses a basic xcodeproj file.&lt;/li&gt;
  &lt;li&gt;The app was archived with Xcode 17.4, which includes support for Swift 5.9, iOS 17, and (colloquially) SwiftUI 4.&lt;/li&gt;
  &lt;li&gt;The app has a SwiftUI &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; entry point.&lt;/li&gt;
  &lt;li&gt;The database of railway, station, and timetable data is generated by a script at develop-time and included in the app bundle at compile-time. The app makes no network requests.&lt;/li&gt;
  &lt;li&gt;The app uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;licenseplist&lt;/code&gt; library installed via Homebrew for generating a license file for packages.&lt;/li&gt;
  &lt;li&gt;The app embeds no analytics framework.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;work-schedule&quot;&gt;Work schedule&lt;/h2&gt;

&lt;h3 id=&quot;prototype&quot;&gt;Prototype&lt;/h3&gt;

&lt;p&gt;I started researching and prototyping the app in mid-November. This version had support for one station going inbound on weekdays. It parsed directly from a folder of the raw json files from my data source. There was no importing and no custom database yet. It had one station timetable screen and one widget layout.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v1-widget-proto.gif&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;I was excited about the animation support in the first widget&quot; title=&quot;I was excited about the animation support in the first widget&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;I was excited about the animation support in the first widget&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v1-proto-station-timetable.jpg&quot; width=&quot;&quot; height=&quot;550&quot; alt=&quot;The only screen in the app; a station timetable for one station, inbound, on weekdays&quot; title=&quot;The only screen in the app; a station timetable for one station, inbound, on weekdays&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The only screen in the app; a station timetable for one station, inbound, on weekdays&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After a week of light usage, I’d decided to continue on to start on a production version intended for wide release.&lt;/p&gt;

&lt;h3 id=&quot;sprint-1&quot;&gt;Sprint 1&lt;/h3&gt;

&lt;p&gt;I wrote an import script to turn the input json files into a SQLite database (more on this later). I outlined a simple screen structure, still with the idea that the main app would mostly be a pre-configuration step for the widgets that users would be most interested in.&lt;/p&gt;

&lt;p&gt;By early-December 2023 I had a home screen with bookmarks; a station timetable screen that could show any combination of station, direction, and schedule; a station search screen that worked with romaji; and a station detail screen where you could add or remove a bookmark.&lt;/p&gt;

&lt;video src=&quot;/images/eki-bright-sprint-1-demo.mp4&quot; controls=&quot;&quot; preload=&quot;none&quot; poster=&quot;/images/eki-bright-sprint-1-demo.jpg&quot; width=&quot;300&quot;&gt;&lt;/video&gt;

&lt;p&gt;I took a break from the project for several months, whilst still continuing to use and analyze the fruits of this first sprint.&lt;/p&gt;

&lt;h3 id=&quot;sprint-2&quot;&gt;Sprint 2&lt;/h3&gt;

&lt;p&gt;I started the second sprint in June 2024.&lt;/p&gt;

&lt;p&gt;Although I always had a freshly pruned TODO list, my day-to-day usage of the app while out exploring Tokyo guided a lot of my feelings of what was missing from the first release.&lt;/p&gt;

&lt;p&gt;I made the big decision to only target Japanese for the first release. This required ensuring search worked equally well with hiragana, kanji, and romaji.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-sprint-2-search.gif&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Search supporting romaji, hiragana, and kanji&quot; title=&quot;Search supporting romaji, hiragana, and kanji&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Search supporting romaji, hiragana, and kanji&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When out riding the trains, I realized a few things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I was using the main app a lot more than I expected; not just for my home stations.&lt;/li&gt;
  &lt;li&gt;Text search was procedurally too slow to use to look up nearby stations in the moment.&lt;/li&gt;
  &lt;li&gt;Live updating nearby stations would unlock several use cases I was really excited about.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I took a detour to implement live nearby stations, first in a dedicated screen, then as a smaller section on the on the home screen.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-sprint-2-nearby.jpg&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;A standalone version of the nearby screen&quot; title=&quot;A standalone version of the nearby screen&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A standalone version of the nearby screen&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, I had to tackle the production implementation of widgets, including a mechanism to select which station/direction pair (in the form of a bookmark) appeared in the widget.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-sprint-2-widget-select-station.jpg&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;An early version of bookmark selection from the edit widget screen&quot; title=&quot;An early version of bookmark selection from the edit widget screen&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;An early version of bookmark selection from the edit widget screen&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I was steadily making UX and UI tweaks across the app’s few screens, especially when considering the default Japanese localization. Especially on the station timetable screen. I implemented the swipe &amp;amp; segmented control for switching rail directions, support for showing the entire day’s schedule, showing the current time in-line with the timetable entries, and tweaking font sizes and colors.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-sprint-2-timetable-now.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Experimenting with how to show the current time in line with timetable items&quot; title=&quot;Experimenting with how to show the current time in line with timetable items&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Experimenting with how to show the current time in line with timetable items&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I took a (probably unnecessary for version 1) sidebar to implement a train timetables screen. It shows which stations a train will visit on its journey. This was another common request from my beta testers, and a feature that vastly increased my usage opportunities for the app while riding. Users could now quickly view the destination stations of an express train on an unfamiliar railway and see whether they should get on or wait for the next one.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-sprint-2-train-timetable.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;A early version of the train timetable screen&quot; title=&quot;A early version of the train timetable screen&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A early version of the train timetable screen&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The core features of the app felt pretty good. I moved onto onboarding and the about screen. It was nice to be able to copy the about screen nearly verbatim from Count Biki. Code reuse is usually never that straightforward in practice.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-sprint-2-onboarding.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Iterating on onboarding calls-to-action in English first&quot; title=&quot;Iterating on onboarding calls-to-action in English first&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Iterating on onboarding calls-to-action in English first&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-sprint-2-tip-kit.jpg&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;I even found a use for the Tip Kit framework new in iOS 17&quot; title=&quot;I even found a use for the Tip Kit framework new in iOS 17&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;I even found a use for the Tip Kit framework new in iOS 17&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last 1% (that takes 99% of the time) was copywriting for the App Store listing, designing the icon, and submitting.&lt;/p&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;

&lt;p&gt;The app is built all-in with &lt;a href=&quot;https://github.com/pointfreeco/swift-composable-architecture&quot;&gt;The Composable Architecture (TCA) 1.11&lt;/a&gt;. This includes passing and scoping &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Store&lt;/code&gt;s through the view layer, creating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reducer&lt;/code&gt;s with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Action&lt;/code&gt;s for most screens, and creating dependencies in the style of the &lt;a href=&quot;https://github.com/pointfreeco/swift-dependencies&quot;&gt;swift-dependencies&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;This follows on from &lt;a href=&quot;/2023/10/31/count-biki-developing-the-app-for-ios/&quot;&gt;my experience&lt;/a&gt; building my previous app Count Biki. TCA underwent significant changes between the time I finished Count Biki and started working on Eki Bright.&lt;/p&gt;

&lt;p&gt;The most significant (and welcome) change was the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Shared&lt;/code&gt; state-sharing system. It made my iterations on the bookmark system relatively trivial. Just a lot less boilerplate than I’d previously needed. Also, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Shared&lt;/code&gt; worked without a hitch in the widget extension.&lt;/p&gt;

&lt;p&gt;Overall, I’m getting a lot more comfortable with TCA and feel pretty confident using it as my default architecture on indie apps going forward.&lt;/p&gt;

&lt;h2 id=&quot;data&quot;&gt;Data&lt;/h2&gt;

&lt;h3 id=&quot;importing-and-storage&quot;&gt;Importing and storage&lt;/h3&gt;

&lt;p&gt;I used the responsible (read: no premature optimization) strategy of starting my prototyping by live parsing the json files directly from my data provider. From this experience, I decided to implement a more robust and flexible data storage system before a first release.&lt;/p&gt;

&lt;p&gt;As mentioned in my &lt;a href=&quot;/2024/07/27/eki-bright-tokyo-area-train-timetables/&quot;&gt;intro post&lt;/a&gt;, the overarching theme of this app is speed. Searching a directory structure for the appropriate timetable file, loading multiple megabyte json files into memory, parsing them, and aggregating the results on each request did not align with my speed goals. Especially considering the various views of that data I wanted to support.&lt;/p&gt;

&lt;p&gt;Of the many many data storage and access systems available, I chose &lt;a href=&quot;https://github.com/groue/GRDB.swift&quot;&gt;GRDB&lt;/a&gt;, a long-lived wrapper library for SQLite. Even though my requirements are of relatively minimal scale, I still can’t get get onboard with a nascent solution like Swift Data that has obvious brick-wall functionality limitations and no public roadmap as to when they will be addressed. GRDB, on the other hand, lightly abstracts SQLite, has been in heavy usage by the community for years, has robust documentation, has an extensive set of quick start code snippets, and a well respected and responsive maintainer.&lt;/p&gt;

&lt;p&gt;A reasonable solution in our networked world would have been to host the data on my own server and perform a network request for each timetable, etc. I could have added caching layers to improve response times in the common case.&lt;/p&gt;

&lt;p&gt;However, using the network goes against my speed goal. Although network coverage is admirably solid underground in Tokyo, there’s enough chance of drop outs that I wouldn’t want my users to lose trust in the app in those few cases there’s no signal for a duration of their request. All things equal, with implementation simplicity comes robustness. And a local database removes many breakable layers of abstraction from the request/response chain.&lt;/p&gt;

&lt;p&gt;The tradeoff is app storage space. The database started at around 300 MB, then 400 MB, then ballooned to over 1 GB (related to app extension issues), before I could optimize it pre-release back down to ~225 MB. Still quite large for such a simple app, but again, it’s both a trade-off I committed to up front and differentiation point.&lt;/p&gt;

&lt;p&gt;One of the best decisions I made was to invest in creating a simple and well-documented Swift script dedicated to reading JSON files and spitting out a single SQLite database. I ended up running this script dozens of times. A full import now takes about 10 minutes of wall-clock time, but in the early stages of development took less than a minute.&lt;/p&gt;

&lt;p&gt;The import script allowed me to make iterative decisions to my schema, normalization strategy, naming, data supplements unique to my app, etc. during development. I’d simply switch targets, run the script, and replace the database file in the app directory.&lt;/p&gt;

&lt;p&gt;Regarding the schema, I specifically decoupled the “import” model types from the “app” model types. This means that I can make the normalization/de-normalization decisions that affect query times &lt;em&gt;before&lt;/em&gt; compile time.&lt;/p&gt;

&lt;p&gt;For example, for search, I added a “queryTerms” field that aggregates all language variations of a station name e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aomi aoumi あおうみ 青海 アオウミ&lt;/code&gt;. I can create this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;queryTerms&lt;/code&gt; field at import time so no CPU time is dedicated to it at run time.&lt;/p&gt;

&lt;p&gt;The import step also enables me to do data consistency and invariant checks. These are especially important as my provider’s data is expected to evolve over time, and relations between JSON data can get silently corrupted.&lt;/p&gt;

&lt;h3 id=&quot;modeling-dates&quot;&gt;Modeling dates&lt;/h3&gt;

&lt;p&gt;A couple invariants about dates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The data provider uses 24-hour time, within the range 00:00-23:59, specified as strings.&lt;/li&gt;
  &lt;li&gt;There are no 24-hour trains in the Tokyo train network at the moment.&lt;/li&gt;
  &lt;li&gt;Timetable schedules are specified conceptually as either &lt;em&gt;weekday&lt;/em&gt;, &lt;em&gt;saturday&lt;/em&gt;, &lt;em&gt;sunday/holiday&lt;/em&gt;, or &lt;em&gt;weekend&lt;/em&gt; depending on the railway.&lt;/li&gt;
  &lt;li&gt;No trains on any railway start before 3am.&lt;/li&gt;
  &lt;li&gt;No trains on any railway end after 3am.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I had two structs for dealing with these invariants.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HourMinute&lt;/code&gt; stores times at the most useful precision. It stores times as &lt;em&gt;24+ hour time&lt;/em&gt;, which considers early morning the next day as part of the current day. It allows easy comparison and adjustment. It ensures there are no out of bounds times.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HourMinute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Comparable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sendable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3...26&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0...59&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;earliest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uncheckedHours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;latest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uncheckedHours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uncheckedHours&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;earliest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;earliest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;assertionFailure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Out of bounds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When the user selects a station/direction pair, there are either 2 or 3 different timetables that we could show depending on the current time.&lt;/p&gt;

&lt;p&gt;For example, on a honest Saturday, a particular railway may not have specific &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;saturday&lt;/code&gt; schedule, but instead may have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nonWeekday&lt;/code&gt; schedule also valid on Sundays or holidays.&lt;/p&gt;

&lt;p&gt;In order to determine which one to show, I use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScheduleSelector&lt;/code&gt; helper to map the current logical schedule (weekday, Saturday, Sunday, or Holiday) to the potential &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Schedule&lt;/code&gt; that has a timetable.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ScheduleSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sendable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weekday&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saturday&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sunday&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;holiday&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;/// For a named day, which schedules are valid?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;possibleSchedules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;weekday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weekday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;saturday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saturday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonWeekday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sunday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;holiday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonWeekday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;holiday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;holiday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonWeekday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If the user checks the app after midnight, I need to make sure the app still fetches the schedule from the previous calendar day.&lt;/p&gt;

&lt;p&gt;There’s some annoying date math involved. But since all schedules are locked to one timezone, the implementation is less complicated than it would be otherwise.&lt;/p&gt;

&lt;h3 id=&quot;train-categories&quot;&gt;Train Categories&lt;/h3&gt;

&lt;p&gt;A &lt;em&gt;train type&lt;/em&gt; is a specific name expressing which stations on a railway a train will stop. For example, “local” or “express” in English and “各駅” or “急行” in Japanese.&lt;/p&gt;

&lt;p&gt;The names for train types follow conventions, but they are by no means standardized. For example, the Toyoko line has several train types, with a few only present on weekends:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Local&lt;/li&gt;
  &lt;li&gt;Express&lt;/li&gt;
  &lt;li&gt;Limited Express&lt;/li&gt;
  &lt;li&gt;Commuter Limited Express&lt;/li&gt;
  &lt;li&gt;Semi Express&lt;/li&gt;
  &lt;li&gt;F-Liner&lt;/li&gt;
  &lt;li&gt;S-TRAIN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A train type with the same name on a different railway may have a different color indicator. This color may not even be consistent across information sources for the same railway.&lt;/p&gt;

&lt;p&gt;The outlier train type names can be long, even in Japanese. When I was designing the more space-constrained widgets, I realized it would be necessary to standardize train types even further for the sake of my app users.&lt;/p&gt;

&lt;p&gt;I manually created my own system of &lt;em&gt;train categories&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TrainCategoryKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sendable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rapid&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semiExpress&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;express&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limited&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;colorHexString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oneCharacterJA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;各&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rapid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;快&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;semiExpress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;準&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;急&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;limited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;特&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-widget-category-character.jpg&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;The information-dense Accessory Regular widget size necessitates a single-character identifier for a train type&quot; title=&quot;The information-dense Accessory Regular widget size necessitates a single-character identifier for a train type&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The information-dense Accessory Regular widget size necessitates a single-character identifier for a train type&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-widget-category-color.jpg&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;In larger widget sizes where color is supported, color is a useful indicator&quot; title=&quot;In larger widget sizes where color is supported, color is a useful indicator&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;In larger widget sizes where color is supported, color is a useful indicator&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My design philosophy for the app is &lt;em&gt;speed&lt;/em&gt;, and I also assume long-term usage from users who are familiar with a railway (at least enough that they’d need a widget for it). Therefore, I think its reasonable for users to learn a shorthand to distinguish between a “Local” and an “SL-Taiju” train type.&lt;/p&gt;

&lt;p&gt;Of course, tapping on a widget takes you directly to the full station timetable in the app where the full Christian-name of the train type is shown, in case there was any confusion.&lt;/p&gt;

&lt;p&gt;In early betas, I had even fewer categories, but thanks to some helpful feedback (thanks, Dave), I realized there was not enough differentiation for some railways in having only 3 categories.&lt;/p&gt;

&lt;h3 id=&quot;fetching&quot;&gt;Fetching&lt;/h3&gt;

&lt;p&gt;The interface to my database is pretty straightforward.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@DependencyClient&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppDatabaseClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fetchStation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@Sendable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stationID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Station&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ync&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Station&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fetchStationTimetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@Sendable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stationID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Station&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;railDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RailDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scheduleSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ScheduleSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ync&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;StationTimetableResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fetchTrainTimetables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@Sendable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;trainTimetableID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TrainTimetable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ync&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TrainTimetableResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fetchStationBookmarks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@Sendable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stationBookmarks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;StationBookmark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ync&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;StationDirectionDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@Sendable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ync&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;StationSearchResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fetchNearbyStations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@Sendable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;coordinate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLLocationCoordinate2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ync&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NearbyStationResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Perhaps surprisingly based on my commitment to speed as written thus far, I did not spend much time optimizing my database queries.&lt;/p&gt;

&lt;p&gt;My goal was to get the query working correctly with the most obvious code. Based on testing, this was usually perceivably instantaneous from the user perspective, and therefore needed no more optimization. As of v1.0, essentially all database joins are done manually in Swift.&lt;/p&gt;

&lt;p&gt;When I implement more complex screens with several disparate tables worth of data, I’ll probably need to revisit this! But until then, I feel like I’ve met my speed goals.&lt;/p&gt;

&lt;h3 id=&quot;train-timetables-recursion&quot;&gt;Train timetables recursion&lt;/h3&gt;

&lt;p&gt;A unique part of the Tokyo rail network is that railways across different companies share trains.&lt;/p&gt;

&lt;p&gt;For example, a train that starts at the end of the Minatomirai line transforms into a train on the Toyoko line train at Yokohama station, which then becomes a train on the Fukutoshin line at Shibuya station (which can actually transfer again).&lt;/p&gt;

&lt;p&gt;Note that each of these railways is owned by a different company (Yokohama Minatomirai Railway Company, Tokyu Corportation, and Tokyo Metro Co. Ltd., respectively). I don’t quite understand the politics of how this arrangement works for the railway companies, but for riders it’s incredibly convenient.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-train-timetable-multiple-railways.gif&quot; width=&quot;&quot; height=&quot;550&quot; alt=&quot;A train starting in Motomachi, Yokohama and ending in Hanno, Saitama transfers seamlessly through 5 different railways&quot; title=&quot;A train starting in Motomachi, Yokohama and ending in Hanno, Saitama transfers seamlessly through 5 different railways&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A train starting in Motomachi, Yokohama and ending in Hanno, Saitama transfers seamlessly through 5 different railways&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the dataset, a train timetable item has an optional forward and reverse link to another train timetable item. In this way, I can recursively fetch train timetables before and after the one relevant to the user’s selected station.&lt;/p&gt;

&lt;p&gt;While testing my first implementation of this, I navigated to a Yamanote train timetable and realized that, since it’s a loop line, the same trains go from early morning to late evening.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-train-timetable-yamanote.gif&quot; width=&quot;&quot; height=&quot;550&quot; alt=&quot;A train on the Yamanote line circles all day&quot; title=&quot;A train on the Yamanote line circles all day&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A train on the Yamanote line circles all day&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;nearby-stations&quot;&gt;Nearby stations&lt;/h2&gt;

&lt;p&gt;I modeled the infrastructure for the nearby stations feature as a composition of 3 clients:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DeviceLocationClient&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppDatabaseClient&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NearbyStationsClient&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NearbyStationsClient&lt;/code&gt; transforms location events from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DeviceLocationClient&lt;/code&gt; into a list of stations fetched by coordinates from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppDatabaseClient&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;devicelocationclient&quot;&gt;DeviceLocationClient&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DeviceLocationClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;locationEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AsyncStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;LocationEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LocationEvent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paused&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unavailable&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Under-the-hood, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DeviceLocationClient&lt;/code&gt; uses the iOS 17 &lt;a href=&quot;https://developer.apple.com/documentation/corelocation/cllocationupdate/4211321-liveupdates&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate.liveUpdates&lt;/code&gt;&lt;/a&gt; API from the CoreLocation framework. I decided to investigate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; instead of the long-standing (but clunky) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationManager&lt;/code&gt; API.&lt;/p&gt;

&lt;p&gt;Unfortunately, the first implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt; in iOS 17 is not fully baked. iOS 18 fixed several behavioral oddities, missing APIs, and integration points.&lt;/p&gt;

&lt;p&gt;After spending significant time integrating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationUpdate&lt;/code&gt;, I ultimately decided to temporarily accept its deficiencies with the intention to update to the iOS 18 version after a few months.&lt;/p&gt;

&lt;h3 id=&quot;nearbystationsclient&quot;&gt;NearbyStationsClient&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NearbyStationsClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nearbyStations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AsyncStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NearbyStationsEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NearbyStationsEvent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paused&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NearbyStationResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unavailable&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NearbyStationsClient&lt;/code&gt; parses the stream of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LocationEvent&lt;/code&gt;s and converts them to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NearbyStationsEvent&lt;/code&gt;s by performing a search for each set of coordinates on the station database.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppDatabaseClient&lt;/code&gt;, I calculate the minimum and maximum latitude and longitude around the input coordinate (4 total floats), then use these in the SQL query filter.&lt;/p&gt;

&lt;p&gt;For each raw station result from the database, I calculate the actual distance for each, sort the results, and do one last filter in case the station isn’t a departure station.&lt;/p&gt;

&lt;h3 id=&quot;nearbystationsfeature&quot;&gt;NearbyStationsFeature&lt;/h3&gt;

&lt;p&gt;The feature layer parses the stream of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NearbyStationsEvent&lt;/code&gt;s and uses the raw &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[NearbyStationResult]&lt;/code&gt; to calculate a walk estimate in minutes for each result since a distance in meters is not always easy to intuit at a glance.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NearbyStationsFeature&lt;/code&gt; powers both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt; section on the home screen and the dedicated nearby stations screen.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v1-nearby-stations-screen.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;The nearby stations dedicated screen&quot; title=&quot;The nearby stations dedicated screen&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The nearby stations dedicated screen&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;widgets&quot;&gt;Widgets&lt;/h2&gt;

&lt;p&gt;This project was my first time implementing widgets. The API and its gradual integration with AppIntents over the years made it tougher than I expected as I ventured beyond its trivial configurations.&lt;/p&gt;

&lt;p&gt;There’s only one type of widget in Eki Bright so far: station timetable widgets. I support a few families: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemMedium&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemSmall&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessoryRegular&lt;/code&gt;. I don’t support the Apple Watch in v1.0.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-widget-category-color.jpg&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;Two `systemSmall`-family widgets side-by-side under the `systemMedium`-family stock Weather app widget&quot; title=&quot;Two `systemSmall`-family widgets side-by-side under the `systemMedium`-family stock Weather app widget&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Two `systemSmall`-family widgets side-by-side under the `systemMedium`-family stock Weather app widget&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aside: I keep relearning the lesson that it’s useful to keep up to date with all the new frameworks at WWDC each year even if you don’t plan to use them right away. Because often the Apple engineers explain and document updates with the assumption that you already understand that SiriKit was deprecated in favor of Intents which was deprecated in favor of App Intents.&lt;/p&gt;

&lt;h3 id=&quot;timeline-provider-implementation&quot;&gt;Timeline provider implementation&lt;/h3&gt;

&lt;p&gt;Implementing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TimelineProvider&lt;/code&gt; for a widget requires 3 functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;placeholder&lt;/code&gt; - for showing the form of the widget instantaneously.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;snapshot&lt;/code&gt; - for showing an accurate form of the widget quickly with real data.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timeline&lt;/code&gt; - for showing many accurate states of the widget over time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;snapshot&lt;/code&gt; is similar to getting the data for the corresponding station timetable screen in the app.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Get the entire timetable for the station, direction, and schedule&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;timetable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetchStationTimetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stationID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectedStation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;station&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;railDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectedStation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scheduleSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Filter the timetable to ~9 entries&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;filteredTimetable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;filtered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;timetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Return success&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;timetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filteredTimetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timeline&lt;/code&gt; is more involved.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Same as `snapshot` above&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fullTimetable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetchStationTimetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stationID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectedStation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;station&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;railDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectedStation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scheduleSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nowTimetable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;filtered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;timetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullTimetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nowEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TimetableTimelineEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;timetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nowTimetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Determine when the timeline should reload&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reloadDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nextDay3am&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;calendar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isoTokyoCalendar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create an array of future dates that correspond with the minute _after_ a train leaves&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;allFutureDates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullTimetable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timetableItems&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compactMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;departureTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;advancedOneMinute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a filtered timetable based on each of those dates&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;allFutureTimetables&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allFutureDates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;filtered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;timetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullTimetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a TimelineEntry for each and return&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;allFutureEntries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allFutureDates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allFutureTimetables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TimetableTimelineEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;timetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;allEntries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nowEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allFutureEntries&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Timeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;policy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reloadDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Additionally, I check a few error-ish conditions before calculating the snapshot or timeline:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The database has been loaded correctly.&lt;/li&gt;
  &lt;li&gt;The user has at least one bookmark in the main app (otherwise I can guide them to do that first).&lt;/li&gt;
  &lt;li&gt;The user has selected a station from the edit widget menu (otherwise I can guide them to do that first).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sharing-data-with-the-main-app&quot;&gt;Sharing data with the main app&lt;/h3&gt;

&lt;p&gt;Because a widget is an app extension, it requires extra steps to share data.&lt;/p&gt;

&lt;h4 id=&quot;user-settings-in-the-file-system&quot;&gt;User settings in the file system&lt;/h4&gt;

&lt;p&gt;My user settings was stored as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codable&lt;/code&gt;-generated json file in the file system within the app’s sandbox. I wanted to share the list of station bookmarks from that model with the widget extension.&lt;/p&gt;

&lt;p&gt;I followed the procedure to enable App Groups for the App ID in the developer portal, registered the group ID in the app target, registered the group ID to the widget target, then changed the location of my user settings file.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;FileManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;containerURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forSecurityApplicationGroupIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;group.com.twocentstudios.train-timetable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appendingPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user-settings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;conformingTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With that change, I could access the user settings struct from the AppIntent the same way I did in the main app.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StationBookmarkEntityQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EntityQuery&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;allBookmarks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IdentifiedArrayOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;StationBookmark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;@SharedReader(.userSettings)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;userSettings&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;allBookmarks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userSettings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stationBookmarks&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;database-as-a-file-from-the-bundle&quot;&gt;Database as a file from the bundle&lt;/h4&gt;

&lt;p&gt;Sharing the database was more difficult to solve. But that goes back to the unique database use case I have.&lt;/p&gt;

&lt;p&gt;I’m using an SQLite database generated at development-time by my aforementioned Swift script. The database is read-only, bundled within the app, and is versioned alongside the app itself. This is perhaps a less-than-usual use case for an SQLite database according to the documentation around the internet.&lt;/p&gt;

&lt;p&gt;I decided to see how far I could get with opening the database directly from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bundle&lt;/code&gt;. It’s worked fine this way so far for my use case.&lt;/p&gt;

&lt;p&gt;For simplicity, the widget reuses the same database access code as the main app. It therefore requires access to the database file.&lt;/p&gt;

&lt;p&gt;During most of development, I gave the widget extension a copy of the database for its own bundle. I wasn’t completely aware of the implications of this at first, only that it seemed to work. Unfortunately, it does make a full copy of the database file, and results in 2 full identical copies of the database shipped with the app. The size of my database makes this quite large.&lt;/p&gt;

&lt;p&gt;It took some research, but I found an &lt;a href=&quot;https://stackoverflow.com/a/27849695&quot;&gt;admittedly brittle way&lt;/a&gt; to access the app’s bundle from the main bundle by hacking around on the bundle URL. This means I only have to include the database in the main target.&lt;/p&gt;

&lt;p&gt;I’m not confident in this solution, but I still prefer it over superfluously taking ~300 MB of every user’s precious device storage.&lt;/p&gt;

&lt;h3 id=&quot;previews&quot;&gt;Previews&lt;/h3&gt;

&lt;p&gt;Previews worked great while I was designing and implementing the prototype.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v1-static-widget-previews.jpg&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;SwiftUI previews showing widget context variants for a static timeline entry&quot; title=&quot;SwiftUI previews showing widget context variants for a static timeline entry&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;SwiftUI previews showing widget context variants for a static timeline entry&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, as soon as I needed to upgrade to a AppIntent-powered timeline provider, the available &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#Preview&lt;/code&gt; macro no longer compiles.&lt;/p&gt;

&lt;p&gt;The below &lt;a href=&quot;https://developer.apple.com/documentation/widgetkit/preview(_:as:using:widget:timelineprovider:)-4ljg1&quot;&gt;two overloaded macros&lt;/a&gt; do not compile under any circumstance for me.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Error: Macro &apos;Preview(_:as:using:widget:timelineProvider:)&apos; requires that &apos;TestIntentTimelineProvider&apos; conform to &apos;AppIntentTimelineProvider&apos;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#Preview(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;systemMedium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TestIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TestWidget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;timelineProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TestIntentTimelineProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Error: Macro &apos;Preview(_:as:using:widget:timelineProvider:)&apos; requires that &apos;TestAppIntentTimelineProvider&apos; conform to &apos;IntentTimelineProvider&apos;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#Preview(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;systemMedium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TestWidgetConfigurationIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TestWidget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;timelineProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TestAppIntentTimelineProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;My minimal reproduction case is &lt;a href=&quot;https://gist.github.com/twocentstudios/c4fc39c5a16115b0aa1a230f69281daa&quot;&gt;in this gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I had to switch back to single TimelineEntry previews.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#Preview(&quot;Default&quot;, as: .accessoryRectangular, widget: {&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;StationBookmarkWidget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;timeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;TimetableTimelineEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;refreshing&quot;&gt;Refreshing&lt;/h3&gt;

&lt;p&gt;Apple has several frameworks that operate fundamentally based on vaguely documented heuristics, often partially related to the unique way each user uses their device.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BackgroundTasks&lt;/code&gt; is a good example, although it’s perhaps changed in a few years since I trialed it. It took me weeks of daily usage testing to get a feel for relevant metrics like how often a task was run by the system, how long it was run on average, how much work my task completed during that time, and what other system frameworks were available during my app’s allocated period.&lt;/p&gt;

&lt;p&gt;I’ve found widgets to be similar to that experience.&lt;/p&gt;

&lt;p&gt;My home screen and today screen widgets (of small and medium family) refresh as expected.&lt;/p&gt;

&lt;p&gt;However, since its initial implementation, my accessory medium family lock screen widget behaves unpredictably, but always incorrectly.&lt;/p&gt;

&lt;p&gt;With the same timeline provider implementation as the other widget types, the lock screen widget does not refresh at 3am. In fact, it usually does not load the day’s station schedule until somewhere between 11am-2pm.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-lock-widget-no-more-trains.jpg&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;The lock screen widget showing the &apos;no more trains&apos; message. It should have loaded a fresh timeline at 3am.&quot; title=&quot;The lock screen widget showing the &apos;no more trains&apos; message. It should have loaded a fresh timeline at 3am.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The lock screen widget showing the &apos;no more trains&apos; message. It should have loaded a fresh timeline at 3am.&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-lock-widget-placeholder.jpg&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;The lock screen widget showing the placeholder configuration&quot; title=&quot;The lock screen widget showing the placeholder configuration&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The lock screen widget showing the placeholder configuration&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To be fair, there is some &lt;a href=&quot;https://developer.apple.com/documentation/widgetkit/keeping-a-widget-up-to-date&quot;&gt;official documentation&lt;/a&gt; about widget refreshing, but it leaves out enough to keep me guessing as to what the underlying problem actually is.&lt;/p&gt;

&lt;p&gt;My current theory is that my widget has too many timeline entries per day.&lt;/p&gt;

&lt;p&gt;In the same vein as my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BackgroundTasks&lt;/code&gt; framework drama above, it’s painfully slow to debug this issue because I can test only one potential fix per day &lt;em&gt;at most&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;My theory of too many timeline entries is based on a few lines from the docs:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A widget’s budget applies to a 24-hour period. WidgetKit tunes the 24-hour window to the user’s daily usage pattern, which means the daily budget doesn’t necessarily reset at exactly midnight.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OK, the fact that the reload doesn’t happen until mid-day is consistent with the above.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For a widget the user frequently views, a daily budget typically includes from 40 to 70 refreshes. This rate roughly translates to widget reloads every 15 to 60 minutes, but it’s common for these intervals to vary due to the many factors involved.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m assuming the loaded term “refresh” refers to the system taking an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entry&lt;/code&gt; struct and loading it into the widget’s UI at the requested schedule and &lt;em&gt;not&lt;/em&gt; the timeline provider getting a request from the system to fetch an entire fresh timeline.&lt;/p&gt;

&lt;p&gt;If that’s true, then my widget’s timeline definitely has more than 70 entries. In fact, many railway’s stations see over 250 trains per day, and thus will have that many timeline entries &lt;strong&gt;if I always want to show the user the next 6 trains&lt;/strong&gt; and no departed trains.&lt;/p&gt;

&lt;p&gt;I tested this theory by creating a build that limited the timeline to ~60 entries, basically updating every ~6 train departures. This schedule certainly treads the line between useful and not. In a few days of testing it seemed like this change resulted in the timeline reloading properly at 3am.&lt;/p&gt;

&lt;p&gt;With that knowledge, the rest of the docs make even less sense to me:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If your widget can predict points in time that it should reload, the best approach is to generate a timeline for as many future dates as possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In isolation, this makes sense and is what I’m trying to do. In theory, I could generate an indefinite timeline since the station timetables are fixed.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Keep the interval of entries in the timeline as large as possible for the content you display.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For me, “as large as possible” is once every train departure, which can be every minute at minimum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;WidgetKit imposes a minimum amount of time before it reloads a widget.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OK, fine, understandable. Hopefully it’s doing this somewhat intelligently based on user behavior though?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your timeline provider should create timeline entries that are at least about 5 minutes apart.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why though? Why can’t the system impose this limit dynamically, again, based on user behavior or whatever other factors it has?&lt;/p&gt;

&lt;p&gt;Regardless of the docs, I’m still confused as to why this failure case appears as it does:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why am I not seeing the timeline stop updating on a random time entry instead of the “no more trains” empty state or placeholder state?&lt;/li&gt;
  &lt;li&gt;Why am I not seeing any issue with the other widget types?&lt;/li&gt;
  &lt;li&gt;Why does WidgetKit not have at least a debug accessible error for reporting “too many timeline entries”? This could even be thrown when returning the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Timeline&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A few more hypotheses I have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I’m generally more active in the evening than the morning. Perhaps the hidden device heuristics are causing the system to expend my widget’s refresh budget during the time range I have the most device pickups.&lt;/li&gt;
  &lt;li&gt;The always-on screen feature is causes the system to be too overzealous about updating the widget. According to Screen Time, I generally have about 60-80 device pickups per day. I don’t think that counts times I wake my phone (e.g. to check notifications) but don’t unlock it. If the widget loads a new entry for each pickup and pre-pickup, plus whatever other triggers it has, that would exceed the budget.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A beta tester also confirmed the widget’s errant lock screen behavior on an iPhone SE, which makes me even less sure about the causal factors I’ve hypothesized.&lt;/p&gt;

&lt;p&gt;As you can probably tell, this bug has been a thorn in my side for months. I considered removing the lock screen widget from v1.0, but I figured it’d get better data for debugging, and users would still see the timetable for most of the day. The failure also doesn’t prevent users tapping through the widget to quickly see the timetable in the app.&lt;/p&gt;

&lt;h2 id=&quot;app-navigation&quot;&gt;App navigation&lt;/h2&gt;

&lt;p&gt;The navigation story for Eki Bright is straightforward since there are so few screens.&lt;/p&gt;

&lt;p&gt;There’s one navigation stack that handles all screens except the about screen, which is presented modally.&lt;/p&gt;

&lt;p&gt;The behavior of the search feature is standard iOS, but still a bit weird in my opinion.&lt;/p&gt;

&lt;p&gt;I’m still planning to keep the navigation structure as simple as possible as the app’s features continue to evolve for the sake of speed. However, I’d like to provide more dedicated resource screens (e.g. a railway screen, a station detail screen), and more links between those screens.&lt;/p&gt;

&lt;h3 id=&quot;navigation-in-tca&quot;&gt;Navigation in TCA&lt;/h3&gt;

&lt;p&gt;The improvements to navigation in TCA are welcome. There are two ways to handle stack-based navigation in TCA: manipulating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StackState&lt;/code&gt; programmatically and/or using the SwiftUI &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationLink&lt;/code&gt; view.&lt;/p&gt;

&lt;p&gt;I chose the former, and am intercepting all navigation-related reducer actions at the root level and manipulating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StackState&lt;/code&gt;. (However, dismissals are handled with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dismiss&lt;/code&gt; dependency.)&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Reduce&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stationDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;railDirectionButtonTapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;railDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stationDetailState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stationDetail&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stationDirections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;station&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stationDetailState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;station&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;initialRailDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;railDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nearbyStations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;searchResultTapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nearbyStation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stationDirections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;station&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nearbyStation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;station&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stationDirections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;timetableLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trainTapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trainTimetableID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stationID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trainTimetable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;trainTimetableID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trainTimetableID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stationOfInterest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stationID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I consider this strategy to be somewhat brittle, but up to now it’s provided flexibility. The feature hierarchy is not so complicated yet as to be unwieldy.&lt;/p&gt;

&lt;h2 id=&quot;design&quot;&gt;Design&lt;/h2&gt;

&lt;p&gt;Depending on the app and feature, I occasionally do design work upfront in a pencil sketch and/or a Figma page. I also feel comfortable iterating quickly on design in a SwiftUI preview.&lt;/p&gt;

&lt;p&gt;Eki Bright evolved gradually from a prototype. And at first, I was mostly focused on the appearance of each widget family.&lt;/p&gt;

&lt;p&gt;I also planned to, and still plan to, commission a professional designer to make a full pass at least the visual design language of the app if not the UX and branding as well.&lt;/p&gt;

&lt;p&gt;However, for v1.0 I decided to play it safe with a utilitarian design focused on, you guessed it, speed. And closely related to speed, visual clarity.&lt;/p&gt;

&lt;h3 id=&quot;utilitarian-design&quot;&gt;Utilitarian design&lt;/h3&gt;

&lt;p&gt;The standard iOS design language is relatively utilitarian, so it’s not &lt;em&gt;too&lt;/em&gt; difficult to play within that sandbox if you don’t have strong opinions about visual design.&lt;/p&gt;

&lt;p&gt;There are a lot of benefits that fall out of the decision to stick to standard UI framework components and HIG guidelines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dark mode requires little additional work.&lt;/li&gt;
  &lt;li&gt;Dynamic type requires thought and testing, but comparatively less work.&lt;/li&gt;
  &lt;li&gt;App-wide constants like screen margins don’t need to be maintained.&lt;/li&gt;
  &lt;li&gt;There’s no additional costs for font licensing.&lt;/li&gt;
  &lt;li&gt;Programmatic component configuration is quick.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This extends to e.g. using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt; vs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LazyVStack&lt;/code&gt; (a decision that’s more loaded than just visual aesthetics). &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt; has out-of-the-box support for item moving, deleting, edit mode, sticky headers/footers, dividers, etc. Although I just as often found myself fighting system defaults when my particular layout requirements fell apart. There’s no free lunch in (iOS) dev.&lt;/p&gt;

&lt;h3 id=&quot;color&quot;&gt;Color&lt;/h3&gt;

&lt;p&gt;I defer my use of color to the railway colors from my data provider and the 5 train category colors I chose. From my experience as a user, these colors are incredibly important in quickly choosing a station from my bookmarks or an entry from the timetable.&lt;/p&gt;

&lt;p&gt;When choosing the app’s accent color (a &lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/color#App-accent-colors&quot;&gt;HIG staple&lt;/a&gt;), I intentionally picked a purple-ish color because there are few railways that use purple branding.&lt;/p&gt;

&lt;p&gt;I do my best to create visual hierarchy with SwiftUI’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;primary&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secondary&lt;/code&gt; foreground colors combined with font sizes and bolding. It’s a tough balance, and it took constant effort iterating, but I feel pretty good about where v1.0 ended up.&lt;/p&gt;

&lt;h3 id=&quot;animations&quot;&gt;Animations&lt;/h3&gt;

&lt;p&gt;My use of animations is relatively light. The nearby list reconfigures often while moving, and these items rearrange themselves with animation. The station timetable screen scrolls naturally when the time updates. Besides that, I follow that same utilitarian mindset mentioned above.&lt;/p&gt;

&lt;h3 id=&quot;rail-direction&quot;&gt;Rail direction&lt;/h3&gt;

&lt;p&gt;The toughest UX decisions I’ve encountered so far (and which the jury’s still out on) are related to rail directions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How to display the rail direction name to users.&lt;/li&gt;
  &lt;li&gt;Where to put the rail direction segmented control on the station timetable screen.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v1-station-timetable-direction.jpg&quot; width=&quot;&quot; height=&quot;550&quot; alt=&quot;The rail direction segmented control in the toolbar (bottom), and rail direction indicator (top)&quot; title=&quot;The rail direction segmented control in the toolbar (bottom), and rail direction indicator (top)&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The rail direction segmented control in the toolbar (bottom), and rail direction indicator (top)&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Most official rail direction names are in the dataset as 上り (inbound), 下り (outbound), 北へ (northbound), etc. However, these official names are either absent or de-emphasized in signage around stations.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-yamanote-station-signage.jpg&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;Rare signage at JR Ebisu station showing inner-loop (内回り) and outer-loop (外回り) rail directions of the Yamanote line&quot; title=&quot;Rare signage at JR Ebisu station showing inner-loop (内回り) and outer-loop (外回り) rail directions of the Yamanote line&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Rare signage at JR Ebisu station showing inner-loop (内回り) and outer-loop (外回り) rail directions of the Yamanote line&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;how-to-display-the-rail-direction-name&quot;&gt;How to display the rail direction name&lt;/h4&gt;

&lt;p&gt;For v1.0 especially, I wanted to keep my own large-scale supplements to the official dataset as minimal as possible.&lt;/p&gt;

&lt;p&gt;My choice for displaying the rail direction was to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;(A)&lt;/strong&gt; Default to showing the official direction name (“inbound”) with the awareness that users would find it jarring at first, but eventually learn and adapt for railways they used regularly (arguably the core use-case for the app).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;(B)&lt;/strong&gt; Default to replacing the official direction name with the last station in that railway. This is a common display technique seen in station signage, although sometimes the &lt;em&gt;next&lt;/em&gt; station or the &lt;em&gt;next major&lt;/em&gt; station are used instead.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;(C)&lt;/strong&gt; Default to replacing the official direction name with my own custom choice based on first-hand research of each railway.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I chose (A), using the official direction name out of pragmatism.&lt;/p&gt;

&lt;p&gt;In user testing, this has continued to be a pain point, and will certainly be a high-priority item in the TODO list.&lt;/p&gt;

&lt;h4 id=&quot;where-to-put-the-rail-direction-segmented-control&quot;&gt;Where to put the rail direction segmented control&lt;/h4&gt;

&lt;p&gt;The (optional, depending on the station and railway) segmented control for the rail direction affects all the contents of the station timetable screen besides the station name in the navigation bar, the railway name, and the schedule.&lt;/p&gt;

&lt;p&gt;Considering hierarchy, it should either be in the navigation bar or the toolbar.&lt;/p&gt;

&lt;p&gt;The navigation bar is already full with the title, especially when used in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationBarItem.TitleDisplayMode.large&lt;/code&gt;. However, it could still be condensed into the trailing bar item.&lt;/p&gt;

&lt;p&gt;My instinct was to put the segmented control in the toolbar. This makes it easier to tap without reaching, and also filling the space and disappearing cleanly when it’s not relevant for the station. I supplemented it with a smaller label in the section header since it’s important information.&lt;/p&gt;

&lt;p&gt;However, in user testing, some users were completely blind to the segmented control in the toolbar position. If users don’t notice it, they’ll also be unaware they can swipe left and right to page between timetables for each rail direction.&lt;/p&gt;

&lt;p&gt;It is crucially important users don’t miss this control. When coming from a nearby or search result, the user will navigate to the default rail direction. If they don’t realize they need to navigate further to see the opposite direction, they may use incorrect timeline information or spend time searching the interface.&lt;/p&gt;

&lt;p&gt;Perhaps the simplest solution is to add a tooltip during onboarding to call this out. I’m generally pretty skeptical of making discovery of any critical feature reliant on users reading text.&lt;/p&gt;

&lt;p&gt;For v1.0 it was a necessary evil to ship the toolbar interface and further measure opinions.&lt;/p&gt;

&lt;p&gt;Short term, I should add a tap action to the rail direction label in the section header that transitions to the other rail direction timetable.&lt;/p&gt;

&lt;p&gt;Medium term, I’m planning on de-emphasizing the full station timetable screen and replacing it in the navigation hierarchy with a station detail screen. When designing the detail screen, I can be more careful about highlighting the rail direction distinction.&lt;/p&gt;

&lt;h3 id=&quot;yamanote-train-destination&quot;&gt;Yamanote train destination&lt;/h3&gt;

&lt;p&gt;Related to rail direction is the destination station of a particular train. In the simple case, railways always end at the same station. But sometimes a railway breaks off into other railways that end at different stations.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-train-destination-nakame.jpg&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;The Toyoko line from Nakameguro continues on to a few different stations depending on the train&quot; title=&quot;The Toyoko line from Nakameguro continues on to a few different stations depending on the train&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The Toyoko line from Nakameguro continues on to a few different stations depending on the train&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Yamanote loop line (as my constant source of edge cases) presented a user clarity issue compounded by the aforementioned “how to display the rail direction name” woes.&lt;/p&gt;

&lt;p&gt;The Yamanote line trains always start and end at Osaki station. That means every timetable for every Yamanote line station and rail direction showed Osaki as the destination.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-destination-yamanote-before.jpg&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;Both inner-loop and outer-loop trains show a destination of Osaki 大崎&quot; title=&quot;Both inner-loop and outer-loop trains show a destination of Osaki 大崎&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Both inner-loop and outer-loop trains show a destination of Osaki 大崎&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my use I found train destination is a good backup when rail direction was unclear. Without this affordance, the mental gymnastics I needed to do to understand inner-loop and outer-loop directions was a deal-breaker for me.&lt;/p&gt;

&lt;p&gt;I decided to spend a little time manually adding “direction stations” for each station on the Yamanote line only. I consulted signage for each station and chose the next most identifiable station.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;directionStations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;StationDirectionPair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Station&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stationID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JR-East.Yamanote.Osaki&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;railDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JR-East.Yamanote.Shinagawa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stationID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JR-East.Yamanote.Gotanda&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;railDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JR-East.Yamanote.Shinagawa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stationID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JR-East.Yamanote.Meguro&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;railDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JR-East.Yamanote.Shinagawa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stationID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JR-East.Yamanote.Ebisu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;railDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JR-East.Yamanote.Shinagawa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stationID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JR-East.Yamanote.Shibuya&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;railDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JR-East.Yamanote.Shinagawa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stationID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JR-East.Yamanote.Harajuku&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;railDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JR-East.Yamanote.Shibuya&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stationID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JR-East.Yamanote.Yoyogi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;railDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JR-East.Yamanote.Shibuya&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-destination-yamanote-after.jpg&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;Yamanote train destinations (Shibuya 渋谷 and Shinagawa 品川) are now more relevant and make rail directions more differentiable at a glance&quot; title=&quot;Yamanote train destinations (Shibuya 渋谷 and Shinagawa 品川) are now more relevant and make rail directions more differentiable at a glance&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Yamanote train destinations (Shibuya 渋谷 and Shinagawa 品川) are now more relevant and make rail directions more differentiable at a glance&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I covered a lot in this post. This is a decent summary of the many problems I worked through to varying degrees of “solved” during the few months of development leading up to v1.0 of Eki Bright.&lt;/p&gt;

&lt;p&gt;As I become more confident in my solution to some of the above problems, I’ll try to write some more straightforward “How to X in Swift” posts in the future.&lt;/p&gt;

&lt;p&gt;Until then, thanks for reading.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Aug 2024 08:02:00 -0500</pubDate>
        <link>https://twocentstudios.com/2024/08/06/eki-bright-developing-the-app-for-ios/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2024/08/06/eki-bright-developing-the-app-for-ios/</guid>
        
        <category>apple</category>
        
        <category>ios</category>
        
        <category>ekibright</category>
        
        
      </item>
    
      <item>
        <title>Eki Bright - Tokyo Area Train Timetables</title>
        <description>&lt;p&gt;My latest app is called Eki Bright or 駅ブライト in Japanese.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-app-icon.jpg&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;Eki Bright app icon&quot; title=&quot;Eki Bright app icon&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Eki Bright app icon&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In short, it’s an app for quickly accessing offline station timetables and train timetables for railways in the Tokyo metropolitan area including Kanagawa, Chiba, and Saitama prefectures.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v1-station-timetable.jpg&quot; width=&quot;&quot; height=&quot;650&quot; alt=&quot;The station timetable screen for Bashamichi station on the Minatomirai Line&quot; title=&quot;The station timetable screen for Bashamichi station on the Minatomirai Line&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The station timetable screen for Bashamichi station on the Minatomirai Line&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this series of posts I’ll talk about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;This post&lt;/strong&gt; - the motivation behind the app and the solution I’ve begun to explore&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/2024/08/06/eki-bright-developing-the-app-for-ios/&quot;&gt;Eki Bright- Developing the App for iOS&lt;/a&gt;&lt;/strong&gt; - the high-level implementation details&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tokyo-area residents can download the app from the &lt;a href=&quot;https://apps.apple.com/app/%E9%A7%85%E3%83%96%E3%83%A9%E3%82%A4%E3%83%88/id6504702463&quot;&gt;App Store&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Eki Bright is currently closed source due to data licensing issues, but I’d like to open source it as some point once I get that aspect figured out.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I’m a public transit (specifically train) fan. And Tokyo is easily one of the best cities in the world to get around by train.&lt;/p&gt;

&lt;p&gt;Due to the large market, there are already plenty of full featured transit apps – &lt;a href=&quot;https://maps.google.com/&quot;&gt;Google Maps&lt;/a&gt;, &lt;a href=&quot;https://www.apple.com/maps/&quot;&gt;Apple Maps&lt;/a&gt;, &lt;a href=&quot;https://www.navitime.co.jp/&quot;&gt;Navitime&lt;/a&gt;, &lt;a href=&quot;https://www.jorudan.co.jp/&quot;&gt;Jorudan&lt;/a&gt;, etc. And I’m a heavy user of all of them, especially Google Maps.&lt;/p&gt;

&lt;p&gt;However, after many years of use, I started to find some pain points.&lt;/p&gt;

&lt;p&gt;I got to know my daily trips well enough that I no longer needed to know all of the below information for each trip:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Which station I needed to walk to&lt;/li&gt;
  &lt;li&gt;How long it would take to walk to the station&lt;/li&gt;
  &lt;li&gt;Which railway I needed to use&lt;/li&gt;
  &lt;li&gt;Which platform I needed to wait at&lt;/li&gt;
  &lt;li&gt;Which train type I needed to get on&lt;/li&gt;
  &lt;li&gt;When the target train type would depart&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’d memorized 1-5, and only needed the departure times in order to optimize my trip.&lt;/p&gt;

&lt;p&gt;All of the other information requires opening Google Maps, waiting for it to load, entering a destination, occasionally entering an origin, waiting for the route data to load, scrolling, choosing the top result, scrolling.&lt;/p&gt;

&lt;p&gt;Then there were the times that I’d want to check departure times assuming I’d leave in half an hour. In that case I’d also have to manually enter a departure time or manually change the train in the helpful selection dropdown on the route page (surprisingly, a feature still not available on the web app).&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-gmaps-other-departures.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Adjusting the exact train within a chosen route is an essential step in using Google Maps&apos; routing&quot; title=&quot;Adjusting the exact train within a chosen route is an essential step in using Google Maps&apos; routing&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Adjusting the exact train within a chosen route is an essential step in using Google Maps&apos; routing&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There were also times where I knew more than Google Maps. For example, I know that on weekends, I can sometimes take a local or express train from Bashamichi station to Minatomirai station to catch a limited express train. This little maneuver can save 10-15 minutes into Shibuya. But this information is not easy to access with the Google Maps interface.&lt;/p&gt;

&lt;p&gt;Sure, for the most common situation I could head out from my apartment at whatever time was natural then wait on the platform for however long. But if I could see the next departures board at the station before I left my apartment, I could optimize my time better.&lt;/p&gt;

&lt;p&gt;Thus, the idea of Eki Bright was born.&lt;/p&gt;

&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;

&lt;p&gt;My north star for this app is, like I mentioned above, to have the same information I’d have while standing on the platform looking at the next departures board.&lt;/p&gt;

&lt;p&gt;The main principle required for that use case is simple: &lt;strong&gt;speed&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Every feature is evaluated against getting the amount of time it takes to see the departure timetable for a station optimized to near zero.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Offline data: no server roundtrip is required to fetch a station timetable, saving seconds on each tap, especially in slow network environments often expected when outside or underground. (The only reason this is even feasible is because trains in Japan are so rarely late.)&lt;/li&gt;
  &lt;li&gt;Bookmarked stations: the vast majority of trips are taken from the same stations: near home or work or a third place. Letting the user choose these and putting them on the home screen eliminates a step in getting them the information they need.&lt;/li&gt;
  &lt;li&gt;Nearby stations: for the next minority of trips, the user wants to see timetables for stations nearby their current location. This is trivial with location services (GPS).&lt;/li&gt;
  &lt;li&gt;Search: as a catch all for the remaining trips, stations can be found by text search (in romaji, hiragana, katakana, or kanji).&lt;/li&gt;
  &lt;li&gt;Widgets: for bookmarked stations, users can see timetables without even opening the app. The home screen or lock screen makes it trivial to see departure times at a glance.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v1-home.jpg&quot; width=&quot;&quot; height=&quot;650&quot; alt=&quot;Nearby and bookmarked stations on the app home screen&quot; title=&quot;Nearby and bookmarked stations on the app home screen&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Nearby and bookmarked stations on the app home screen&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v1-widgets.jpg&quot; width=&quot;&quot; height=&quot;650&quot; alt=&quot;Widgets make station timetables available at a glance&quot; title=&quot;Widgets make station timetables available at a glance&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Widgets make station timetables available at a glance&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My anti-goals – things I specifically did not want to include for fear of overcomplicating the interface and muddying the value proposition – are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Routing (i.e. inputting an origin and destination and calculating which trains to use)&lt;/li&gt;
  &lt;li&gt;Covering every city in Japan (or anywhere else in the world)&lt;/li&gt;
  &lt;li&gt;Covering other modes of public transit (e.g. buses)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Features I feel could potentially fit into the ethos of the app, but aren’t a high-priority:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Showing any information on a map&lt;/li&gt;
  &lt;li&gt;Live-updating departure times&lt;/li&gt;
  &lt;li&gt;Platform number information&lt;/li&gt;
  &lt;li&gt;Stair/elevator locations on the platform in relation to a train car&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One feature that wasn’t 100% in line with my north star but turned out to be so useful as to be prioritized for first release: train timetables. Tapping a departure time in the station timetable shows the full path of that particular train as a train timetable. This is useful for two reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Seeing your estimated arrival time at any destination on that line.&lt;/li&gt;
  &lt;li&gt;Seeing which stations that train stops at, in the case you’re not totally familiar with the local, express, etc. designations for that railway.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v1-train-timetable.jpg&quot; width=&quot;&quot; height=&quot;650&quot; alt=&quot;train timetables show which stations a particular train will stop at, and at what times&quot; title=&quot;train timetables show which stations a particular train will stop at, and at what times&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;train timetables show which stations a particular train will stop at, and at what times&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have many more ideas on how I can make this data alone even more useful to users without further complicating the app.&lt;/p&gt;

&lt;h2 id=&quot;one-example-of-ux-optimization-for-speed&quot;&gt;One example of UX optimization for speed&lt;/h2&gt;

&lt;p&gt;A conceptually-murky yet concretely defined &lt;em&gt;station&lt;/em&gt; in the app usually serves two directions unless it is a terminus.&lt;/p&gt;

&lt;p&gt;I made a decision early on for a &lt;em&gt;bookmark&lt;/em&gt; to represent the combination of a unique &lt;em&gt;station&lt;/em&gt; and a &lt;em&gt;direction&lt;/em&gt;. The reasoning being that it’s quite common for a passenger to only ride one direction from a particular station. For example, from my local station Bashamichi, I’m always going &lt;em&gt;inbound&lt;/em&gt; into Tokyo from my house and never &lt;em&gt;outbound&lt;/em&gt; back towards Motomachi.&lt;/p&gt;

&lt;p&gt;It would significantly slow me down if every time I had to select “inbound” or “outbound” each time I wanted to view the timetable for Bashamichi station.&lt;/p&gt;

&lt;p&gt;As the designer, I could put both timetables on one screen, however that would crowd the screen with useless (to me the user in my particular scenario) information.&lt;/p&gt;

&lt;p&gt;In the case where I do use both directions somewhat equally, it’s perfectly reasonable to have two bookmarks for the same station.&lt;/p&gt;

&lt;p&gt;I consider this well designed for the bookmarks use case. But for nearby stations and text search results users still need to select which direction they’re going before the app can display the correct timetable.&lt;/p&gt;

&lt;p&gt;My original design presented a station detail screen in this case. It showed no timetable data yet. The user had to select one of two (or one) direction first in order to view the timetable.&lt;/p&gt;

&lt;p&gt;This configuration almost immediately felt wrong during use. On one hand, users were less likely to make a mistake and misread the timetable for the opposite direction. On the other hand, it felt so slow having an intermediate step presented in order to see the timetable.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v1-station-detail.jpg&quot; width=&quot;&quot; height=&quot;650&quot; alt=&quot;The deprecated Station Detail screen, looking alright but adding time and cognitive overhead&quot; title=&quot;The deprecated Station Detail screen, looking alright but adding time and cognitive overhead&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The deprecated Station Detail screen, looking alright but adding time and cognitive overhead&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the first release, I made two revisions to the UX:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I removed the station detail screen. After selecting a search result, the user would now be dropped directly into the timetable for the default direction for that station.&lt;/li&gt;
  &lt;li&gt;I added a quick swipe between that station’s direction’s timetables. Now users could quickly flip between the two directions with conceptually fewer steps.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v1-station-timetable-swipe.gif&quot; width=&quot;&quot; height=&quot;650&quot; alt=&quot;Swipe between directions of a station or tap the segmented control at the bottom&quot; title=&quot;Swipe between directions of a station or tap the segmented control at the bottom&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Swipe between directions of a station or tap the segmented control at the bottom&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, optimizing for speed.&lt;/p&gt;

&lt;p&gt;I could go further and silently save which direction for any given station the user last viewed. I could also redesign the station detail screen to be more useful to all use cases, whether that be quickly viewing either timetable or just getting metadata about the station of interest. Either way, I don’t want to compromise on the speed of getting a user to the information they’re looking for.&lt;/p&gt;

&lt;h2 id=&quot;data&quot;&gt;Data&lt;/h2&gt;

&lt;p&gt;In my prototyping phase I did a dive into potential data sources, both online and offline, paid and free.&lt;/p&gt;

&lt;p&gt;In the current self-funding phase of my business, I heavily preferred not paying for data. This keeps my indefinite overhead low and means I have more flexibility in pricing in an already crowded and mature market.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://developer.odpt.org/&quot;&gt;Association for Open Data of Public Transportation&lt;/a&gt; aggregates and publishes data for transit systems across Japan. They also run a hackathon/contest for websites and apps built with their sourced data. This seemed like a reliable enough source for the data at the foundation of the app.&lt;/p&gt;

&lt;h2 id=&quot;prototyping&quot;&gt;Prototyping&lt;/h2&gt;

&lt;p&gt;I hacked together a widget that ingested the aggregated timetables for Bashamichi station (my most used station) on a weekday and showing them in a widget.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v1-widget-proto.gif&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;One of the first widgets I hacked together&quot; title=&quot;One of the first widgets I hacked together&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;One of the first widgets I hacked together&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The goal at this point was to evaluate how well this implementation solved my hypothetical pain point. I used it for a couple weeks and, yes, I did feel it was a pretty useful supplement to my go-to Google Maps. I could swipe over on my home screen on my way out the door and see whether I need to hustle out to make the next limited express or whether I could take my time.&lt;/p&gt;

&lt;h2 id=&quot;productionizing&quot;&gt;Productionizing&lt;/h2&gt;

&lt;p&gt;At this point I had to decide whether to leave this as a &lt;em&gt;scratch-my-own-itch&lt;/em&gt; project, or whether it had potential as a full featured app I could offer of the App Store and support indefinitely. This isn’t an easy decision!&lt;/p&gt;

&lt;p&gt;In the end, at my level of business knowledge and sophistication, I made this decision from a selfish perspective:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How much did I personally want to use the most ideal version of this app?&lt;/li&gt;
  &lt;li&gt;How interested were my friends in the concept?&lt;/li&gt;
  &lt;li&gt;How motivated was I to work on this concept for weeks or months? Could I get it to the finish line?&lt;/li&gt;
  &lt;li&gt;How capable was I of doing the design on my own?&lt;/li&gt;
  &lt;li&gt;How much revenue did I need from the app to make it worthwhile?&lt;/li&gt;
  &lt;li&gt;How many monetizable features could I implement while still committing to simplicity and speed?&lt;/li&gt;
  &lt;li&gt;What other ideas was I more motivated to work on instead?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;making-sense-of-the-data&quot;&gt;Making sense of the data&lt;/h2&gt;

&lt;p&gt;I was by no means an expert on the intricacies of the vast Tokyo area train network. I’ve done my fair share of rides in the 6 years I’ve lived here, but vast majority of those rides were the same trains going to the same stations, with extracurricular trips being a novelty I quickly forgot the details of.&lt;/p&gt;

&lt;p&gt;Learning not only the train system as it exists in the real world, but also as it exists modeled in my chosen dataset was a process. A couple fun concepts I had to wrap my head around:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How to model time, especially across midnight and logical day spans&lt;/li&gt;
  &lt;li&gt;How to choose a weekday, weekend, Saturday, or holiday schedule&lt;/li&gt;
  &lt;li&gt;How to internally and externally deal with train directions and destinations&lt;/li&gt;
  &lt;li&gt;How to deal with the one-off case of the one circle line (Yamanote)&lt;/li&gt;
  &lt;li&gt;How all these concepts were most naturally expressed in Japanese&lt;/li&gt;
  &lt;li&gt;How to deal with searching via multiple Japanese character sets&lt;/li&gt;
  &lt;li&gt;How to generalize train types like local, express, etc. over disparate railways&lt;/li&gt;
  &lt;li&gt;How to display colors and associate them with railway concepts&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v1-db.png&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;A peek into the SQLite database that powers Eki Bright&quot; title=&quot;A peek into the SQLite database that powers Eki Bright&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A peek into the SQLite database that powers Eki Bright&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;internationalization&quot;&gt;Internationalization&lt;/h2&gt;

&lt;p&gt;My initial thought was that it’d be reasonable support both English and Japanese localizations at first release. Especially considering my dataset has pretty good English support.&lt;/p&gt;

&lt;p&gt;However, after getting into the details of the design, I realized it’d be a lot more pragmatic to optimize the interface for Japanese at first. Although I’m keen to help the low Japanese-proficiency community in Tokyo, realistically, the vast majority of my users will be comfortable enough with Japanese.&lt;/p&gt;

&lt;p&gt;In the next phase I’ll focus on getting internationalization complete on the interface layer of the app, then focus on the data layer. It will require some design thought because a lot of the time even English speakers will want access to both the English and Japanese station name, train type, etc. when out and looking for their train.&lt;/p&gt;

&lt;h2 id=&quot;icon&quot;&gt;Icon&lt;/h2&gt;

&lt;p&gt;Creating the app icon was the last step for Eki Bright. My intention for much of development was to create an anthropomorphized train character with a happy disposition, similar to the &lt;a href=&quot;/2023/10/30/count-biki-app-and-character-design/&quot;&gt;vampire rabbit mascot&lt;/a&gt; Count Biki.&lt;/p&gt;

&lt;p&gt;Step zero was buying a magazine with lots of various train photos.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-train-magazine.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Luckily, train enthusiast magazines are not difficult to find in Japan&quot; title=&quot;Luckily, train enthusiast magazines are not difficult to find in Japan&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Luckily, train enthusiast magazines are not difficult to find in Japan&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Step one was sketching some trains, then iterating heavily on character designs.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-icon-sketchbook.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;My somewhat embarrassing sketchbook (blue pen/good sketches are by my friend Kazuyo)&quot; title=&quot;My somewhat embarrassing sketchbook (blue pen/good sketches are by my friend Kazuyo)&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;My somewhat embarrassing sketchbook (blue pen/good sketches are by my friend Kazuyo)&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Step two was 3D modeling.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v1-icon-wip.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;3D design work in progress&quot; title=&quot;3D design work in progress&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;3D design work in progress&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which unfortunately ended up with me throwing in the towel regarding the character and pivoting into a more traditional icon.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-app-icon.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;The final icon&quot; title=&quot;The final icon&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The final icon&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Although a cute character would be great, I realized it wasn’t a huge loss. Realistically, the app design is extremely utilitarian. A cute character on the book cover wouldn’t really reflect the contents very well.&lt;/p&gt;

&lt;p&gt;In the future, assuming a healthy adoption of the app, I’d love to do a full redesign that emphasizes playfulness alongside usefulness and a streamlined UX. At that point, I think it’d be reasonable to revisit the app icon design.&lt;/p&gt;

&lt;h2 id=&quot;monetization&quot;&gt;Monetization&lt;/h2&gt;

&lt;p&gt;Monetization on the App Store is still a mystery box to me. The entire market is relatively mature closing in on two decades on existence.&lt;/p&gt;

&lt;p&gt;At first release, I decided not to implement any in-app purchase or subscription at all. My focus up front is testing the market and ironing out the rough edges.&lt;/p&gt;

&lt;p&gt;I think there are 3 valid monetization paths (or some combination):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Themes: offer themes for the app and/or widgets that are each unlockable as a one-time purchase.&lt;/li&gt;
  &lt;li&gt;Subscription: make the app functionality severely limited outside a subscription: no nearby stations, no train timetables, only one bookmark/widget. Charge a low monthly/yearly rate to cover the ongoing development costs and data renewal costs.&lt;/li&gt;
  &lt;li&gt;One-time purchase: assume prospective users understand the value, and that I can cover my long-term costs by adding new users. The upside is pricing simplicity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One reason I’m not focused on monetization yet is that I’m not confident I can fill the top of the funnel.&lt;/p&gt;

&lt;p&gt;Getting anyone’s attention is often an insurmountable problem, especially when most people already have an okay-ish solution to the problem I’m trying to solve.&lt;/p&gt;

&lt;p&gt;Does anyone have space on their phone for another widget or app? Do they want to build new muscle memory and decide to open app A or app B depending on the situation? Is it a daily-use app that justifies an ongoing payment?&lt;/p&gt;

&lt;p&gt;Although I implemented tips in raw Store Kit for my last app &lt;a href=&quot;/2023/10/29/count-biki-japanese-numbers/&quot;&gt;Count Biki&lt;/a&gt;, and it’ll theoretically be less development this time around, it still requires enough work that could be better spent on marketing, especially while the top of the funnel is so small.&lt;/p&gt;

&lt;p&gt;All that’s to say that for now I’m going to focus on finding a reliable process to get users into the top of the funnel (the ever-reliable VC startup playbook, haha).&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I’m of course happy to see this little app make its way out into the world, and hopefully shave of a few seconds or minutes for train-hopping Tokyo residents. I’m a little biased, but I’ve found myself reaching for Eki Bright before Google Maps for a majority of my trips, even when multiple transfers are involved.&lt;/p&gt;

&lt;p&gt;It may simply be a naive sense of control Eki Bright gives me when bouncing around timetables, but regardless it’s surprisingly entertaining (rather than burdensome) to do my own simple route planning on the fly. And knowing I’m getting the absolute fastest trip from A to B.&lt;/p&gt;

&lt;p&gt;For developers, see you in the &lt;a href=&quot;/2024/08/06/eki-bright-developing-the-app-for-ios/&quot;&gt;next post&lt;/a&gt; for all the fun development details.&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Jul 2024 09:02:00 -0500</pubDate>
        <link>https://twocentstudios.com/2024/07/27/eki-bright-tokyo-area-train-timetables/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2024/07/27/eki-bright-tokyo-area-train-timetables/</guid>
        
        <category>ekibright</category>
        
        <category>app</category>
        
        
      </item>
    
      <item>
        <title>Investigating a Bug in the Tsurukame macOS App</title>
        <description>&lt;p&gt;I procrastinated on doing my kanji reviews over the weekend by &lt;a href=&quot;https://github.com/davidsansome/tsurukame/pull/709&quot;&gt;fixing a bug&lt;/a&gt; in the open source &lt;a href=&quot;https://github.com/davidsansome/tsurukame/&quot;&gt;Tsurukame for Wanikani app&lt;/a&gt;. This is a quick write-up about how I went about diagnosing and fixing the bug from fork to pull request.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/tsurukame-bug-01.png&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Tsurukame is an native iOS interface to the Wanikani flashcard system for Japanese kanji and vocabulary, developed and maintained by David Sansome.&quot; title=&quot;Tsurukame is an native iOS interface to the Wanikani flashcard system for Japanese kanji and vocabulary, developed and maintained by David Sansome.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Tsurukame is an native iOS interface to the Wanikani flashcard system for Japanese kanji and vocabulary, developed and maintained by David Sansome.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/davidsansome/tsurukame/issues/706&quot;&gt;Issue #706 - MacOS: Text input gets highlighted during reviews&lt;/a&gt; was reported by another app user a few weeks ago:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;After maybe the first half a second or so of a review being open, whatever text you have typed gets highlighted. If you are continuing to type that initial input gets deleted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;video src=&quot;/images/tsurukame-bug-02.mp4&quot; loop=&quot;&quot; controls=&quot;&quot; preload=&quot;&quot; width=&quot;500&quot;&gt;&lt;/video&gt;

&lt;p&gt;In the above video, after getting the meaning “bombing” correct, as I’m typing the reading the ぼう suddenly gets selected and is therefore deleted when I continue typing.&lt;/p&gt;

&lt;p&gt;I noticed this bug as well and it was honestly causing enough friction in my reviews that I finally decided to investigate the bug in earnest.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-project-and-building&quot;&gt;Setting up project and building&lt;/h3&gt;

&lt;p&gt;I fork the repo, then clone my fork to my local machine. I follow the instructions on the README to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt;, open the xcworkspace in Xcode 15.3, change the signing identifiers, and run the signing identifiers helper script.&lt;/p&gt;

&lt;p&gt;Since on the App Store the app is listed under “iPhone &amp;amp; iPad Apps” section, I choose the “My Mac (Designed for iPad)” build destination.&lt;/p&gt;

&lt;p&gt;When trying to build, Xcode complains about not having the WatchOS SDK, so I simply delete the two WatchOS targets and try to build again. It builds without any problems.&lt;/p&gt;

&lt;p&gt;I set up the simulator app with my API key and verify I can reproduce the bug.&lt;/p&gt;

&lt;h3 id=&quot;finding-the-relevant-view-controller&quot;&gt;Finding the relevant view controller&lt;/h3&gt;

&lt;p&gt;I start by figuring out the name of the view controller.&lt;/p&gt;

&lt;h4 id=&quot;strategy-1-view-debugger&quot;&gt;Strategy 1: View Debugger&lt;/h4&gt;

&lt;p&gt;The easiest way to do this is to navigate to the screen in the simulator and then use the view debugger. The view controller is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReviewViewController&lt;/code&gt;. The upside to this strategy is that I also get the name of the text field (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnswerTextField&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/tsurukame-bug-03.png&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Using the view debugger is often the easiest way to discover class names.&quot; title=&quot;Using the view debugger is often the easiest way to discover class names.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Using the view debugger is often the easiest way to discover class names.&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;strategy-2-searching-for-label-text&quot;&gt;Strategy 2: Searching for label text&lt;/h4&gt;

&lt;p&gt;Another way to find the view controller is search the project for the label text “Reviews”. This leads me to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainViewController.swift&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reviewsItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BasicModelItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Reviews&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;nv&quot;&gt;subtitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;nv&quot;&gt;accessoryType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disclosureIndicator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startReviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I search for the selector &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startReviews&lt;/code&gt; which leads me to the segue and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReviewContainerViewController&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;startReviews&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ,..&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ReviewContainerViewController&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReviewContainerViewController&lt;/code&gt; has two options, the more obvious one being &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReviewViewController&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;reviewVC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storyboard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instantiateViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;reviewViewController&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ReviewViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reviewVC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;showMenuButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;showSubjectHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isPracticeSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isPracticeSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;menuVC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storyboard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instantiateViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;reviewMenuViewController&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ReviewMenuViewController&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;menuVC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;finding-the-relevant-code&quot;&gt;Finding the relevant code&lt;/h3&gt;

&lt;p&gt;I previously found the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITextField&lt;/code&gt; is named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;answerTextField&lt;/code&gt;. It’s actually a subclass of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AnswerTextField&lt;/code&gt;. Just to double check, there’s not much functionality in the subclass implementation, so I can try to ignore it for now and assume the offending code is in the view controller.&lt;/p&gt;

&lt;p&gt;Searching for uses of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;answerTextField&lt;/code&gt;, I find a section of the view controller that implements the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITextFieldDelegate&lt;/code&gt; protocol. My instinct tells me this is a good place to start putting breakpoints. I put a breakpoint in:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldChangeCharactersIn&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replacementString&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Looking at the backtrace, it turns out that the delegate is actually delegated through another class called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TKMKanaInput&lt;/code&gt;. I can confirm this by seeing that the expression in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReviewViewController&lt;/code&gt; sets the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITextFieldDelegate&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kanaInput&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;answerField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kanaInput&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kanaInput&lt;/code&gt; sets its delegate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt; which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReviewViewController&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;kanaInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TKMKanaInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The effective delegate chain is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITextField&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TKMKanaInput&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReviewViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The bug is happening because the text field contents are getting selected unexpectedly. When I look at the available methods on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITextFieldDelegate&lt;/code&gt; protocol, I notice one related to selection that could be useful:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@available(iOS 13.0, *)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;textFieldDidChangeSelection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This API is only available on iOS 13 and the deployment target for Tsurukame is iOS 12. I temporarily update the deployment target to iOS 13 so I can use this API for debugging.&lt;/p&gt;

&lt;p&gt;I add the delegate conformance to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TKMKanaInput&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TKMKanaInput&lt;/code&gt; is written in Objective-C so we need to add that version instead of the Swift signature:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;textFieldDidChangeSelection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UITextField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;textField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- breakpoint here
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; so I can set a breakpoint.&lt;/p&gt;

&lt;p&gt;With the breakpoint added, this method gets called too often to be useful. Basically on any change. I want it to get called only when the selection length is non-zero.&lt;/p&gt;

&lt;p&gt;Checking the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITextField&lt;/code&gt; API, I can check the value of this range with the following line in LLDB:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;po&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectedTextRange&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It’s false only when the bug occurs (or when I manually select some text, but I can avoid doing that).&lt;/p&gt;

&lt;p&gt;I change the breakpoint condition to be:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectedTextRange&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/tsurukame-bug-05.png&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Using Xcode&apos;s conditional breakpoint functionality to ignore the many irrelevant calls to this method.&quot; title=&quot;Using Xcode&apos;s conditional breakpoint functionality to ignore the many irrelevant calls to this method.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Using Xcode&apos;s conditional breakpoint functionality to ignore the many irrelevant calls to this method.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note: when I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NO&lt;/code&gt; the breakpoint would always catch no matter what.&lt;/p&gt;

&lt;p&gt;I build and run the app, submit a reading answer, then immediately start typing. The breakpoint triggers!&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/tsurukame-bug-04.png&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Our breakpoint triggers at the exact time the text field&apos;s contents are selected.&quot; title=&quot;Our breakpoint triggers at the exact time the text field&apos;s contents are selected.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Our breakpoint triggers at the exact time the text field&apos;s contents are selected.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ascending the stack trace, I see a hit in app code within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReviewViewController&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animationDidStop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animationID&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UnsafeMutableRawPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subjectDetailsViewShown&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;answerField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;becomeFirstResponder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- breakpoint triggers here&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This makes sense for a few reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The selection bug was occurring ~0.5-1.0 seconds after switching review items; this amount of time is consistent with animations.&lt;/li&gt;
  &lt;li&gt;The responder chain is one of the few ways to programmatically alter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITextField&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITextView&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The UIKit internal behavior for text-related tasks especially is opaque and notoriously fickle between even point releases of iOS.&lt;/li&gt;
  &lt;li&gt;Mapping iOS input behavior to macOS is never 1-to-1, and is a hot-spot for leaky abstractions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve found the offending line of code, so now I can decide how to fix it.&lt;/p&gt;

&lt;h3 id=&quot;why-does-this-code-exist-in-the-first-place&quot;&gt;Why does this code exist in the first place?&lt;/h3&gt;

&lt;p&gt;Before modifying the code in any way, it’s best to try to understand why this code was written.&lt;/p&gt;

&lt;p&gt;I pop open Xcode’s git blame viewer (named “Authors” in the Editor Options). The commit includes a pull request number #186.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/tsurukame-bug-06.png&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Git blame in Xcode (no blame being thrown from here though).&quot; title=&quot;Git blame in Xcode (no blame being thrown from here though).&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Git blame in Xcode (no blame being thrown from here though).&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I open &lt;a href=&quot;https://github.com/davidsansome/tsurukame/pull/186&quot;&gt;this PR in GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The line of code was added by itself in this PR, and it was added specifically for macOS support back in 10.15 (it’s now 14.4):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Without this patch, you have to click the mouse to focus on the text entry box after each animation. With this patch, you can type answers one after another, like on an iPhone or iPad.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;proposing-and-testing-a-potential-fix&quot;&gt;Proposing and testing a potential fix&lt;/h3&gt;

&lt;p&gt;Now I can remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;answerField.becomeFirstResponder()&lt;/code&gt; call and then,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Check to see whether the behavior reported in #186 still occurs on macOS&lt;/li&gt;
  &lt;li&gt;Check to see whether the errant selection behavior (my target bug) still occurs on macOS&lt;/li&gt;
  &lt;li&gt;Check to see no behavior changes occur on iPhone&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I remove the line and:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The behavior reported in #186 no longer occurs. Presumably it was “fixed” at the iOS/macOS system layer.&lt;/li&gt;
  &lt;li&gt;The errant selection behavior no longer occurs. Our bug is fixed!&lt;/li&gt;
  &lt;li&gt;No behavior changes occur on iPhone. No problem there.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;committing-submitting-and-documenting-the-fix&quot;&gt;Committing, submitting, and documenting the fix&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;I make a new local branch.&lt;/li&gt;
  &lt;li&gt;I commit the code with a decent commit title and description.&lt;/li&gt;
  &lt;li&gt;I push to my remote fork on GitHub.&lt;/li&gt;
  &lt;li&gt;I &lt;a href=&quot;https://github.com/davidsansome/tsurukame/pull/709&quot;&gt;open a PR #709&lt;/a&gt; on the canonical repo.&lt;/li&gt;
  &lt;li&gt;I write up a succinct PR description linking the bug report issue and the old PR.&lt;/li&gt;
  &lt;li&gt;I submit the PR for review by the maintainer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;The maintainer approved and merged the PR almost immediately. CI ran and produced a new TestFlight build, but unfortunately, the TestFlight build is not runnable on macOS, so I’ll have to use my debug build for day-to-day reviews until the next version is ready for the App Store.&lt;/p&gt;

&lt;p&gt;I’m happy that this bug will no longer slow me down during reviews! Open source is great.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 May 2024 09:45:00 -0500</pubDate>
        <link>https://twocentstudios.com/2024/05/08/investigating-tsurukame-macos-bug/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2024/05/08/investigating-tsurukame-macos-bug/</guid>
        
        <category>apple</category>
        
        <category>ios</category>
        
        
      </item>
    
      <item>
        <title>Indie Game Devlog 05 - Materials and Shaders</title>
        <description>&lt;p&gt;Last time, I was deriving a pipeline for face animations. In the process I was making an implicit decision about how much time I’ll be committing to this part of the game versus what sort of impact and clarity into the characters it will provide for my audience.&lt;/p&gt;

&lt;p&gt;Materials are similar.&lt;/p&gt;

&lt;p&gt;I know I have neither the talent nor the time to commit to hand painting textures for my environments, hundreds of assets, and perhaps dozens of characters. But I also know flat colors on low poly models isn’t going to be visually interesting enough. What’s in the middle of these two extremes?&lt;/p&gt;

&lt;h2 id=&quot;the-possibilities-space-is-too-large&quot;&gt;The possibilities space is too large&lt;/h2&gt;

&lt;p&gt;The constraints of “looks good” but “doesn’t take forever to make” still don’t give me a lot of direction. I guess that’s where my personal taste comes into play.&lt;/p&gt;

&lt;p&gt;I’ve been enjoying all sorts of “hand-crafted” looks lately. Imitating certain real-world crafty materials in 3D feels like it doesn’t have the same sort of uncanny valley that hyper-realism does. Modeling clay, paper, felt, wool; these have all been used in stop-motion filmmaking since its early days. By picking one material it’ll theoretically be easier for me to keep to a theme, optimize performance, and optimize development time.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-01.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;I love the commitment to craft materials and diorama lighting in Yoshi&apos;s Crafted World.&quot; title=&quot;I love the commitment to craft materials and diorama lighting in Yoshi&apos;s Crafted World.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;I love the commitment to craft materials and diorama lighting in Yoshi&apos;s Crafted World.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I felt one material and a constrained color palette was a good north star.&lt;/p&gt;

&lt;h2 id=&quot;the-goal-clay&quot;&gt;The goal: clay&lt;/h2&gt;

&lt;p&gt;I can’t really articulate why, but I think my game’s world realized in clay would be fun to see. It obviously works well with the stop-motion animation style I was experimenting with last post.&lt;/p&gt;

&lt;p&gt;For learning and prototyping purposes, I decided to go with clay. But of course, this is all still prototyping.&lt;/p&gt;

&lt;p&gt;Other potential materials might be paper or wool knit. The goal at this point is to understand whether any of these choices imposes additional technical constraints or pitfalls.&lt;/p&gt;

&lt;h2 id=&quot;untangling-the-complexities-of-materials&quot;&gt;Untangling the complexities of materials&lt;/h2&gt;

&lt;p&gt;This is where my self-taught background starts to leak through again.&lt;/p&gt;

&lt;p&gt;I’ve been mostly working inside the world of Blender and its shader editor during my 3D journey. Thus, it wasn’t clear to me whether I was learning fundamental properties of shaders or specific Blender quirks. I first confronted this while porting my Biki character from Blender to SceneKit, but due to the nature (limited timescale) of that project, I just did my best to get to the finish line without really tackling the problems I was facing head on.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-02.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Biki as rendered in Blender (left) and SceneKit (right).&quot; title=&quot;Biki as rendered in Blender (left) and SceneKit (right).&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Biki as rendered in Blender (left) and SceneKit (right).&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This week I’ve needed to rectify all those knowledge gaps.&lt;/p&gt;

&lt;p&gt;Let’s start in Blender and try to work through all the complexities of materials.&lt;/p&gt;

&lt;h3 id=&quot;shaders&quot;&gt;Shaders&lt;/h3&gt;

&lt;p&gt;Shaders in Blender can be written in code, but more commonly they are described as nodes in a graph with the primary output “describing lighting interaction at the surface…, rather than the color of the surface,” quoting the &lt;a href=&quot;https://docs.blender.org/manual/en/latest/render/shader_nodes/introduction.html#shaders&quot;&gt;Blender docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Shaders really only have meaning when applied by a rendering engine to a mesh. It’s common to see a preview of shaders on a spherical mesh under neutral lighting from an HDRI.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-03.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;A common preview of a shader in Blender. Other mesh options are selectable on the right.&quot; title=&quot;A common preview of a shader in Blender. Other mesh options are selectable on the right.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A common preview of a shader in Blender. Other mesh options are selectable on the right.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Blender has two built-in rendering engines: EEVEE (simple) and Cycles (complex). Each has its own supported feature set, which means shaders can produce similar results but are by no means “universal”. We’ll discuss this further when considering how our shaders import into Godot, which has its own rendering engines.&lt;/p&gt;

&lt;p&gt;When you create a new material in Blender, by default it creates a principled BSDF node in the shader graph. For a beginner, the principled BSDF node has an overwhelming number of parameters, but the most commonly used are base color (diffuse), metallic, roughness, and normal.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-04.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;The principled BSDF shader node in Blender. Look at all those inputs and options.&quot; title=&quot;The principled BSDF shader node in Blender. Look at all those inputs and options.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The principled BSDF shader node in Blender. Look at all those inputs and options.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In theory, the principled BSDF base shader can describe the light bounce behavior of any photorealistic material.&lt;/p&gt;

&lt;p&gt;Setting a few of these parameters to constants can get you in the ballpark of some interesting looks.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-05.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Preview of an especially shiny material created with only a principled BSDF shader.&quot; title=&quot;Preview of an especially shiny material created with only a principled BSDF shader.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Preview of an especially shiny material created with only a principled BSDF shader.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But most materials in real life do not have the exact same property values across their entire surface. For example, an orange has lots of tiny bumps all over it, and some parts are shinier than others. We need some way to vary the properties of the material.&lt;/p&gt;

&lt;h3 id=&quot;varying-shader-inputs&quot;&gt;Varying shader inputs&lt;/h3&gt;

&lt;p&gt;The shader program is run in parallel on the GPU for every point of the mesh it’s applied to. There are two options for controlling the mapping between each point and the value reported to the shader input.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Texture and UV map - provide a 2D bitmap and specify how the flattened mesh maps onto it&lt;/li&gt;
  &lt;li&gt;Procedural - provide a mathematical function that takes an input value and produces an output value&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These two options are not mutually exclusive, and are very commonly mixed and matched across the shader graph.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-07.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;The various 2D bitmaps included in a texture pack.&quot; title=&quot;The various 2D bitmaps included in a texture pack.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The various 2D bitmaps included in a texture pack.&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-06.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;The node setup for the above image texture pack. The stacked brown nodes on the left are the inputs for each image.&quot; title=&quot;The node setup for the above image texture pack. The stacked brown nodes on the left are the inputs for each image.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The node setup for the above image texture pack. The stacked brown nodes on the left are the inputs for each image.&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-08.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;The node setup for an unremarkable but fully procedural shader. The interest is created by a noise generator function using generated texture coordinates (discussed later) as an input.&quot; title=&quot;The node setup for an unremarkable but fully procedural shader. The interest is created by a noise generator function using generated texture coordinates (discussed later) as an input.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The node setup for an unremarkable but fully procedural shader. The interest is created by a noise generator function using generated texture coordinates (discussed later) as an input.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Texture is the most &lt;em&gt;compatible&lt;/em&gt; while procedural is the most &lt;em&gt;flexible&lt;/em&gt;. Textures trade off less computation for more memory, since the data for each pixel will be stored instead of calculated on the fly.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;compatibility&lt;/em&gt; of textures is reflected in websites hosting thousands of both free and paid textures in the form of groups of image files (for example, the above clay texture is from &lt;a href=&quot;https://cgaxis.com/product/red-sculpting-clay-pbr-texture-3/&quot;&gt;CGAxis&lt;/a&gt;). These files can mostly be plugged directly into any rendering engine that supports PBR shaders (like Blender’s principled BSDF) with similar rendered results.&lt;/p&gt;

&lt;h3 id=&quot;shaders-in-godot&quot;&gt;Shaders in Godot&lt;/h3&gt;

&lt;p&gt;Godot has its own rendering engine and shader support. There are 4 ways to make shaders in Godot:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Write shaders in Godot’s &lt;a href=&quot;https://docs.godotengine.org/en/stable/tutorials/shaders/shader_reference/shading_language.html&quot;&gt;shader language&lt;/a&gt;, with many examples available on &lt;a href=&quot;https://godotshaders.com/&quot;&gt;godotshaders.com&lt;/a&gt;, or &lt;a href=&quot;https://docs.godotengine.org/en/stable/tutorials/shaders/converting_glsl_to_godot_shaders.html&quot;&gt;converted&lt;/a&gt; from the more common GLSL shader language.&lt;/li&gt;
  &lt;li&gt;Use a &lt;a href=&quot;https://docs.godotengine.org/en/stable/tutorials/shaders/shader_materials.html&quot;&gt;StandardMaterial3D&lt;/a&gt;, a PBR shader similar to Godot’s principled BSDF shader.&lt;/li&gt;
  &lt;li&gt;Use visual shader language to create a custom shader, most similar to Blender’s shader nodes.&lt;/li&gt;
  &lt;li&gt;Import the shaders from Blender, and they will be best-effort mapped into a StandardMaterial3D automatically.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-09.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;A few options in Godot&apos;s PBR shader StandardMaterial3D, in this case imported from the Blender material.&quot; title=&quot;A few options in Godot&apos;s PBR shader StandardMaterial3D, in this case imported from the Blender material.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A few options in Godot&apos;s PBR shader StandardMaterial3D, in this case imported from the Blender material.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All shaders are eventually converted to the platform’s shader language. The other non-text options can often be automatically or manually mapped between one another, for example from &lt;a href=&quot;https://docs.godotengine.org/en/stable/tutorials/shaders/shader_materials.html#converting-to-shadermaterial&quot;&gt;StandardMaterial3D to a text shader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that there actually several types of shaders: spatial (3D), canvas item (2D), particle, sky, and fog. In this post we’re primarily discussing spatial (3D).&lt;/p&gt;

&lt;h2 id=&quot;implementing-a-clay-texture&quot;&gt;Implementing a clay texture&lt;/h2&gt;

&lt;p&gt;With that background, let’s jump into the process of actually getting a clay material onto our character in Godot.&lt;/p&gt;

&lt;h3 id=&quot;goals-slash-success-criteria&quot;&gt;Goals slash success criteria&lt;/h3&gt;

&lt;p&gt;First off, there are myriad ways of implementing a clay-looking material so I’ll enumerate my goals.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Prefer creating and configuring shaders in Blender over Godot&lt;/strong&gt; - Blender not only has the most mature tools, but I’m most comfortable with them. There is less chance of upstream changes breaking the downstream source data.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Make the shader look good, but not perfect&lt;/strong&gt; - I’m still at the point where all parts of the project are in flux, so perfecting one vertical doesn’t make sense.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Minimize manual conversion steps in the pipeline&lt;/strong&gt; - I want to avoid needing to click a hundred buttons in a certain order after each small change to the source data. If I can reuse the existing automation, that’s best. If it’s possible to eventually write my own automation scripts, that’s second best.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ensure content creation is as easy as possible&lt;/strong&gt; - Making content (e.g. characters, props, environments) is a manual process, so ensuring the artistic parts of modeling and coloring are straightforward is ideal.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Keep performance and optimization in mind&lt;/strong&gt; - I know very little about how to keep performance in the ballpark, but I want to be careful that intense rework at the end of the development process due to poor performance will not be required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;options-for-the-source-material&quot;&gt;Options for the source material&lt;/h3&gt;

&lt;p&gt;There are a few options for getting the bulk of the clay shader in place.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Buy a procedural shader&lt;/strong&gt; - &lt;a href=&quot;https://blendermarket.com/products/claydoh&quot;&gt;Clay Doh&lt;/a&gt; is a paid Blender shader graph that seems to be the industry standard for very customizable procedural clay material.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Set up a custom procedural shader&lt;/strong&gt; - There are &lt;a href=&quot;https://www.youtube.com/watch?v=nqy-dxAadIY&quot;&gt;number&lt;/a&gt; of &lt;a href=&quot;https://www.youtube.com/watch?v=rOcj7HMFbpE&quot;&gt;tutorials&lt;/a&gt; on &lt;a href=&quot;https://www.youtube.com/watch?v=wTu3Xssw67Q&quot;&gt;YouTube&lt;/a&gt; that walk through how to make a custom procedural shader, each of varying quality.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Start from a texture&lt;/strong&gt; - There are &lt;a href=&quot;https://cgaxis.com/product/red-sculpting-clay-pbr-texture-3/&quot;&gt;several&lt;/a&gt; clay shaders image texture packs that include diffuse, normal, roughness, etc. images that can be plugged directly into the principled BSDF node after the mesh is UV mapped.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;using-raw-textures-option-3&quot;&gt;Using raw textures (option 3)&lt;/h3&gt;

&lt;p&gt;I downloaded an overstylized clay texture and dragged in the material to my project. The node setup was relatively simple: UVs mapped to each type of image texture plugged into the corresponding inputs of the principled BSDF shader. As shown earlier, it seemed like there was some extra channel flipping for the normal map.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-06.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;The default node setup for the clay image texture pack. There are some procedural bits happening in the middle to presumably alter the coordinate system of the normal map to match Blender&apos;s.&quot; title=&quot;The default node setup for the clay image texture pack. There are some procedural bits happening in the middle to presumably alter the coordinate system of the normal map to match Blender&apos;s.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The default node setup for the clay image texture pack. There are some procedural bits happening in the middle to presumably alter the coordinate system of the normal map to match Blender&apos;s.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This looked somewhat okay at first pass in Godot.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-10.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;The clay texture setup imported onto our character in Godot. It looks a little flat.&quot; title=&quot;The clay texture setup imported onto our character in Godot. It looks a little flat.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The clay texture setup imported onto our character in Godot. It looks a little flat.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spot checking the imported StandardMaterial3D, most of it was imported correctly. One big missing piece was the displacement map though.&lt;/p&gt;

&lt;h3 id=&quot;displacement&quot;&gt;Displacement&lt;/h3&gt;

&lt;p&gt;In shading, there are 2 ways to make meshes look deformed (not perfectly smooth): normal maps and displacement maps. They’re not mutually exclusive.&lt;/p&gt;

&lt;p&gt;Normal maps tell the rendering engine which direction every point on the mesh is facing. The rendering engine then can “fake” depth that doesn’t exist on the mesh. In many cases, this sort of depth is convincing. Normal maps are always the first choice over displacement maps because they’re cheap to for the renderer to calculate and widely supported across renderers.&lt;/p&gt;

&lt;p&gt;Displacement maps in contrast actually alter the positions of vertices on the mesh before the renderer performs shading. This results in more realistic shading, especially noticeable on the silhouette of the mesh (which the normal map has no control over). The displacement process can be costly though, and is not as well supported across renderers.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-11.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Normal map bump (left) vs. displacement map (right). Notice the silhouette on the normal map (left) is smooth.&quot; title=&quot;Normal map bump (left) vs. displacement map (right). Notice the silhouette on the normal map (left) is smooth.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Normal map bump (left) vs. displacement map (right). Notice the silhouette on the normal map (left) is smooth.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to displace vertices the vertices must exist on the mesh. That means low poly meshes with simple geometry must be subdivided to create enough vertices for the displacement map to be applied and have the intended effect. Normal maps don’t have this limitation: they can fake depth on a low poly mesh at the level of detail of the input texture or input function.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-12.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;The displacement shader on a cube with only 8 vertices (left) vs. millions of vertices (right).&quot; title=&quot;The displacement shader on a cube with only 8 vertices (left) vs. millions of vertices (right).&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The displacement shader on a cube with only 8 vertices (left) vs. millions of vertices (right).&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Godot’s build in shaders have no direct support for displacement maps at the shader level. A (&lt;a href=&quot;https://godotshaders.com/shader/noise-vertex-displacement/&quot;&gt;relatively simple&lt;/a&gt;) custom spatial shader must be used. Blender’s EEVEE rendering engine also has no support for displacement maps at the shader level. Blender’s Cycles rendering engine however does have direct support for displacement at the shader level.&lt;/p&gt;

&lt;p&gt;The workaround for implementing displacement before the shader is to use Blender’s displacement object modifier. The displacement modifier simply applies the displacement map to the mesh before handing the mesh off to the shader.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-13.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;The displacement modifier on a subdivided cube driven by a musgrave texture and rendered by EEVEE.&quot; title=&quot;The displacement modifier on a subdivided cube driven by a musgrave texture and rendered by EEVEE.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The displacement modifier on a subdivided cube driven by a musgrave texture and rendered by EEVEE.&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-result-of-raw-textures&quot;&gt;The result of raw textures&lt;/h3&gt;

&lt;p&gt;I applied a subdivision surface modifier (to create more vertices) and the displacement modifier to my character in Blender. I didn’t use the displacement texture supplied in the clay texture pack, instead using a generated noise texture to get a more modeling clay look.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-14.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;The test character model with the red clay shader texture pack applied (and maybe a little too much displacement).&quot; title=&quot;The test character model with the red clay shader texture pack applied (and maybe a little too much displacement).&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The test character model with the red clay shader texture pack applied (and maybe a little too much displacement).&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The subdivision surface modifier splitting the joints was an unintended side-effect, but it’s an interesting stylistic choice that’s also inconsequential implementation-wise, so I let it go.&lt;/p&gt;

&lt;p&gt;This was looking alright! I was already itching to swap out the clay texture for a different one or otherwise tweak settings, but I prioritized solving the next big problem: diffuse color.&lt;/p&gt;

&lt;h3 id=&quot;investigating-a-flat-color-workflow&quot;&gt;Investigating a flat color workflow&lt;/h3&gt;

&lt;p&gt;The clay shader came with its own diffuse texture. The detail of the texture matches that of the roughness, specular, etc. textures. The difference with those is that the diffuse texture’s primary color is a bold red.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-15.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Diffuse, roughness, and normal textures, respectively. By nature, all but the diffuse texture are non-color.&quot; title=&quot;Diffuse, roughness, and normal textures, respectively. By nature, all but the diffuse texture are non-color.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Diffuse, roughness, and normal textures, respectively. By nature, all but the diffuse texture are non-color.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I certainly don’t want all my characters and environments to be the same color red, so I needed a way to give myself the flexibility to reuse this material across meshes and faces.&lt;/p&gt;

&lt;p&gt;I started by adding a simple hue shift node between the diffuse texture and the base color input of the PBR texture to remap the color. For example, red to blue.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-16.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Adding a hue/saturation/value node to alter the diffuse texture&apos;s red color in Blender.&quot; title=&quot;Adding a hue/saturation/value node to alter the diffuse texture&apos;s red color in Blender.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Adding a hue/saturation/value node to alter the diffuse texture&apos;s red color in Blender.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Although this works in Blender, in Godot the color ramp was ignored. This was another reminder that even the simplest of procedural operations would not work out of the box in Godot.&lt;/p&gt;

&lt;p&gt;Then I tried disconnecting the diffuse texture and using a solid color. In my opinion, this looked good enough that I felt comfortable pursuing a diffuse color mapping solution that ignored the base material’s diffuse texture entirely. The normal map and other PBR components provided enough detail.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-17.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;There&apos;s a little detail missing, but using a flat diffuse looks good enough to ignore the more intricate diffuse texture, at least for now.&quot; title=&quot;There&apos;s a little detail missing, but using a flat diffuse looks good enough to ignore the more intricate diffuse texture, at least for now.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;There&apos;s a little detail missing, but using a flat diffuse looks good enough to ignore the more intricate diffuse texture, at least for now.&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;assigning-flat-colors-to-vertices-with-uv-maps-and-a-palette-texture&quot;&gt;Assigning flat colors to vertices with UV maps and a palette texture&lt;/h3&gt;

&lt;p&gt;I now needed to tackle the second part of the problem: mapping individual vertices to separate base colors, perhaps on a fixed palette.&lt;/p&gt;

&lt;p&gt;One of the more popular ways to map vertex colors to a flat color palette is to use UV maps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Associate a palette to a material as 2D bitmap texture.&lt;/li&gt;
  &lt;li&gt;Create a UV map for each mesh.&lt;/li&gt;
  &lt;li&gt;Scale and move vertices of the mesh around the UV map over top of the pallete.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-18.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;I&apos;ve manually mapped vertices from the mesh on the right to the color palette on left.&quot; title=&quot;I&apos;ve manually mapped vertices from the mesh on the right to the color palette on left.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;I&apos;ve manually mapped vertices from the mesh on the right to the color palette on left.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This workflow is relatively ergonomic to author. It allows flexibility within meshes when necessary but is also easy to use with meshes that are a single-color. There’s consistency by using a single palette. It’s performant since we can reuse the same material and texture across any number of meshes.&lt;/p&gt;

&lt;p&gt;And it exports to Godot without any problems… well, as long as you only need one UV map.&lt;/p&gt;

&lt;h3 id=&quot;multiple-uv-maps&quot;&gt;Multiple UV maps&lt;/h3&gt;

&lt;p&gt;Why would I need multiple UV maps? The roughness, specular, normal map, etc. textures all require a more standard UV map; one that utilizes the full area of the texture.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-19.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;A (crude) UV map on the normal texture that uses the whole area of the texture.&quot; title=&quot;A (crude) UV map on the normal texture that uses the whole area of the texture.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A (crude) UV map on the normal texture that uses the whole area of the texture.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That meant I needed two UV maps: one for diffuse (base color) and one for the other non-diffuse PBR components.&lt;/p&gt;

&lt;p&gt;Luckily, Blender can do multiple UV maps!&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-20.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;On the left, using the UV map node to specify the secondary UV map be used to select the colors from the color palette texture. On the right, the object data panel showing 2 UV maps: one for the diffuse and one for the non-color textures.&quot; title=&quot;On the left, using the UV map node to specify the secondary UV map be used to select the colors from the color palette texture. On the right, the object data panel showing 2 UV maps: one for the diffuse and one for the non-color textures.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;On the left, using the UV map node to specify the secondary UV map be used to select the colors from the color palette texture. On the right, the object data panel showing 2 UV maps: one for the diffuse and one for the non-color textures.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, when I checked the result in Godot I found that my second UV map was ignored. Godot has support for a second UV map, but it seems like its purpose is for some sort of light map. I investigated for a while, but eventually gave up.&lt;/p&gt;

&lt;p&gt;In parallel to this thread of investigation, I was also jumping back to explore the options for procedural shaders.&lt;/p&gt;

&lt;h3 id=&quot;the-problem-with-procedural-shaders&quot;&gt;The problem with procedural shaders&lt;/h3&gt;

&lt;p&gt;With the earlier tests, including altering the base color texture with a hue/saturation/value node, I figured out that the automatic Blender-to-Godot import/export feature (via the GLFT format) does not handle procedural shaders well. It makes sense, after all the shader languages and visual node features are quite different.&lt;/p&gt;

&lt;p&gt;There’s not much I can do to get around this limitation directly (e.g. somehow implement better support directly in the import/export pipeline).&lt;/p&gt;

&lt;p&gt;I was nearly stumped at this part, but stumbled into a potential solution along the same lines as my previous solution to the &lt;a href=&quot;/2024/03/28/indie-game-devlog-03#implementing-reduced-framerate-for-godot&quot;&gt;animation modifier problem&lt;/a&gt; from last time: baking.&lt;/p&gt;

&lt;h3 id=&quot;texture-baking&quot;&gt;Texture baking&lt;/h3&gt;

&lt;p&gt;The solution to using procedural nodes in my shaders seemed obvious in retrospect once I started to internalize the relationship between the PBR base shader (aka principled BSDF shader in Blender) and its inputs.&lt;/p&gt;

&lt;p&gt;The inputs to the PBR texture could always be converted to separate 2D bitmap textures as long as there was a UV map for each mesh to provide a frame of reference for the mapping.&lt;/p&gt;

&lt;p&gt;That means I could perform a process called texture baking for each PBR texture input. Texture baking takes each input to the PBR texture and converts it to a flat 2D bitmap texture. Blender supports texture baking with its Cycles rendering engine. The process is &lt;a href=&quot;https://www.youtube.com/watch?v=Se8GdHptD4A&quot;&gt;somewhat manual&lt;/a&gt; and error prone, requiring the creation of 2D bitmaps, plugging and unplugging nodes, waiting for the render to complete, and more. But the process can be at least partially automated with a choice of Blender plugins.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-21.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;The various texture bake options built into Blender, found in the render panel when Cycles is selected.&quot; title=&quot;The various texture bake options built into Blender, found in the render panel when Cycles is selected.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The various texture bake options built into Blender, found in the render panel when Cycles is selected.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With texture baking, I had essentially found an escape hatch to ensure anything I dreamt up in Blender could be realized in Godot. Of course with some caveats I’ll discuss later.&lt;/p&gt;

&lt;h3 id=&quot;texture-baking-a-base-color-texture-map&quot;&gt;Texture baking a base color texture map&lt;/h3&gt;

&lt;p&gt;Jumping back to my multiple UV maps problem, I realized I could solve this problem with texture baking.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For each mesh:
    &lt;ol&gt;
      &lt;li&gt;Create a second UV map targeting the color palette texture and set these in shader node graph.&lt;/li&gt;
      &lt;li&gt;Run the texture baking process for just the base color/diffuse PBR input.&lt;/li&gt;
      &lt;li&gt;Unplug the color pallete texture node graph from the PBR shader.&lt;/li&gt;
      &lt;li&gt;Plug in the baked texture’s node into the PBR shader.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The baked texture matching the primary UV map looks like this:&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-22.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;The baked diffuse texture (top left), and the simple node setup (bottom).&quot; title=&quot;The baked diffuse texture (top left), and the simple node setup (bottom).&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The baked diffuse texture (top left), and the simple node setup (bottom).&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Seems like I messed up the UV map for the lower arms.)&lt;/p&gt;

&lt;p&gt;And importing it into Godot looks like this:&lt;/p&gt;

&lt;video src=&quot;/images/devlog05-23.mp4&quot; loop=&quot;&quot; controls=&quot;&quot; preload=&quot;&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;p&gt;So baked textures work in Godot!&lt;/p&gt;

&lt;p&gt;However, the downsides are that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The texture baking process is at least somewhat manual and tedious.&lt;/li&gt;
  &lt;li&gt;The texture baking process must be re-run if the mesh or shader graph changes.&lt;/li&gt;
  &lt;li&gt;One diffuse texture per mesh is required, at (presumably?) the same resolution as the other textures.&lt;/li&gt;
  &lt;li&gt;The diffuse texture will end up with a lot of duplicate/wasted space.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was great to have discovered the texture baking option. Not only because it allowed flexibility in color mapping, but also because it opened the door for using fully procedural shaders in Blender.&lt;/p&gt;

&lt;h3 id=&quot;generated-texture-space&quot;&gt;Generated texture space&lt;/h3&gt;

&lt;p&gt;UV maps aren’t the only way we can associate a texture to points on a mesh. If we look at Blender’s texture coordinate node, we can see that there are several options:&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-24.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;The texture coordinate node in Blender. Notice its many outputs, rarely discussed in detail in tutorials.&quot; title=&quot;The texture coordinate node in Blender. Notice its many outputs, rarely discussed in detail in tutorials.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The texture coordinate node in Blender. Notice its many outputs, rarely discussed in detail in tutorials.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Generated texture coordinate is something we can explore. Generated is controlled by another panel in the object data properties called Texture Space.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-25.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Texture space section in the object data panel.&quot; title=&quot;Texture space section in the object data panel.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Texture space section in the object data panel.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By default, the generated texture coordinate is created automatically by calculating a fitted rectangular bounding box around the object. We can view the bounding box by going to the object properties panel and checking Texture Space under Viewport Display.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-26.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;The texture space viewport display option (right), and how it displays in the viewport (orange, left).&quot; title=&quot;The texture space viewport display option (right), and how it displays in the viewport (orange, left).&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The texture space viewport display option (right), and how it displays in the viewport (orange, left).&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’d never understood why sometimes my procedural textures looked weirdly stretched on one axis if applied to an obviously non-square mesh.&lt;/p&gt;

&lt;p&gt;The way to fix this (besides manually creating a UV map), is to disable Auto Texture Space and change the size XYZ values to be equal.&lt;/p&gt;

&lt;p&gt;In theory, using the generated texture coordinates for the non-diffuse parts of the clay material would free up the UV map to be used for the palette texture technique discussed earlier.&lt;/p&gt;

&lt;p&gt;I tried setting this up in Blender and checking the results in Godot. Unfortunately, it seems like Godot will always use the UV map.&lt;/p&gt;

&lt;p&gt;Another swing and a miss; generated texture coordinates couldn’t be a solution to my multiple UV map problem.&lt;/p&gt;

&lt;h3 id=&quot;texture-painting&quot;&gt;Texture painting&lt;/h3&gt;

&lt;p&gt;I’ll give an honorable mention to texture painting as an option for assigning colors to the diffuse input, even if I’m not planning on using it (I simply don’t need the level of detail it provides).&lt;/p&gt;

&lt;p&gt;The most flexible option for assigning base colors is to create a blank texture and paint colors on it. The downside of course is that, like the texture baking option above, you’ll end up with one texture per mesh.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-27.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;The model in texture paint mode, using the previously baked texture as a base. It&apos;s possible to draw directly on the model in the viewport (right) or the 2D bitmap texture (left).&quot; title=&quot;The model in texture paint mode, using the previously baked texture as a base. It&apos;s possible to draw directly on the model in the viewport (right) or the 2D bitmap texture (left).&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The model in texture paint mode, using the previously baked texture as a base. It&apos;s possible to draw directly on the model in the viewport (right) or the 2D bitmap texture (left).&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The upside is that this is a well-beaten workflow path that has lots of tooling support.&lt;/p&gt;

&lt;h3 id=&quot;using-one-material-per-base-color&quot;&gt;Using one material per base color&lt;/h3&gt;

&lt;p&gt;Another option for a flexible base color worflow I want to add to the list is using one material per base color.&lt;/p&gt;

&lt;p&gt;An overview of this workflow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the material that will be used as a template.&lt;/li&gt;
  &lt;li&gt;Separate out the material so it has a single color RGB input node.&lt;/li&gt;
  &lt;li&gt;Optionally group all other nodes except the RGB input node into a node group.&lt;/li&gt;
  &lt;li&gt;Duplicate the material for each required color.&lt;/li&gt;
  &lt;li&gt;In Edit mode, select each face and assign the proper material to it until all faces are assigned.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-28.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Assigning multiple materials to mesh faces. In the example there are 2 materials (Body, Clothes), and I select faces on the mesh in edit mode and click the Assign button.&quot; title=&quot;Assigning multiple materials to mesh faces. In the example there are 2 materials (Body, Clothes), and I select faces on the mesh in edit mode and click the Assign button.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Assigning multiple materials to mesh faces. In the example there are 2 materials (Body, Clothes), and I select faces on the mesh in edit mode and click the Assign button.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve used this workflow regularly in the past. It’s relatively ergonomic for meshes whose base colors are limited and map closely to their faces. Or if you have the flexibility to modify the mesh to add vertices where you need color separation.&lt;/p&gt;

&lt;p&gt;I’ll definitely have to use this workflow in the case that the characters or environment have a non-clay material. Perhaps something transparent or emissive (like a neon light). But in the general case, the one-material-per-color can become cumbersome to maintain when there are lots of colors in use across meshes and files.&lt;/p&gt;

&lt;p&gt;The Godot importer handles this workflow without a problem.&lt;/p&gt;

&lt;h3 id=&quot;assigning-base-colors-using-color-attributes-and-vertex-paint-mode&quot;&gt;Assigning base colors using color attributes and vertex paint mode&lt;/h3&gt;

&lt;p&gt;The last option I found for base colors is assigning colors via the Color Attributes and vertex paint mode in Blender.&lt;/p&gt;

&lt;p&gt;Under the object data panel, there’s a section called Color Attributes. Creating a new entry here allows color data to be associated with individual vertices on the mesh.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-29.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Yet another useful section in the object data properties panel, Color Attributes. It stores color values assigned to vertices.&quot; title=&quot;Yet another useful section in the object data properties panel, Color Attributes. It stores color values assigned to vertices.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Yet another useful section in the object data properties panel, Color Attributes. It stores color values assigned to vertices.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Switching to Vertex Paint mode in the viewport allows us to paint colors on directly on the vertices of the mesh using a few basic painting tools.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-30.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Assigning colors to vertices in the viewport&apos;s vertex paint mode. A little less ergonomic than texture paint mode.&quot; title=&quot;Assigning colors to vertices in the viewport&apos;s vertex paint mode. A little less ergonomic than texture paint mode.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Assigning colors to vertices in the viewport&apos;s vertex paint mode. A little less ergonomic than texture paint mode.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then in the shader, we add a Color Attributes node and plug it directly into the base color input of the principled BSDF node.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-31.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;The simple node setup for the color attribute node.&quot; title=&quot;The simple node setup for the color attribute node.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The simple node setup for the color attribute node.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I was very much not expecting this to import into Godot. But I gave it a shot anyway and… wow, it worked!&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog05-32.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;The color attributes/vertex paint workflow imports properly into Godot.&quot; title=&quot;The color attributes/vertex paint workflow imports properly into Godot.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The color attributes/vertex paint workflow imports properly into Godot.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I found the actual process of using vertex paint mode a bit clunky. Generally, I feel like I want to paint faces rather than vertices, but that workflow is much less streamlined than rotating around the model and painting the individual vertices.&lt;/p&gt;

&lt;h2 id=&quot;summarizing-the-options&quot;&gt;Summarizing the options&lt;/h2&gt;

&lt;p&gt;OK, so that’s a lot of options to consider. It’s still tough to weigh the pros and cons of each without doing a dry run of modeling, texturing, and exporting a handful of character and environment models.&lt;/p&gt;

&lt;p&gt;I may be able to get away with finding a decent clay texture pack, using that directly for the non-diffuse PBR inputs, then committing to a vertex painting workflow for the diffuse input.&lt;/p&gt;

&lt;p&gt;However, I’m still considering buying the Clay Doh procedural shader because it looks really nice. Going the full procedural route would require experimenting with a texture baking workflow and then UV mapping all my objects in reference to the baked textures.&lt;/p&gt;

&lt;p&gt;For now, I feel good about having explored the problem and solution space well enough to be able to implement a pipeline that makes realistic aesthetic compromises a bit further down the line.&lt;/p&gt;

&lt;p&gt;And I’m sure there’s at least &lt;em&gt;something&lt;/em&gt; I’ve missed in the Blender/Godot importer that could make any of the above options more streamlined.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;I think diving deep into character design is the next important step. Character design is probably something I should have spent the last few years studying and practicing before getting to this point but… we’ll see what I can pull off!&lt;/p&gt;

&lt;p&gt;Until next time.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Apr 2024 12:05:00 -0500</pubDate>
        <link>https://twocentstudios.com/2024/04/09/indie-game-devlog-05/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2024/04/09/indie-game-devlog-05/</guid>
        
        <category>indiegame</category>
        
        
      </item>
    
      <item>
        <title>Indie Game Devlog 04 - Animating Faces</title>
        <description>&lt;p&gt;Last time, I’d prototyped a 3D character with an idle and walk animation.&lt;/p&gt;

&lt;p&gt;Next, I wanted to prototype face animations.&lt;/p&gt;

&lt;h2 id=&quot;finding-the-balance-in-character-expression&quot;&gt;Finding the balance in character expression&lt;/h2&gt;

&lt;p&gt;My game is going to be heavily narrative focused. Meaning I need to tell a good story where the player can quickly connect and empathize with the characters.&lt;/p&gt;

&lt;p&gt;Of course you can tell a good story through words alone (a novel) or actions alone (a silent movie). But many media use a balance of the two.&lt;/p&gt;

&lt;p&gt;I need to find a balance that supports my story, but is also feasible for a solo developer with my level of experience making a game at this scale.&lt;/p&gt;

&lt;p&gt;What does balance mean? What are my options?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;At the low end of fidelity, we have games that have either no faces or a face with a static expression.&lt;/li&gt;
  &lt;li&gt;In the middle, we have games with no lip-syncing (or even voice acting), but still a library of facial expressions that match the tone of the current dialogue. Example: The Legend of Zelda - Ocarina of Time.&lt;/li&gt;
  &lt;li&gt;At the high end of fidelity, we have AAA games with fully rigged character faces that have fully motion captured or hand-animated lip-syncing for both cut-scenes and gameplay. Example: The Last of Us.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog04-01.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Saria from Ocarina of Time changes her facial expression to match her written dialogue. There&apos;s limited animation between expressions, with blinking being an exception.&quot; title=&quot;Saria from Ocarina of Time changes her facial expression to match her written dialogue. There&apos;s limited animation between expressions, with blinking being an exception.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Saria from Ocarina of Time changes her facial expression to match her written dialogue. There&apos;s limited animation between expressions, with blinking being an exception.&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;my-goal-scripted-expressions&quot;&gt;My goal: scripted expressions&lt;/h2&gt;

&lt;p&gt;I’d like to shoot for something similar to the medium fidelity, like Ocarina of Time.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make a library of a dozen or so facial expressions per character.&lt;/li&gt;
  &lt;li&gt;Don’t bother with animating between expressions.&lt;/li&gt;
  &lt;li&gt;Support a limited set of looping animations like blinking.&lt;/li&gt;
  &lt;li&gt;Allow specific animations to be triggered from the script that contains the dialogue.&lt;/li&gt;
  &lt;li&gt;Don’t bother with full voice acting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As great as it’d be to have full voice acting and lip sync, I’m confident it would be way too ambitious.&lt;/p&gt;

&lt;p&gt;Even having a dozen facial expressions may be overly ambitious for the number of characters I’m already planning. That’s part of what I wanted to find out at this stage of prototyping.&lt;/p&gt;

&lt;h2 id=&quot;options-for-faces&quot;&gt;Options for faces&lt;/h2&gt;

&lt;p&gt;Since I’ve yet to decide on an aesthetic for my character/environment art, it’s still possible for me to adapt the character style to the difficulty of implementation. In a world with infinite resources the art could 100% drive the implementation, but that’s not the world I currently inhabit.&lt;/p&gt;

&lt;p&gt;I need full access to change any character’s facial expression from the game engine at any time. Identifying all the levers in Godot that allow me to do so is also part of this exploration.&lt;/p&gt;

&lt;p&gt;There are 3 art/implementation pairs that fulfill the target requirements I listed above:&lt;/p&gt;

&lt;h3 id=&quot;1-independent-2d-textures-projected-on-static-3d-face-geometry&quot;&gt;1. Independent 2D textures projected on static 3D face geometry&lt;/h3&gt;

&lt;p&gt;This option shrinkwraps a bitmap 2D texture onto the 3D model. All faces can be on one texture like a sprite sheet, or as separate textures that are swapped in and out.&lt;/p&gt;

&lt;p&gt;Most characters from Ocarina of Time have faces like this, although noses and ears are usually part of the base model.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog04-02.jpg&quot; width=&quot;400&quot; height=&quot;&quot; alt=&quot;Saria from Ocarina of Time has a bitmap 2D face texture&quot; title=&quot;Saria from Ocarina of Time has a bitmap 2D face texture&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Saria from Ocarina of Time has a bitmap 2D face texture&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-independent-3d-geometry-for-each-facial-expression&quot;&gt;2. Independent 3D geometry for each facial expression&lt;/h3&gt;

&lt;p&gt;This option adds a separate object for each expression on top of the main face/body geometry. Only one object is displayed at a time. The style is similar to (1), but the implementation is different and the 3D geometry allows the face to participate in lighting.&lt;/p&gt;

&lt;p&gt;This is the way I modeled Dory.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog04-10.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Dory has 3D face geometry for its eyes and mouth, but the vertices do not morph and they are not integrated into the main body. They even cast shadows onto the main body.&quot; title=&quot;Dory has 3D face geometry for its eyes and mouth, but the vertices do not morph and they are not integrated into the main body. They even cast shadows onto the main body.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Dory has 3D face geometry for its eyes and mouth, but the vertices do not morph and they are not integrated into the main body. They even cast shadows onto the main body.&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-single-3d-geometry-that-morphs-for-each-facial-expression&quot;&gt;3. Single 3D geometry that morphs for each facial expression&lt;/h3&gt;

&lt;p&gt;This option produces the most “realistic” results. The face will deform the way a human face does.&lt;/p&gt;

&lt;p&gt;The downsides are that a humble face rig can take lots of time and expertise to set up, having more control points requires more time spent animating, and it’s easy to fall into the uncanny valley where the character looks creepy and unsettling.&lt;/p&gt;

&lt;p&gt;The upside is that the current tools for executing this style are well tailored to the job. This even includes live video motion capture from a smartphone that can drive an animated rig.&lt;/p&gt;

&lt;p&gt;I found a solo indie dev working on a game called Farewell North who talks about implementing this kind of facial animation &lt;a href=&quot;https://www.youtube.com/watch?v=fkB3tK6zZSo&quot;&gt;in this devlog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An easy example is The Last of Us. &lt;a href=&quot;https://www.youtube.com/watch?v=myZcUvU8YWc&quot;&gt;A demo from 2013&lt;/a&gt; shows some behind the scenes materials on the rigging process.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog04-03.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;The Last of Us like most AAA games targets realism with a full face rig&quot; title=&quot;The Last of Us like most AAA games targets realism with a full face rig&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The Last of Us like most AAA games targets realism with a full face rig&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;independent-expressions&quot;&gt;Independent expressions&lt;/h2&gt;

&lt;p&gt;At the moment, I’m leaning towards (1) or (2). I’m not confident enough in my character modeling skills or my art direction or time/effort estimation skills to gamble with the downsides of (3).&lt;/p&gt;

&lt;p&gt;Designing independent expressions lends itself to stylization, and therefore it may be easier for me to avoid the uncanny valley when eventually finalizing my character designs.&lt;/p&gt;

&lt;p&gt;The next decision is whether to use 2D or 3D.&lt;/p&gt;

&lt;p&gt;I’m drawn towards the look of 3D, so I decided to explore that implementation first.&lt;/p&gt;

&lt;h2 id=&quot;implementing-3d-independent-expressions&quot;&gt;Implementing 3D independent expressions&lt;/h2&gt;

&lt;p&gt;I started by modeling opened eyes and closed eyes in two separate objects.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog04-04.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Open and closed eyes, with simple geometry and modifiers added&quot; title=&quot;Open and closed eyes, with simple geometry and modifiers added&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Open and closed eyes, with simple geometry and modifiers added&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For a simple case like this, using the same object/mesh and using a shape key to tween between open and closed would definitely be possible. However, for the more complicated expressions I’m planning for, deforming a single mesh isn’t going to cut it.&lt;/p&gt;

&lt;p&gt;I realized quickly that these eye objects needed to be parented and weighted to the existing armature in order to follow the head with its existing idle animation.&lt;/p&gt;

&lt;p&gt;As separate meshes, the opened and closed eyes appear in Godot’s scene tree automatically.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog04-05.jpg&quot; width=&quot;&quot; height=&quot;200&quot; alt=&quot;Access to objects in the imported Godot scene&quot; title=&quot;Access to objects in the imported Godot scene&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Access to objects in the imported Godot scene&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That means I can reference them in code and turn them on and off with a code snippet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gdscript&quot;&gt;func toggleEyeBlink():
    $Armature/Skeleton3D/eye_blink.visible = !$Armature/Skeleton3D/eye_blink.visible
    $Armature/Skeleton3D/eye_neutral.visible = !$Armature/Skeleton3D/eye_neutral.visible
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For testing purposes, I rotated the player model towards the camera and triggered toggling the eye open and close with the existing action button (spacebar).&lt;/p&gt;

&lt;video src=&quot;/images/devlog04-06.mp4&quot; controls=&quot;&quot; loop=&quot;&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;p&gt;Awesome. I’ve got full manual control over eye meshes. From here it’s reasonable to see how expanding this could work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I add a bunch more eye shapes as separate objects.&lt;/li&gt;
  &lt;li&gt;I add a bunch of mouth shapes as separate objects.&lt;/li&gt;
  &lt;li&gt;I create some helpers in code to associate a facial expression with all but one eye object and all but one mouth object visible.&lt;/li&gt;
  &lt;li&gt;I trigger a named facial expression from the dialogue script.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;blendergodot-integration-woes&quot;&gt;Blender/Godot integration woes&lt;/h2&gt;

&lt;p&gt;There’s a missing piece in the above plan though, and it has to do with Blender integration.&lt;/p&gt;

&lt;p&gt;The idle and walk animations are defined on the Blender side and imported into Godot in an AnimationPlayer node.&lt;/p&gt;

&lt;p&gt;It’s easy to imagine wanting a looping “blink” animation that alternates between opened and closed eyes. So I tried to imagine how I’d implement that animation in Blender. It’s surprisingly convoluted! And it’s exposing my lack of fundamental understanding of both Blender and Godot.&lt;/p&gt;

&lt;p&gt;The first problem is animating visibility. The eye_open object needs to disappear when the eye_closed object appears and vice-versa. If I want to keep all my animations source-of-truth in Blender, I’ve identified these options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Scale the object to a near-zero value.&lt;/strong&gt; This is not a robust solution for several reasons: Some modifiers will break the geometry, it’s not as ergonomic as just having a single boolean, and the rendering engine still needs to account for the scaled-down geometry.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use the object visibility setting.&lt;/strong&gt; This would my preferred option, but it’s not possible. In Blender there’s a toggle for viewport visibility and render visibility. And it’s animatable. It requires changing an import setting in Godot for the blend file under “Blender &amp;gt; Nodes &amp;gt; Visible” to “Renderable”. However, this only applies during the import process, so the object in question is either imported or ignored. The setting is not read after import, including during animation.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Move the “hidden” mesh inside the head.&lt;/strong&gt; Reasonable, but requires setting up shape keys for every object, and potentially taking a performance hit.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Move the “hidden” mesh far off screen.&lt;/strong&gt; This has the benefit of presumably being able to participate in the Godot renderer’s automatic distance culling &lt;a href=&quot;https://docs.godotengine.org/en/stable/tutorials/3d/mesh_lod.html&quot;&gt;mesh level of detail&lt;/a&gt; (LOD) system, and therefore avoid the performance hit. But still makes the animation process unergonomic.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Set the material to transparent.&lt;/strong&gt; Might not play nice with whatever material or shader I choose. Presumably takes a performance hit.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Enforce all eyes use the same number of vertices.&lt;/strong&gt; This would allow me to use Blender’s shape keys as designed. However, it imposes serious limitations on the art style, including using different colors. Modeling all potential eye shapes would end up being a puzzle beyond my current skillset.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Not only does the problem of visibility have no clear solution, but the animation process itself within Blender is not as straightforward as the existing armature animation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The separate eye_open and eye_closed objects will have separate animation Actions in Blender. This means I need to create two separate but mirroring animation timelines that toggle the visibility. But I can’t even see them on the same dope sheet.&lt;/li&gt;
  &lt;li&gt;The bigger problem is that animation actions are only imported from one object. In my case it’s the armature. Actions attached to other objects are ignored by Godot. This would require more research to understand its limitations.&lt;/li&gt;
  &lt;li&gt;From some investigation, it seems as if the right way to handle this kind of animation is to make a driver system or another armature that combines the eye_open and eye_closed visibility behavior into one parameter. It may require putting all the eye meshes into the single body object. This is all beyond my current understanding of Blender.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog04-09.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Trying to set up a blinking animation in Blender via the render visibility property. Shown is only one half of the animation. It&apos;s not very ergonomic.&quot; title=&quot;Trying to set up a blinking animation in Blender via the render visibility property. Shown is only one half of the animation. It&apos;s not very ergonomic.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Trying to set up a blinking animation in Blender via the render visibility property. Shown is only one half of the animation. It&apos;s not very ergonomic.&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;solution-all-face-animations-in-godot&quot;&gt;Solution: all face animations in Godot&lt;/h2&gt;

&lt;p&gt;To reduce complexity, I’d prefer to keep all animations Blender. That way, I could continue to use Blender’s superior tooling and I wouldn’t have to keep track of which program contains which animation.&lt;/p&gt;

&lt;p&gt;But in this case, it seems like I’ve eliminated all the convenient and sustainable options of using Blender for face animations.&lt;/p&gt;

&lt;p&gt;My primary use case is going to be triggering facial expression changes from the dialogue. It’s the more rare secondary use case of looping animations like blinking that I’m currently investigating. So maybe keeping all face animations within Godot is the least complex strategy after all.&lt;/p&gt;

&lt;p&gt;I’m already confident I know how I’d implement facial expression changes from the dialogue in Godot. But I’m not clear on how I’d author animations in Godot on the imported Blender object and have them play nicely with the existing animation from Blender. For example, how do I keep a walk cycle loop going while also having a blink cycle loop with a different frame length?&lt;/p&gt;

&lt;p&gt;AnimationTree, Godot’s node for combining various animations from an AnimationPlayer, is tied to one AnimationPlayer. The AnimationPlayer it’s currently tied to is imported from Blender as read-only. The whole point of AnimationTree is to assist in blending and transitioning between multiple animations, so having more than one is an anti-pattern. However, in this case, since my face animations are completely separate from the body animations, I think it should be okay.&lt;/p&gt;

&lt;p&gt;And although I originally thought a second AnimationTree would be required specifically for face animations, I now realize that a second AnimationPlayer alone may be fine in my case. After all, in theory most things that AnimationPlayer and AnimationTree do can be accomplished with raw code (if not very verbosely). The way I see it, I can switch between static face objects (like a frown) and cyclical animations (like a blink cycle) in single function driven by the dialogue script. This would only require a single AnimationPlayer with all the animations configured ahead of time. It wouldn’t require an AnimationTree at all.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog04-07.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Configuration of the blink animation directly in Godot using the separate eye objects from Blender&quot; title=&quot;Configuration of the blink animation directly in Godot using the separate eye objects from Blender&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Configuration of the blink animation directly in Godot using the separate eye objects from Blender&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The blinks are automatic on a loop in the demo below.&lt;/p&gt;

&lt;video src=&quot;/images/devlog04-08.mp4&quot; controls=&quot;&quot; loop=&quot;&quot; preload=&quot;none&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;p&gt;OK, so this strategy seems pretty reasonable taking into account my current constraints. It’s a shame I can’t use Blender, but in the end, I have to use all the flexibility available to me to my advantage and not be afraid to commit to making my own systems and tools.&lt;/p&gt;

&lt;p&gt;A lingering question is whether I can easily reuse an AnimationPlayer node for the player and all NPCs if all meshes have face objects with the same names. Similarly, how can I reuse code to accept a facial expression name and update the face of the relevant character.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;NPCs represent a crucial concept that’s both the same (interactions, face shapes) and different (names, appearances) from existing code/assets. Although I don’t want to spend time designing and modeling details of every character yet, I do want to make sure that I understand how to set up NPCs so that I can share the similar bits while allowing enough configuration to support the differing bits. That includes their similarities to both the player character and one another.&lt;/li&gt;
  &lt;li&gt;I’d like to explore materials and shaders again. I’ve been doing a little more aesthetics research and have a few styles I’d like to try.&lt;/li&gt;
  &lt;li&gt;Designing the conversation experience – basically the view and interaction patterns while two characters are speaking – is important enough to the overall experience that it deserves its own prototypes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sidenote: this is the first post of the devlog series where I was writing while actively experimenting, so please excuse the past/present tense changes.&lt;/p&gt;

&lt;p&gt;Until next time.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Apr 2024 18:00:00 -0500</pubDate>
        <link>https://twocentstudios.com/2024/04/01/indie-game-devlog-04/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2024/04/01/indie-game-devlog-04/</guid>
        
        <category>indiegame</category>
        
        
      </item>
    
      <item>
        <title>Indie Game Devlog 03 - Experimental Character Design and Animation</title>
        <description>&lt;p&gt;In the last post, I had finished the blockout for our main level in 3D and did a very basic lighting pass. I also tested the limitations of material transfer between Blender and Godot.&lt;/p&gt;

&lt;p&gt;My player character being a big floating capsule wasn’t making it easy to ensure the proportions of the level are passible. Plus, I still didn’t know much about the very complex art of character modeling, rigging, and animation.&lt;/p&gt;

&lt;h2 id=&quot;my-background-in-character-design&quot;&gt;My background in character design&lt;/h2&gt;

&lt;p&gt;I have very limited history of designing characters as an adult.&lt;/p&gt;

&lt;p&gt;My first foray into reinterpreting an existing character in 3D was modeling Dory from my previous team Tabedori.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog03-01.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;My previous team&apos;s mascot Dory, from a coworker&apos;s original design&quot; title=&quot;My previous team&apos;s mascot Dory, from a coworker&apos;s original design&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;My previous team&apos;s mascot Dory, from a coworker&apos;s original design&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The unusual bamboo shoot body shape was an ambitious task for a beginner 3D modeler.&lt;/p&gt;

&lt;p&gt;I tried rigging Dory so that I could do some basic poses or even try an animation. But my first attempt failed and I shelved that stretch goal.&lt;/p&gt;

&lt;p&gt;Rigging is tough, and not particularly rewarding in my opinion. There are many ways to accomplish the same thing depending on how you’d like to use the rig, so it took me some time to find the &lt;em&gt;right&lt;/em&gt; YouTube tutorial to match my goals and skill level.&lt;/p&gt;

&lt;p&gt;Last year, I did a few other character projects. One was a full modeling, rigging, and animation project from a tutorial.&lt;/p&gt;

&lt;video src=&quot;/images/devlog03-02.mp4&quot; controls=&quot;&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;p&gt;The next was a self portrait, again based on the original 2D design by a friend.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog03-03.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Self portrait&quot; title=&quot;Self portrait&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Self portrait&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This all led up to my first original character design was a vampire rabbit named Biki for my iOS app &lt;a href=&quot;https://apps.apple.com/us/app/count-biki/id6463796779&quot;&gt;Count Biki&lt;/a&gt;.&lt;/p&gt;

&lt;video src=&quot;/images/count-biki-blender-animation-correct.mov&quot; controls=&quot;&quot; preload=&quot;none&quot; poster=&quot;/images/count-biki-blender-animation-correct-poster.png&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;p&gt;Biki was an ambitious project in that it not only was my first original character design, but it also required exporting the rigged and animated model from Blender into SceneKit on iOS.&lt;/p&gt;

&lt;p&gt;It took at least one major revision on the design to get something that looked like a rabbit instead of a hamster. I also cut scope by keeping Biki in a sitting position and only rigging his body, arms, head, and ears. Creating the animations was actually my favorite part. Overall, I’m pretty happy with the result. For more on this process, see &lt;a href=&quot;/2023/10/30/count-biki-app-and-character-design/&quot;&gt;Count Biki - App and Character Design&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All this is to say that I’m intentionally starting the character design, modeling, rigging, animation, and import/export process slowly, not aiming for full fidelity or even going beyond answering “what am I and what is Godot capable of?”.&lt;/p&gt;

&lt;h2 id=&quot;the-next-iteration-of-the-player-character&quot;&gt;The next iteration of the player character&lt;/h2&gt;

&lt;p&gt;I found a solid and succinct YouTube tutorial addressing Blender and Godot specifically: &lt;a href=&quot;https://www.youtube.com/watch?v=VasHZZyPpYU&quot;&gt;Godot 4 / Blender - Third Person Character From Scratch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I especially liked this tutorial because the rigging section was barebones enough for my to wrap my head around the fundamentals and plumbing of rigging within Blender for the first time. This is the first tutorial I’d seen that showed how to manually assign mesh vertices to bones instead of using automatic weights or weight painting. I finally understood the relationship between the armature and vertex groups, which makes it a lot easier to debug inevitable problems in the future.&lt;/p&gt;

&lt;h3 id=&quot;modeling&quot;&gt;Modeling&lt;/h3&gt;

&lt;p&gt;I wasn’t ready to commit to a character design until I’d finished a test run with this potential character pipeline. Therefore, I just wanted to find an existing design that was in the ballpark, and could throw away down the line.&lt;/p&gt;

&lt;p&gt;I randomly found a character turnaround of Trent from the late 90’s MTV show Daria and used that as my base for the low-poly model. This modeling part went pretty well. My thoughts at this point were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Should I keep limb components (e.g. upper arm, forearm) as separate meshes in my final design?&lt;/li&gt;
  &lt;li&gt;I need to find a lot of head references. My intuition for head shapes (even though I possess one) is way off.&lt;/li&gt;
  &lt;li&gt;How many bones should I use? Especially for hands, neck, and face.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog03-04.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Modeling low-poly from a character turnaround sheet&quot; title=&quot;Modeling low-poly from a character turnaround sheet&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Modeling low-poly from a character turnaround sheet&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;rigging&quot;&gt;Rigging&lt;/h3&gt;

&lt;p&gt;Next part was the dreaded rigging, although as mentioned above, it clicked more this time than it had in the past. I still don’t think I’ve internalized the process well enough to do it on my own without reference (especially doing IK), but I’m not planning on becoming a professional rigging artist so no problems there.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog03-05.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;No bones about it, this rig is ready to go&quot; title=&quot;No bones about it, this rig is ready to go&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;No bones about it, this rig is ready to go&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;animation&quot;&gt;Animation&lt;/h3&gt;

&lt;p&gt;Animation was next. I still find Blender’s &lt;em&gt;Action&lt;/em&gt;, &lt;em&gt;NLA Editor&lt;/em&gt;, &lt;em&gt;Dope Sheet&lt;/em&gt;, &lt;em&gt;F-Curve Editor&lt;/em&gt;, and other animation widgets intimidating, but following the tutorial helped avoid some complexity from the jump.&lt;/p&gt;

&lt;p&gt;I started on the walk cycle animation by following a classic walk cycle breakdown chart, but this walk was way too fast and intense for my character.&lt;/p&gt;

&lt;video src=&quot;/images/devlog03-06.mp4&quot; controls=&quot;&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;p&gt;Regardless, I wanted to press on to see the animation in context before polishing.&lt;/p&gt;

&lt;p&gt;Importing into Godot the first time was relatively pain free. I created an AnimationTree node and wired up a BlendSpace1D between the idle and walk animation.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog03-07.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Setting up the blend between idle and walk animations based on the player&apos;s velocity&quot; title=&quot;Setting up the blend between idle and walk animations based on the player&apos;s velocity&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Setting up the blend between idle and walk animations based on the player&apos;s velocity&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It technically worked, but the synchronization between the walk speed and animation speed left a lot to be desired.&lt;/p&gt;

&lt;p&gt;I obviously wasn’t satisfied with this walk, so I started over once, twice, three times, four times. Sometimes the joints would lock in weird ways. In general, all the steps felt &lt;em&gt;heavy&lt;/em&gt; in a way I couldn’t debug. I spent some time pacing around my apartment looking at my legs and trying to &lt;em&gt;walk normal&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I hit the point of diminishing returns and threw in the towel. Making all the movements less pronounced produced a slower and more casual walk, but it still wasn’t perfect. I learned that before I start &lt;em&gt;the real&lt;/em&gt; animation, I need to find some more animation reference books and budget time to practice.&lt;/p&gt;

&lt;p&gt;I saved my latest walk and moved back into Godot. This was where I hit a big roadblock. I had needed to make a new scene for my character in order to use AnimationTree because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AnimationTree requires an AnimationPlayer in the same scene.&lt;/li&gt;
  &lt;li&gt;AnimationPlayer is created as read-only from the Blender scene.&lt;/li&gt;
  &lt;li&gt;The scene root must be a CharacterBody3D.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Trying to untangle the web of dependencies in my head while Googling, I finally came up with a solution. If you’re interested in the details, it’s in a separate &lt;a href=&quot;/2024/03/18/characterbody3d-blender-godot-import/&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The new node configuration for my player scene allowed quick iteration on the walk cycle animation while tweaking the character.&lt;/p&gt;

&lt;video src=&quot;/images/devlog03-08.mp4&quot; controls=&quot;&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;p&gt;Still quite robotic, especially considering the low-poly look.&lt;/p&gt;

&lt;h3 id=&quot;reconsidering-the-player-controls&quot;&gt;Reconsidering the player controls&lt;/h3&gt;

&lt;p&gt;In context, having this animation in place also made me start reconsidering my player control scheme. With only a forward walk-cycle created, my side-strafing controls look weird: the legs are moving forward and backward while the character slides sideways.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Do I keep side-strafing as a control option (and therefore require more unique animations)?&lt;/li&gt;
  &lt;li&gt;Do I remove side-strafing controls completely, forcing the player to move their mouse to rotate the character in place before moving forward?&lt;/li&gt;
  &lt;li&gt;Do revise the control scheme so that pressing left both turns and moves the character that direction without affecting the camera?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m not ready to commit to a decision yet, so for now I’m going to keep the weird side-strafing animation.&lt;/p&gt;

&lt;video src=&quot;/images/devlog03-09.mp4&quot; controls=&quot;&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;h3 id=&quot;stop-motion-style-animation&quot;&gt;Stop-motion style animation&lt;/h3&gt;

&lt;p&gt;I started thinking about aesthetics again too. While watching YouTube tutorials for research into my next big task (face rigs), I rediscovered YouTuber SouthernShotty who does really great stylized characters and animation.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog03-10.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;An example of SouthernShotty&apos;s craft material style&quot; title=&quot;An example of SouthernShotty&apos;s craft material style&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;An example of SouthernShotty&apos;s craft material style&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;He wrote a &lt;a href=&quot;https://www.youtube.com/watch?v=u9ZPrrLDxsY&quot;&gt;Blender add-on&lt;/a&gt; that automates some steps in converting regular animation timing to stop-motion style animation. I wanted to give it a shot to see how it looked in context of my (very underbaked) game world.&lt;/p&gt;

&lt;p&gt;What is stop-motion style animation?&lt;/p&gt;

&lt;p&gt;By default, when you make an animation in Blender, you create keyframes along a timeline at critical poses. Each row represents a different &lt;em&gt;value&lt;/em&gt; of each of the character’s bones (e.g. x position, y rotation). In professional rigs there can be hundreds if not thousands of possible control points! In the dope sheet, it looks something like this:&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog03-11.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Keyframes in the dope sheet&quot; title=&quot;Keyframes in the dope sheet&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Keyframes in the dope sheet&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Blender then uses the default smooth F-curves to interpolate the unspecified keyframe values in between the values the animator explicitly set. This both saves the animator a lot of work while also allowing a smooth result by default. F-curves are nearly infinitely tweakable, and real animators will spend a significant amount of time going through control-point by control-point to get the timings &lt;em&gt;just&lt;/em&gt; right.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog03-12.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;F-curves show how Blender interpolates values between artist-defined keyframes&quot; title=&quot;F-curves show how Blender interpolates values between artist-defined keyframes&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;F-curves show how Blender interpolates values between artist-defined keyframes&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The F-curves are usually Bezier curves, but there’s no reason they can’t be linear or constant. Linear animation curves tend to look very &lt;em&gt;unnatural&lt;/em&gt; because very few things in the real world move with a constant velocity and then stop abruptly. Constant curves look &lt;em&gt;choppy&lt;/em&gt; because the poses jump at intervals slower than our eyes are capable of detecting.&lt;/p&gt;

&lt;p&gt;In classic stop-motion animation (or relatedly, hand-drawn animation), there’s no such thing as automatic easing. The animator must take a picture for each pose &lt;em&gt;and&lt;/em&gt; inbetween position between the poses. However, it’s generally considered prohibitively expensive to take a picture at rates that are “smooth” to the human vision system like 60 frames per second. Usually this type of animation alternates between 24 frames per second (reasonably smooth) and 12 frames per second (noticeably choppy).&lt;/p&gt;

&lt;p&gt;Although animating stop-motion at a nominal 12 frames per second can be a budgetary constraint, it’s often just as much an artistic choice. It produces an aesthetically pleasing and unique style of animation that, especially when the frame rate is varied with a professional eye, results in even more emotional impact for the viewer.&lt;/p&gt;

&lt;p&gt;It’s not only frame rate that produces the stop-motion style (as mentioned above, hand-drawn animation has the same fundamental limitation). Handing physical objects changes them in subtle ways between frames. With clay, it might be a thumbprint added between frames. With puppets, it might be a strands of hair moving unpredictably. All the randomness adds to the stop-motion vibe.&lt;/p&gt;

&lt;p&gt;SouthernShotty’s plugin tries to automate both the frame rate and random material adjustments. Since I haven’t decided on materials yet, I’m more focused on the frame rate adjustments.&lt;/p&gt;

&lt;h3 id=&quot;implementing-reduced-framerate-in-blender&quot;&gt;Implementing reduced framerate in Blender&lt;/h3&gt;

&lt;p&gt;The plugin works by simply adding a Stepped Interpolation modifier to the F-curve in Blender. This modifier locks in whatever position the original smoothly interpolated curve was at a specified frame interval.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog03-13.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;The Stepped Interpolation modifier and its result (in green)&quot; title=&quot;The Stepped Interpolation modifier and its result (in green)&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The Stepped Interpolation modifier and its result (in green)&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I could just as well manually create poses and keyframes every 2 frames of animation like a stop-motion animator would. But using the &lt;a href=&quot;https://docs.blender.org/manual/en/4.1/editors/graph_editor/fcurves/modifiers.html#stepped-interpolation-modifier&quot;&gt;Stepped Interpolation&lt;/a&gt; modifier gets most of the effect without most of the work. For a solo animator, if this can meet my self-imposed quality standards, it’s a big win. It also allows me to experiment with different frame rates just by changing a number from 2 to 3 instead of having to spend hours recreating the animation from scratch.&lt;/p&gt;

&lt;p&gt;With all that motivation outlined, I began applying the F-curve modifier to all channels and checking the result in the viewport. It looked interesting for sure.&lt;/p&gt;

&lt;h3 id=&quot;implementing-reduced-framerate-for-godot&quot;&gt;Implementing reduced framerate for Godot&lt;/h3&gt;

&lt;p&gt;However, when exported to Blender, it was clear the modifier wasn’t being applied. It wasn’t that surprising that modifiers in this corner of the Blender interface wouldn’t automatically be applied on export/import as opposed to object modifiers which are critical to most workflows.&lt;/p&gt;

&lt;p&gt;I needed to find a way to apply the modifier to the raw data so that Godot would read the results of the operation. And ideally there’d be a way to do so non-destructively, so I could continue to iterate on the less dense keyframe data.&lt;/p&gt;

&lt;p&gt;At the time was first investigating this, I was using Blender 4.0.2. At that time, the best I could do to bake the keyframes was:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apply the Stepped Interpolation modifier to all channels.&lt;/li&gt;
  &lt;li&gt;Use the Keys to Samples operator. This effectively removes the keyframes and replaces them with samples (honestly not really sure what this means under the hood).&lt;/li&gt;
  &lt;li&gt;Remove the modifier from all channels.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/devlog03-14.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;The result of applying Keys to Samples (notice the keyframe points are gone)&quot; title=&quot;The result of applying Keys to Samples (notice the keyframe points are gone)&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The result of applying Keys to Samples (notice the keyframe points are gone)&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Saving the animation will make the original keyframes unrecoverable, so it’s best to do this on a duplicate of the Action.&lt;/p&gt;

&lt;p&gt;Switching back over Godot and selecting the new animation, it’s working!&lt;/p&gt;

&lt;video src=&quot;/images/devlog03-15.mp4&quot; controls=&quot;&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;p&gt;By some stroke of luck, Blender 4.1 (just released the day I’m writing this) includes a new &lt;a href=&quot;https://docs.blender.org/manual/en/4.1/editors/graph_editor/channels/editing.html#bake-channels&quot;&gt;Bake Channels&lt;/a&gt; operator. This streamlines my use case slightly:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Stepped Interpolation modifier is no longer necessary.&lt;/li&gt;
  &lt;li&gt;Select all channels then select the Bake Channels operator.&lt;/li&gt;
  &lt;li&gt;From the options, choose the range of the animation, the desired step, and an interpolation type of constant.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, this is still a destructive operation, so duplicating the Action is still required.&lt;/p&gt;

&lt;p&gt;If I decide to use this workflow for most/all animations in my game, I’ll spend the time making a custom Blender plugin to automate this process. For now I’m happy enough with the manual process.&lt;/p&gt;

&lt;p&gt;I like this effect. It’s opinionated, and I think it will put a stake in the ground and help guide the aesthetics of the rest of the game. I’m already thinking about paper or wood textures to lean into the “real life” stop-motion vibe.&lt;/p&gt;

&lt;p&gt;In this example, I have the step set to 6 which is quite extreme! I’m not sure how far I’m going to push this yet. Starting on the extreme side and dialing back isn’t such a bad way to get things rolling.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;We’re definitely getting into more unfamiliar territory. It’s fun seeing these small steps of progress, but each step just reminds me how much more there is to discover before I even get the point where I need to go heads down churning out assets and content.&lt;/p&gt;

&lt;p&gt;Even though it could be considered a flourish, the next thing I’d like to explore is configurable/animatable face shapes for the characters. It turns out there are a lot of problems to solve in this workflow too!&lt;/p&gt;

&lt;p&gt;Until next time.&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Mar 2024 17:00:00 -0500</pubDate>
        <link>https://twocentstudios.com/2024/03/28/indie-game-devlog-03/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2024/03/28/indie-game-devlog-03/</guid>
        
        <category>indiegame</category>
        
        
      </item>
    
  </channel>
</rss>
