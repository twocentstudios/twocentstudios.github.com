<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>twocentstudios</title>
    <description>A coding blog covering iOS, Swift, and other programming topics.</description>
    <link>https://twocentstudios.com/</link>
    <atom:link href="https://twocentstudios.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 15 Apr 2025 03:26:33 -0500</pubDate>
    <lastBuildDate>Tue, 15 Apr 2025 03:26:33 -0500</lastBuildDate>
    <generator>Jekyll v3.9.3</generator>
    
      <item>
        <title>Train Tracker Devlog</title>
        <description>&lt;p&gt;Last month, I took a step back from development of my train timetables &lt;a href=&quot;/2024/07/27/eki-bright-tokyo-area-train-timetables&quot;&gt;iOS app Eki Bright&lt;/a&gt; to think about the app in a broader context. I’ve iterated on Version 1 on and off for nearly a year, with use cases emerging out of a basic feature set and evolving with my own daily usage of the app.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v1-7-marketing.png&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;Marketing screenshots for Eki Bright v1.7&quot; title=&quot;Marketing screenshots for Eki Bright v1.7&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Marketing screenshots for Eki Bright v1.7&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As a solo developer, it’s difficult to maintain a clear perspective about any given project as it grows. It’s a balance of having a strong vision but carefully allowing reality to gently guide that vision.&lt;/p&gt;

&lt;p&gt;All this is to say I spent some time thinking hard about what version 2 of Eki Bright would look like if I started over today. How could I optimize the app for the way I use it now? How can I entice potential users and provide value to new users immediately?&lt;/p&gt;

&lt;p&gt;If I stopped with version 1, as a user, I’d be relatively satisfied. I know how to navigate the app and work around the various UX speed bumps and oil slicks to achieve my goal of riding the train system here in Tokyo. I can overlook the problems in the app in ways a random iPhone user wouldn’t. I knowingly stopped short of perfection on a few feature implementations in favor of getting them shipped.&lt;/p&gt;

&lt;p&gt;I started to see a vision for how the app could work in a &lt;em&gt;progressive enhancement&lt;/em&gt; sort of way for the various use cases I’ve uncovered. I started to see how important it was to do as much heavy lifting in the app as possible. There’s always going to be tension between a “semi-pro” app that gives the user full control while also doing work on their behalf without asking.&lt;/p&gt;

&lt;p&gt;A key part of the vision for version 2 that emerged was that Eki Bright can be a lot smarter about understanding the user’s context. With location services, it should be possible to understand whether the user is walking to a train station and wants to know if they should run to get the next train, or whether they’re riding a train and want to know when they’ll arrive at their destination.&lt;/p&gt;

&lt;p&gt;I started by segmenting out users into part of an app usage lifecycle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What would make a iPhone user want to download the app in the first place? Why (if at all) are Tokyo residents unsatisfied with their current navigation apps?&lt;/li&gt;
  &lt;li&gt;For a first time user, what feature could act as an immediate hook/wedge to provide value with zero setup or explanation and remind them to come back again the next day?&lt;/li&gt;
  &lt;li&gt;For users who have seen consistent results, what motivation would they have to want to dig deeper and trade some customization effort to get significantly more value out of the app?&lt;/li&gt;
  &lt;li&gt;For users who have used the app consistently for some time, what features can be enhanced automatically based on usage history?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The features that make up this theoretical system are quite complicated! An interface that adapts to the kind of user, the user’s usage history, and the user’s current context was somewhat of a overwhelming task for me to take on all at once.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v2-feature-list.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Sketching out the lattice of features that could make up Eki Bright v2&quot; title=&quot;Sketching out the lattice of features that could make up Eki Bright v2&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Sketching out the lattice of features that could make up Eki Bright v2&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So after doing some brainstorming and pencil mockups, I decided to start prototyping a “hook” feature to capture that first segment of users: those who have not downloaded the app and first time users. A feature that is buzzy and attractive to prospective users, and is low touch and requires nearly zero configuration for first time users.&lt;/p&gt;

&lt;p&gt;That feature was a &lt;em&gt;train finder&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With the timetable data embedded in the app combined with live location data from the user’s device, I reasoned it should be possible to find the exact train a user was riding if they opened Eki Bright while enroute. If the app could do this, it’d cut down on the work necessary to unlock downstream benefits for the user like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Checking what time the train will arrive at a destination station&lt;/li&gt;
  &lt;li&gt;Setting an alarm for the destination station&lt;/li&gt;
  &lt;li&gt;Checking what other stations are stops along the way&lt;/li&gt;
  &lt;li&gt;Setting up a &lt;a href=&quot;/2025/01/24/eki-bright-the-case-for-diy-routing/&quot;&gt;DIY route&lt;/a&gt; to more thoroughly track a transfer&lt;/li&gt;
  &lt;li&gt;Sharing a route and arrival time to a friend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, I still intended the train finder feature to be part of Eki Bright. I imagined the user opening up the Eki Bright app along their journey, the app quickly booting up location services and narrowing down the possible railways and trains within a few seconds, and the user being able to quickly take some related actions from there.&lt;/p&gt;

&lt;p&gt;My friend David asked “why not have it run in the background so you don’t need to open the app?” I initially balked, not wanting to add background location tracking to Eki Bright due to its potential to be heavy on the device battery. I also couldn’t see how background tracking could streamline the experience beyond reducing that 1-2 second train calculation time with the tradeoff that all this work would waste battery in the cases the user never opened the app. The background activity idea stayed in the back of my mind though.&lt;/p&gt;

&lt;p&gt;I started prototyping the algorithm for turning a time-series of GPS coordinates into a railway, a direction on that railway, and ultimately a train.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-first-algorithm.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Thinking through an train tracking algorithm. This particular algorithm turned out to be a dud.&quot; title=&quot;Thinking through an train tracking algorithm. This particular algorithm turned out to be a dud.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Thinking through an train tracking algorithm. This particular algorithm turned out to be a dud.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After my first day working on the algorithm, I realized that it was going to require a lot iteration on real data from inside the various trains running all over Tokyo. It wasn’t reasonable to think I could ride a train all day with my iPhone and MacBook debugging the algorithm on live data.&lt;/p&gt;

&lt;p&gt;I therefore spent a day creating an app for collecting sessions of GPS coordinates. This has turned out to be a huge boon for development efficiency.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/gps-collector-screens.jpg&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;GPS collector app I created and used to get batches of real data from the field&quot; title=&quot;GPS collector app I created and used to get batches of real data from the field&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;GPS collector app I created and used to get batches of real data from the field&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This personal-use GPS Collector app allows me to collect raw data from Core Location in the background and annotate it while riding the various routes I take around the Tokyo area. I divide each trip up into a &lt;em&gt;session&lt;/em&gt;, then manually annotate the session with the railway, direction, departure station, and arrival station to serve as ground truth annotations. I allow exporting in GPX format (for usage within Xcode) and as JSON I can import into and decode with other apps.&lt;/p&gt;

&lt;p&gt;Seeing the raw data revealed a litany of edge cases my algorithm would need to handle. First off, any train that goes underground is a non-starter for a GPS-reliant system; I’d have to make peace with that fact for now. Core Location data includes speed and heading, which is useful, but is itself a derived value and can be gleaned from other sources. GPS accuracy will sometimes plummet temporarily inside the boundaries of a station and sometimes randomly inside dense city limits. Waypoints are usually returned one-per-second, but sometimes will cut out for seconds or minutes. Some trains go from underground to above ground at least once along their designated route.&lt;/p&gt;

&lt;p&gt;I spent a week or so collecting GPS data while working on other apps. I returned to Eki Bright to finish up a first draft of an algorithm that took an entire time-series of GPS data and returned a ranked list of candidates: a railway, the direction on that railway, and the previous and next station.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RidingTrainFinderCandidate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;railway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Railway&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RailDirection&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previousStation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Station&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nextStation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Station&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// let train: TrainTimetable -- TODO: determine which train&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I added a debug viewer to visualize how my algorithm was responding to test data as it was played back. It was mostly working! It was also kind of fun to watch the playback. Being able to throw together a view like this for the sole purpose of debugging an algorithm is a huge win for SwiftUI.&lt;/p&gt;

&lt;video src=&quot;/images/train-tracker-debug-view-01.mp4&quot; controls=&quot;&quot; poster=&quot;/images/train-tracker-debug-view-01.png&quot; preload=&quot;none&quot; height=&quot;400&quot;&gt;&lt;/video&gt;

&lt;p&gt;I’d hit a development checkpoint, and as cool as my little debug tracker view was, I was still far from a shippable feature that solved a real problem. My next step was extending the algorithm to guess which train the user was on (not exactly a straightforward algorithm to write based on the shape of my train timetable data).&lt;/p&gt;

&lt;p&gt;However, I thought back to my friend David’s remark about an app that works in the background. I thought, if I freed myself from the artificial constraints of Eki Bright as it currently existed, how could this algorithm still be useful?&lt;/p&gt;

&lt;p&gt;A new vision emerged of an app that solved a much shallower problem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sometimes when I’m on a crowded train and I’ve got my headphones in, it’s hard to tell what station I’m approaching. I can’t see the display above the train car door or out the window.&lt;/li&gt;
  &lt;li&gt;What if I had a Live Activity in my Dynamic Island that updated live as I stopped at or passed each station along a railway?&lt;/li&gt;
  &lt;li&gt;And what if I didn’t have to manually select what railway I was on and what direction I was going?&lt;/li&gt;
  &lt;li&gt;Better yet, what if I &lt;em&gt;didn’t even have to open the app&lt;/em&gt; and the Live Activity would automatically appear when I was riding a train and disappear when I got off?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I could pull it off, this feature would be supplemental to any other navigation app. It also has a bit of “cool technology” vibe to it that could entice a download and serve as a conversation piece.&lt;/p&gt;

&lt;p&gt;Realizing this new vision came with its own new implementation challenges.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Monitor significant location changes in the background to save battery life, then switch to live location monitoring when moving at train speeds.&lt;/li&gt;
  &lt;li&gt;Detect the railway and railway direction.&lt;/li&gt;
  &lt;li&gt;Continuously update which stations have been visited and passed, and which station is next on the railway, even if it’s far away.&lt;/li&gt;
  &lt;li&gt;Start a Live Activity in the background when confidence in the current railway is high enough.&lt;/li&gt;
  &lt;li&gt;Update the Live Activity as the user approaches, arrives at, and departs a station.&lt;/li&gt;
  &lt;li&gt;End the Live Activity and switch back to monitoring significant location changes once the user has alighted their train.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I knew that significant location changes, app background activity, and the way each of these system features interacts with the relatively new (iOS 16+) Live Activities API was going to pose as the biggest risk to executing the seamless zero-touch app experience I envisioned.&lt;/p&gt;

&lt;p&gt;I started by creating a new app project and creating a GRDB-backed event logging system. Next, I configured the app to request background location permission. I then created the bones of a location tracking algorithm that preserved battery life. I logged app lifecycle events and events for my location tracking algorithm to ensure I could quickly debug why the app was or wasn’t “waking up” or “sleeping” when I expected it to while out in the field.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-app-events.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Log of app events so I can verify background behavior&quot; title=&quot;Log of app events so I can verify background behavior&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Log of app events so I can verify background behavior&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next big task was reimagining my existing railway-finding algorithm for a different system lifecycle. This also meant I needed to pare down my very large train timetable static database for this new use case. I only needed the list of railways and stations. I followed a similar development flow as last time; I created a couple new debug views to view the live GPS waypoints and follow these waypoints on a map alongside the train tracking algorithm outputs.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-waypoints-view.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Raw waypoints view to allow confirmation of incoming data&quot; title=&quot;Raw waypoints view to allow confirmation of incoming data&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Raw waypoints view to allow confirmation of incoming data&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I started with a version that played back existing GPS data. A dashboard view showed just the user-facing data: the detected railway and “focus” station.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-debug-dashboard.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;A debug view that plays back previously captured GPS data at variable speed and shows user-facing data&quot; title=&quot;A debug view that plays back previously captured GPS data at variable speed and shows user-facing data&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A debug view that plays back previously captured GPS data at variable speed and shows user-facing data&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There was also a list view showing the scores assigned by the algorithm and used to determine the ultimate result shown to the user.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-debug-list.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;The derived scores used by the algorithm to determine what railway and focus station is shown to the user&quot; title=&quot;The derived scores used by the algorithm to determine what railway and focus station is shown to the user&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The derived scores used by the algorithm to determine what railway and focus station is shown to the user&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, once I was satisfied with the algorithm accuracy on the snapshot data, I migrated this view to use only live device data.&lt;/p&gt;

&lt;p&gt;Watching the algorithm run live was exciting. I felt like I’d hit another checkpoint as the device would wake up and start gathering GPS data in the background, then start showing me which railway I was on and which station was next as soon as I opened it.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-debug-live-tracking.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Same as above but using live GPS data&quot; title=&quot;Same as above but using live GPS data&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Same as above but using live GPS data&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With a basic (but admittedly incomplete) tracking algorithm proven, the last piece of the puzzle I needed to de-risk was starting the Live Activity automatically in the background. Unfortunately this is where I hit a frustrating roadblock.&lt;/p&gt;

&lt;p&gt;In a careful scan of the lengthy &lt;a href=&quot;https://developer.apple.com/documentation/activitykit/displaying-live-data-with-live-activities#Review-Live-Activity-presentations&quot;&gt;Live Activities documentation&lt;/a&gt;, I found the line:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your app can only start Live Activities while it’s in the foreground. However, you can update or end a Live Activity from your app while it runs in the background.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I confirmed this artificial limitation by attempting it and logging errors in my event tracking database.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;LiveActivities Error: The operation couldn’t be completed. Target is not foreground&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I felt like requiring the user to open the app each time they wanted the live activity to run – even if it was as simple as opening and immediately closing the app – would be too tedious an ask as a prerequisite for daily usage.&lt;/p&gt;

&lt;p&gt;Before I neutered my vision or gave up on the idea entirely, I had one card left up my sleeve. From the documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Starting with iOS 17.2 and iPadOS 17.2, you can also start Live Activities with ActivityKit push notifications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So a push notification from a server can start a Live Activity without being initiated by a user (as I’d personally experienced with the Apple Sports app), but for some reason it can’t be started by the device itself? Strange, but since my app is already running in the background, I could technically fire off a network request to my own server with the data I wanted to start the Live Activity with and use my server as a pseudo-proxy to start a Live Activity. It feels like a loophole, but perhaps it’s simply a case of an Apple product manager not re-evaluating an initial safeguard after changing a related feature.&lt;/p&gt;

&lt;p&gt;Setting up push notifications is &lt;em&gt;involved&lt;/em&gt;. I really did not want to be on the hook for maintaining another set of dependencies, but it was the only option left on the table.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aside: is it possible to send a push notification directly from a device instead of through an intermediary server controlled by the developer? In other words, could the device send a request to the APNS server directly that would send a push notification right back to it? In theory it seems possible, with the big security downside that the p8 key would need to be included in plain text within the app bundle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ll leave the long debug story of how I got push notifications working for another time, but after a couple days of development, I confirmed that I could indeed start a Live Activity from the background using an intermediary server.&lt;/p&gt;

&lt;p&gt;Whether or not the App Store app review team considers this to be a permitted workaround is still a huge risk. I’m not sure how I can determine their stance without finishing up version 1 of the app and submitting it for review. Even an unfinished version going through Test Flight review isn’t a guarantee App Store review will also approve.&lt;/p&gt;

&lt;p&gt;So this is my current checkpoint: a new app binary with lot of debug screens that starts and updates Live Activities from the background as the user rides a railway in Tokyo.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-proto-live-activity.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Prototype version of the working train tracker Live Activity on the lock screen&quot; title=&quot;Prototype version of the working train tracker Live Activity on the lock screen&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Prototype version of the working train tracker Live Activity on the lock screen&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-proto-dynamic-island.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Prototype version of the working train tracker Live Activity in the Dynamic Island&quot; title=&quot;Prototype version of the working train tracker Live Activity in the Dynamic Island&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Prototype version of the working train tracker Live Activity in the Dynamic Island&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My plan is to release this app standalone. How it fits into the existing and future Eki Bright vision isn’t yet determined. Perhaps the train tracker app is a free marketing driver for Eki Bright. Perhaps the train tracker app evolves separately from Eki Bright and eventually obsoletes Eki Bright. I’m not sure, but my instinct is to test it in the market in isolation first.&lt;/p&gt;

&lt;p&gt;What do I need to finish up in order to ship?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improve the algorithm to determine the correct railway faster, handle transfers, and off-board seamlessly.&lt;/li&gt;
  &lt;li&gt;Improve the design of the Live Activity.&lt;/li&gt;
  &lt;li&gt;Remove the debug screens and rework the in-app UI for onboarding, settings, and simple monitoring.&lt;/li&gt;
  &lt;li&gt;Create branding and add all the required info for the App Store.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m getting faster at getting through this part of the process, but it still takes time. However, I do feel some accomplishment in having semi-efficiently prototyped enough to de-risk this project.&lt;/p&gt;

&lt;p&gt;I’m planning to write a few technical posts that detail the caveats of Live Activities once I’m more confident in the robustness of my implementation. Until then.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Apr 2025 12:06:00 -0500</pubDate>
        <link>https://twocentstudios.com/2025/04/15/train-tracker-checkpoint-devlog/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/04/15/train-tracker-checkpoint-devlog/</guid>
        
        <category>ekibright</category>
        
        <category>ios</category>
        
        
      </item>
    
      <item>
        <title>8-bit Nails Plus</title>
        <description>&lt;p&gt;I’ve released 8-bit Nails v1.1 to the App Store. It includes some new features alongside a one-time in-app purchase to unlock them.&lt;/p&gt;

&lt;p&gt;In this post I want to share some notes about the new features and my decision to add an in-app purchase.&lt;/p&gt;

&lt;h2 id=&quot;in-app-purchase&quot;&gt;In-App Purchase&lt;/h2&gt;

&lt;p&gt;A previously released app Count Biki includes in-app purchases but only as a tip that unlocks alternate app icons (admittedly no longer as popular as a perk as they once were). I wanted to start my indie app business journey by testing the waters with tip-based payment before trying other business models.&lt;/p&gt;

&lt;p&gt;Unfortunately, Count Biki hasn’t had enough traffic to even begin to get the purchase funnel going. I’d probably need hundreds of thousands or even millions of users to generate any sort of revenue via the voluntary tipping model.&lt;/p&gt;

&lt;p&gt;8-bit Nails is also a pretty simple app. It’s not a utility that assists users in accomplishing a specific goal, so it’s hard to justify a large price tag, especially a subscription. Perhaps I’m still undervaluing the app and will need to re-evaluate the business model again, but for now, I decided to add a single one-time purchase for “8-bit Nails Plus” which unlocks all the features of the app at once, forever.&lt;/p&gt;

&lt;p&gt;The purchase screen is the image below. It’s a standard layout but I tried to make it a little flashy. I think it could be improved with some more illustrative images beneath each benefit.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eight-bit-nails-purchase-screen.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;8-bit Nails Plus purchase screen&quot; title=&quot;8-bit Nails Plus purchase screen&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;8-bit Nails Plus purchase screen&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;v1.0 of the app allowed users to create unlimited nail sets. However, from v1.1 onwards, users will need to purchase Plus to create more than 5 nail sets. Any users that already have more than 5 (I don’t think there’s any) will need to purchase Plus before they can add more.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eight-bit-nails-list-upsell.jpg&quot; width=&quot;&quot; height=&quot;200&quot; alt=&quot;Plus upsell on the home screen&quot; title=&quot;Plus upsell on the home screen&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Plus upsell on the home screen&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m hoping that creating 5 nail sets is a good signal that users are enjoying the app and are willing to pay to continue. (I also started prompting for a review after users add their 3rd nail set). Limiting the main resource of the app doesn’t sit well with me, but it’s something I have to experiment with in this early stage.&lt;/p&gt;

&lt;h2 id=&quot;widgets&quot;&gt;Widgets&lt;/h2&gt;

&lt;p&gt;Plus users can add a widget to their home screen or Today View. The widget shows their current nails. As Apple has opened up the iOS home screen more and more, iOS users have gotten more comfortable personalizing and decorating the home screen beyond simply having rows of apps.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eight-bit-nails-latest-nails-widget.jpg&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;Latest nails widget&quot; title=&quot;Latest nails widget&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Latest nails widget&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;canvas-resizing&quot;&gt;Canvas resizing&lt;/h2&gt;

&lt;p&gt;I added the ability for Plus users to resize the canvas. This was a suggestion from a user who noted that the default 10w by 16h canvas didn’t allow for designs with a center line. I decided to include 4 options with similar aspect ratios: small and large, each with a odd/even variant.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eight-bit-nails-canvas-resizing.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Canvas resizing screen&quot; title=&quot;Canvas resizing screen&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Canvas resizing screen&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I was hesitant to introduce image resizing because it can be very disruptive to the image if you’ve already “completed” your design. There’s a balance between forcing users to choose a canvas size before they start drawing and know what it means, and waiting until it’s too costly to change it. In the end, I made the preview screen so users could see what the result would be before deciding to irreversibly alter the canvas size.&lt;/p&gt;

&lt;p&gt;The rescaling algorithm is nearest-neighbor which makes sense for pixel art. I was also considering adding an option for clipping, but it’s hard to imagine the cases where clipping makes more sense.&lt;/p&gt;

&lt;p&gt;Under the hood, the app technically supports any canvas size, but there are a lot of assumptions based on the aspect ratio of nails. Therefore I wanted to keep it limited for now. Also, too large a canvas and touch drawing gets too difficult and time consuming.&lt;/p&gt;

&lt;h2 id=&quot;list-layout&quot;&gt;List layout&lt;/h2&gt;

&lt;p&gt;I made some changes to the layout of the nails list. The share and view large buttons were hidden and I wanted to make sure it was easy for users to access them. It makes the home screen a little more cluttered, but I feel okay about shifting the balance a bit towards usability and discoverability.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eight-bit-nails-list-layout.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Nails list with buttons pulled out beneath the row&quot; title=&quot;Nails list with buttons pulled out beneath the row&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Nails list with buttons pulled out beneath the row&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rendering-improvements&quot;&gt;Rendering improvements&lt;/h2&gt;

&lt;p&gt;As discussed in detail in my previous post &lt;a href=&quot;/2025/03/10/pixel-art-swift-ui/&quot;&gt;Rendering Pixel Art with SwiftUI&lt;/a&gt;, I made some improvements to the rendering for nails across the app. Users will see less anti-aliasing artifacts, especially in share images.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eight-bit-nails-share-render.png&quot; width=&quot;&quot; height=&quot;200&quot; alt=&quot;Share images look nicer&quot; title=&quot;Share images look nicer&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Share images look nicer&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;There are a few other features I’m considering adding like allowing nail outline customization or share image customization. But I’m going to wait for user feedback before any more overboard with guesses about what will drive downloads and usage (and revenue).&lt;/p&gt;

&lt;p&gt;I’m planning to start uploading some videos to social media of me painting some nails with the app as a way to get the word out about the app. I haven’t experimented with ads or social media marketing yet and I think this could be a good opportunity to get started.&lt;/p&gt;

&lt;p&gt;My other goal with adding a non-consumable in-app purchase (i.e. one-time unlock) was to have a reusable implementation for other apps. Working with StoreKit and testing all scenarios is complex and time consuming. I’m banking on this upfront work decreasing the time to add payments to future apps significantly.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Mar 2025 18:00:00 -0500</pubDate>
        <link>https://twocentstudios.com/2025/03/12/8-bit-nails-plus/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/03/12/8-bit-nails-plus/</guid>
        
        <category>8bitnails</category>
        
        <category>ios</category>
        
        
      </item>
    
      <item>
        <title>Rendering Pixel Art with SwiftUI</title>
        <description>&lt;p&gt;The main challenge of rendering pixel art is maintaining crisp pixel boundaries when scaling the tiny bitmap to modern displays with lots of pixels.&lt;/p&gt;

&lt;h2 id=&quot;rendering-from-a-native-image&quot;&gt;Rendering from a native &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;If you already have an pixel art image you’d like to display in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIImage&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGImage&lt;/code&gt;, etc.) format (e.g. a PNG in your asset catalog or downloaded from a server), add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.interpolation(.none)&lt;/code&gt; modifier to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NativeImageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color-image-10-10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 10x10 PNG in Assets.xcassets&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interpolation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- important&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resizable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scaledToFit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#Preview(&quot;NativeImageView&quot;, traits: .sizeThatFitsLayout) {&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;NativeImageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/pixel-art-native-interpolation.png&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;With and without interpolation applied to an existing pixel art image&quot; title=&quot;With and without interpolation applied to an existing pixel art image&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;With and without interpolation applied to an existing pixel art image&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;bitmap-model&quot;&gt;Bitmap Model&lt;/h2&gt;

&lt;p&gt;Imagine you want to manipulate color data directly instead of using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGImage&lt;/code&gt; as the container.&lt;/p&gt;

&lt;p&gt;Let’s start by creating a simple struct to hold our bitmap data.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sendable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Access via `values[row][column]`&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; 

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aspectRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next let’s add a few ways to create a bitmap for testing:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bitmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;initialColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;repeating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;repeating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialColor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;repeating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;repeating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mockGrid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;black&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mockRowColors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;repeating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;saturation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;brightness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;rendering-options&quot;&gt;Rendering options&lt;/h2&gt;

&lt;p&gt;There are two ways to render the bitmap: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Canvas&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image&lt;/code&gt; allows you to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image&lt;/code&gt;-specific modifiers to further manipulate the view.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image&lt;/code&gt; encodes its native size, making it simpler to apply an aspect ratio.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Canvas&lt;/code&gt; draws directly to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GraphicsContext&lt;/code&gt; at the size provided by the parent view.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Canvas&lt;/code&gt; allows you to draw additional elements like dividers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rendering-as-image&quot;&gt;Rendering as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BitmapImageView&lt;/code&gt; will render the bitmap. It works by using the &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/image/init(size:label:opaque:colormode:renderer:)&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image(size:label:opaque:colorMode:renderer:)&lt;/code&gt;&lt;/a&gt; initializer for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image&lt;/code&gt; that allows writing directly to the image via a SwiftUI &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GraphicsContext&lt;/code&gt; instance.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BitmapImageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bitmap&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;opaque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;colorMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonLinear&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cellWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cellHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                            &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellHeight&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interpolation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resizable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scaledToFit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;size&lt;/strong&gt; of the image is small; exactly the number of pixels specified in our bitmap. The other parameters are the defaults.&lt;/p&gt;

&lt;p&gt;We loop through the bitmap contents and write each value as a one-point size rectangle in the graphics context.&lt;/p&gt;

&lt;p&gt;With the resulting image, we can now apply the usual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image&lt;/code&gt;-specific modifiers.&lt;/p&gt;

&lt;p&gt;The secret sauce is using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.interpolation(.none)&lt;/code&gt; modifier to preserve the hard edges when the tiny image is scaled up to retina display sizes.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/pixel-art-image-interpolation.png&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;With and without interpolation applied to the tiny bitmap&quot; title=&quot;With and without interpolation applied to the tiny bitmap&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;With and without interpolation applied to the tiny bitmap&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.resizable&lt;/code&gt; makes the image expand to fill the parent.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.scaledToFit&lt;/code&gt; preserves the square pixels. It’s the equivalent of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.aspectRatio(bitmap.aspectRatio, contentMode: .fit)&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.aspectRatio(nil, contentMode: .fit)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is a SwiftUI Preview to show our final result:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#Preview(&quot;BitmapImageView&quot;, traits: .sizeThatFitsLayout) {&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;BitmapImageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mockGrid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;rendering-as-canvas&quot;&gt;Rendering as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Canvas&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BitmapCanvasView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bitmap&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;opaque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;nv&quot;&gt;colorMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonLinear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;nv&quot;&gt;rendersAsynchronously&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cellWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cellHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                            &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellHeight&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eoFill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;antialiased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aspectRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pectRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contentMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Unlike the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image&lt;/code&gt; implementation, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GraphicsContext&lt;/code&gt; within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Canvas&lt;/code&gt; implementation is drawing at whatever size the parent specifies.&lt;/p&gt;

&lt;p&gt;The secret sauce in this version specifying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;antialiased: false&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FillStyle(eoFill:antialiased:)&lt;/code&gt; parameter. With the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, certain non-integer sizes will render with randomly sized dividers.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/pixel-art-canvas-interpolation.png&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;With and without interpolation inside the `fill` command&quot; title=&quot;With and without interpolation inside the `fill` command&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;With and without interpolation inside the `fill` command&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Adding the specific &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aspectRatio&lt;/code&gt; modifier ensures the view renders with square pixels.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#Preview(&quot;BitmapCanvasView&quot;, traits: .sizeThatFitsLayout) {&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;BitmapCanvasView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mockRowColors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;409&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Forcing this width will show antialiasing artifacts &lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;rendering-as-canvas-with-dividers&quot;&gt;Rendering as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Canvas&lt;/code&gt; with dividers&lt;/h3&gt;

&lt;p&gt;One reason you might want to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Canvas&lt;/code&gt; is to draw dividers showing the pixel boundaries.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BitmapDividersView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bitmap&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lineWidthRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.05&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ratio of cell size&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lineColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;opaque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;colorMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonLinear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;rendersAsynchronously&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cellWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cellHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                            &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellHeight&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eoFill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;antialiased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lineWidthRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lineColor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lineWidthHorizontal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineWidthRatio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellHeight&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lineWidthVertical&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineWidthRatio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellWidth&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;linePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lineColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lineWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineWidthHorizontal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;linePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lineColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lineWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineWidthVertical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aspectRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pectRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contentMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#Preview(&quot;BitmapDividersView&quot;, traits: .sizeThatFitsLayout) {&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;BitmapDividersView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mockRowColors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;409&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/pixel-art-canvas-dividers.png&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Adding dividers to the bitmap rendering&quot; title=&quot;Adding dividers to the bitmap rendering&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Adding dividers to the bitmap rendering&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above implementation draws dividers between rows and columns if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lineColor&lt;/code&gt; is specified in the initializer.&lt;/p&gt;

&lt;p&gt;I’ve implemented &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lineWidthRatio&lt;/code&gt; as a percentage of the cell width. It will scale somewhat naturally with the view size.&lt;/p&gt;

&lt;p&gt;Note: this does not draw the outer border intentionally. If you need the outer border, it’s better to draw it using SwiftUI modifiers because inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GraphicsContext&lt;/code&gt; callback, borders are drawn with half their width on each side of the path. This means that only half the outer borders will be visible if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Canvas&lt;/code&gt; is clipping.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/pixel-art-title.png&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;Adding dividers and a border to the bitmap rendering&quot; title=&quot;Adding dividers and a border to the bitmap rendering&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Adding dividers and a border to the bitmap rendering&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#Preview(&quot;BitmapDividersViewWithBorder&quot;, traits: .sizeThatFitsLayout) {&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;BitmapDividersView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mockRowColors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It’s also reasonable to draw the dividers into a separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Canvas&lt;/code&gt; instance (with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opaque: false&lt;/code&gt;) and overlay it using the standard SwiftUI tools. However, it will be slower (albeit imperceptibly so for most use cases) since SwiftUI will have to do the compositing again.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Mar 2025 06:08:00 -0500</pubDate>
        <link>https://twocentstudios.com/2025/03/10/pixel-art-swift-ui/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/03/10/pixel-art-swift-ui/</guid>
        
        <category>8bitnails</category>
        
        <category>ios</category>
        
        <category>apple</category>
        
        
      </item>
    
      <item>
        <title>Core Image Labo - Open Source iOS App for Core Image Experimentation</title>
        <description>&lt;p&gt;I wrote an iOS app called Core Image Labo for experimenting with &lt;a href=&quot;https://developer.apple.com/documentation/coreimage&quot;&gt;Core Image&lt;/a&gt; filters. It was a “weekend project” in service of a more fully-featured upcoming video-shooting app. I decided to clean it up and release on the App Store and as open source with an MIT license.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open source on &lt;a href=&quot;https://github.com/twocentstudios/coreimagelab&quot;&gt;GitHub - Core Image Labo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Available on the &lt;a href=&quot;https://apps.apple.com/us/app/core-image-labo/id6742433427&quot;&gt;App Store - Core Image Labo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/core-image-labo-marketing.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Marketing screenshots for Core Image Labo&apos;s v1.0 release&quot; title=&quot;Marketing screenshots for Core Image Labo&apos;s v1.0 release&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Marketing screenshots for Core Image Labo&apos;s v1.0 release&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You first set up a global input image (or use the default), and optionally a global background/target image (these are used for composite and transition filter types, respectively).&lt;/p&gt;

&lt;p&gt;Then you can add any number of CIFilters from the list of supported filters. I was most interested in filters with numerical inputs you could control via sliders, so that’s what I’ve implemented first.&lt;/p&gt;

&lt;p&gt;The other input types are slightly more complex (but very much reasonable) to model in UI like &lt;a href=&quot;https://developer.apple.com/documentation/coreimage/civector&quot;&gt;CIVector&lt;/a&gt; and &lt;a href=&quot;https://developer.apple.com/documentation/corefoundation/cgaffinetransform&quot;&gt;CGAffineTransform&lt;/a&gt;, and I don’t personally need to experiment with any of those filters at the moment, so I’ve held off on implementing support for them for v1.0.&lt;/p&gt;

&lt;p&gt;Finally, there are some simple tools for exporting the filtered image you see in the preview and a JSON file containing values for the filters used.&lt;/p&gt;

&lt;p&gt;I made an icon using Figma’s vector tools. Lately I’ve been using Blender to make icons in 3D, but I’ve been realizing that 3D-rendered images actually require some de-rendering to make them more illustrative and easier to read in the small pixel format of an app icon. For this side project, it was a lot faster to start from a 2D vector and render with simple shapes and color fills.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/core-image-labo-app-icon.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Core Image Labo&apos;s app icon created in Figma&quot; title=&quot;Core Image Labo&apos;s app icon created in Figma&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Core Image Labo&apos;s app icon created in Figma&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are already a few very robust tools for working with Core Image on macOS. Writing code helps me learn though, and it was nice to have my own sandbox to experiment with to (re)learn Core Image. I figured it might be useful to some other devs to have an open source base to work from in case they’re doing something unique that isn’t supported by the other commercial apps.&lt;/p&gt;

&lt;p&gt;If you’re a dev working with Core Image, give it a go and contribute a feature or a bug fix if you can.&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Feb 2025 09:22:00 -0600</pubDate>
        <link>https://twocentstudios.com/2025/02/25/core-image-labo/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/02/25/core-image-labo/</guid>
        
        <category>coreimagelabo</category>
        
        <category>app</category>
        
        <category>ios</category>
        
        <category>apple</category>
        
        
      </item>
    
      <item>
        <title>Eki Bright - Open Data Challenge for Public Transportation 2024 Entry</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://twocentstudios.com/2024/07/27/eki-bright-tokyo-area-train-timetables/&quot;&gt;Eki Bright&lt;/a&gt;, my iOS app for train timetables in the Tokyo metropolitan area, uses data from the &lt;a href=&quot;https://www.odpt.org/&quot;&gt;Public Transportation Open Data Center&lt;/a&gt; (ODPT). ODPT recently concluded their 5th contest, &lt;a href=&quot;https://challenge2024.odpt.org/index-e.html&quot;&gt;Open Data Challenge for Public Transportation 2024&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We look forward to enthusiastic challenges from developers around the globe, aiming to create new services utilizing this data, solve social issues, and drive regional revitalization.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post is a short retrospective on my participation.&lt;/p&gt;

&lt;p&gt;I had already started work on Eki Bright months before the challenge was announced. My aim for the app was always to optimize the daily experience of seasoned train riders in Tokyo. But I decided it wouldn’t hurt to participate in the contest.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://challenge2024.odpt.org/index-e.html#:~:text=Data%20Challenge%202024-,Past%20Grand%20Prizes,-1st%0ATokyo%20Trains&quot;&gt;past winners&lt;/a&gt; had various themes and target users. Some maps, some straightforward apps like mine, some chat bots. Most weren’t particularly well designed, so I thought the modern iOS look of Eki Bright could help it stand out.&lt;/p&gt;

&lt;p&gt;The entry submission deadline was January 17th and the final ceremony was February 15th, 2025. I submitted Eki Bright version 1.7.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v1-7-marketing.png&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;Marketing screenshots for Eki Bright v1.7&quot; title=&quot;Marketing screenshots for Eki Bright v1.7&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Marketing screenshots for Eki Bright v1.7&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, the contest submission required a lot more than just the app. I spent valuable time creating a PDF introduction of the app’s features and benefits, a &lt;a href=&quot;https://youtu.be/YBhdSvepFB0&quot;&gt;2-minute marketing video&lt;/a&gt;, an instruction manual, an additional 3-minute deck for a pre-judging, and did a 10-minute interview with a few judges.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-contest-introduction-pdf.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Introduction deck for Eki Bright&quot; title=&quot;Introduction deck for Eki Bright&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Introduction deck for Eki Bright&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The upside was that, up until this point, I hadn’t &lt;em&gt;really&lt;/em&gt; sat down and spent time polishing my marketing message for the app. The app’s use case had evolved over the months of development and it wasn’t clear to me how to sell it to prospective users.&lt;/p&gt;

&lt;p&gt;In the end, there were ~500 entries and 17 finalists. I wasn’t selected but attended the final presentations and awards ceremony. I understood &lt;a href=&quot;https://challenge2024.odpt.org/award.html&quot;&gt;based on the finalists and winners&lt;/a&gt; why Eki Bright wasn’t what the judges were looking for. Translated from the &lt;a href=&quot;https://www.odpt.org/2025/02/17/%e3%80%8c%e5%85%ac%e5%85%b1%e4%ba%a4%e9%80%9a%e3%82%aa%e3%83%bc%e3%83%97%e3%83%b3%e3%83%87%e3%83%bc%e3%82%bf%e3%83%81%e3%83%a3%e3%83%ac%e3%83%b3%e3%82%b82024-powered-by-project-links-%e3%80%8d/&quot;&gt;announcement post&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In addition, many of the entries themselves were rich in policy suggestions, not only for solutions that improve transportation convenience, but also for solutions that address recent issues in Japan, such as eliminating “transportation vacancies,” improving business productivity, and coordinating with urban development.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eki Bright is aiming to solve similar problems as existing transportation utilities from a different angle. It’s not intended to be a research project or a prototype for a hypothetical user problem, and my submission materials didn’t try to present it as such. Prior to the pre-judging interview (and probably after) the judges had not downloaded Eki Bright, so none of the creature comforts of a well-crafted iOS app would be apparent to them.&lt;/p&gt;

&lt;p&gt;With hindsight I shouldn’t have spent time on the submission. But with the information I had at the time, it made sense to gamble some time for the chance of wider exposure for Eki Bright or even some of the prize money.&lt;/p&gt;

&lt;p&gt;Regardless of the disappointing result for Eki Bright, it was still a great experience. I liked seeing the other entries and I like the winner  &lt;a href=&quot;https://nishikata-tokotoko.github.io/cycle-shortcut-map/&quot;&gt;Cycle-Shortcut&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that I’m unblocked by some of the entry requirements of the contest, I have some next steps lined up for Eki Bright and I’m looking forward to getting started on it again.&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Feb 2025 06:22:00 -0600</pubDate>
        <link>https://twocentstudios.com/2025/02/18/open-data-challenge-entry/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/02/18/open-data-challenge-entry/</guid>
        
        <category>ekibright</category>
        
        
      </item>
    
      <item>
        <title>8-bit Nails - Pixel Art Nail Diary</title>
        <description>&lt;p&gt;This week I released 8-bit Nails. It’s a light-hearted app for nail painting enthusiasts to express their creativity through pixel art and document their manicures.&lt;/p&gt;

&lt;p&gt;Download it &lt;a href=&quot;https://apps.apple.com/us/app/8-bit-nails/id6737764793&quot;&gt;on the App Store&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/8-bit-nails-marketing-images.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Marketing screenshots for 8-bit Nails on v1.0 release&quot; title=&quot;Marketing screenshots for 8-bit Nails on v1.0 release&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Marketing screenshots for 8-bit Nails on v1.0 release&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After you or a loved one gets their nails done IRL, jump into 8-bit Nails and create a matching set of nails with your own vision in pixel art style. Manicures can be simple or elaborate, and using your creativity to translate them into pixel art style is a fun challenge.&lt;/p&gt;

&lt;p&gt;The drawing tools are simple, but there are a few built-in helpers to selectively copy an individual nail across to other nails. You can customize the nail on each hand.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/8-bit-nails-drawing-tools.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;8-bit Nails includes helper tools to eliminate the boring parts of painting&quot; title=&quot;8-bit Nails includes helper tools to eliminate the boring parts of painting&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;8-bit Nails includes helper tools to eliminate the boring parts of painting&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The system color picker is available, and the already used colors are easily accessible as a dynamic palette. And undo and redo functions are available for each nail.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/8-bit-nails-color-picker.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;The color picker&quot; title=&quot;The color picker&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The color picker&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After you’ve finished pixel-fying your nails, they appear in the diary tagged with the current date. You can look back to see each of your nails over time.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/8-bit-nails-diary.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;The main screen shows a diary of your nails with most recent at the top&quot; title=&quot;The main screen shows a diary of your nails with most recent at the top&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The main screen shows a diary of your nails with most recent at the top&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s also a full screen viewer when you want to show off your work in person.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/8-bit-nails-large-view.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;View your nails in full screen&quot; title=&quot;View your nails in full screen&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;View your nails in full screen&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally, there’s a special shareable image version with an auto-generated background color. Save this to your camera roll or send it to friends.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/8-bit-nails-shareable-image.jpg&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;An example shareable image&quot; title=&quot;An example shareable image&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;An example shareable image&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;My girlfriend is a nail enthusiast. She gets her nails painted every couple of weeks. I liked seeing what new designs she had and a budding idea came to me of having a painting app to keep track of them. While prototyping, I realized having a full suite of drawing tools and brushes was way too complicated and intimidating. But arbitrarily limiting the drawing resolution created a fun constraint, made it easier to paint on a smartphone-sized touch screen, and ensured that there was a soft-limit on the time it takes to get to the finish line.&lt;/p&gt;

&lt;p&gt;I finished a prototype version over a weekend, got it on Test Flight, and sent her an invite before the holidays. Over time, I’ve slightly improved the tools, fixed a few bugs, and added a few nice-to-have helpers. It was fun to see how both her and I interpreted her nails differently in pixel art style. Only after a couple rounds, I think each of us has gotten better at translating the pixel art style. Some of the more complex 3D designs she’s gotten IRL have been especially fun to try to paint in the app.&lt;/p&gt;

&lt;p&gt;When I started developing the app, I wasn’t planning on taking it beyond something for the two of us. But as I chipped away at features and slowly noticed how popular manicures were with those around me, I decided it’d be worthwhile to put the finishing touches on the app and release it publicly on the App Store.&lt;/p&gt;

&lt;p&gt;There are already a slew of manicure-related apps on the App Store. All fall into the category of games, photos for inspiration, or hyper-realistic painting simulators. Most are targeted towards young girls.&lt;/p&gt;

&lt;p&gt;Similarly, there are plenty of pixel art apps. On the casual side, there are paint-by-numbers apps. On the tools side, there are full pixel art suites with layers and other complex tools.&lt;/p&gt;

&lt;p&gt;I’m curious to see whether a cross between the two categories will find an audience.&lt;/p&gt;

&lt;h2 id=&quot;development&quot;&gt;Development&lt;/h2&gt;

&lt;p&gt;On the technical side, I’m using SwiftUI and no external frameworks. Since my original goal was a personal app, the code reflects that.&lt;/p&gt;

&lt;p&gt;Data for all nail sets are saved to one file. The data is saved as matrix of color values and drawn live in a SwiftUI &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Canvas&lt;/code&gt; View. Currently, the canvas is hard-coded to 10x16 pixels, but the code supports any resolution.&lt;/p&gt;

&lt;p&gt;I use the system color picker. Undo/redo is implemented as a stack of nail data for each nail in the set. I wanted to experiment with some custom transitions so I didn’t use any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sheet&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationStack&lt;/code&gt; views this time; all views are layered in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZStack&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the app starts to get traction, I’m planning on cleaning up the codebase. I realize with my last app Eki Bright I probably leaned a little too hard on the side of a clean codebase. If I want to continue on the indie dev path, I’ll need to keep optimizing for coding practices that facilitate a sustainable business, which means more up-front research, more marketing, more monetization, and more failing fast. All things that spending excess time in the codebase takes away from.&lt;/p&gt;

&lt;p&gt;I think it’d be fun to add a widget that shows your latest nails on your home screen. And allow customization of the nail shape. Besides that, I’m going to wait to see what real users are looking for.&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Feb 2025 06:22:00 -0600</pubDate>
        <link>https://twocentstudios.com/2025/02/17/8-bit-nails-pixel-art-nail-diary/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/02/17/8-bit-nails-pixel-art-nail-diary/</guid>
        
        <category>8bitnails</category>
        
        <category>app</category>
        
        
      </item>
    
      <item>
        <title>AVCaptureMovieFileOutput recordedDuration Value is Inaccurate</title>
        <description>&lt;p&gt;In the AVFoundation framework on Apple platforms, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureMovieFileOutput&lt;/code&gt; (or more accurately, the abstract base class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureFileOutput&lt;/code&gt;) has a property called &lt;a href=&quot;https://developer.apple.com/documentation/avfoundation/avcapturefileoutput/1389028-recordedduration&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recordedDuration&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If recording is in progress, this property returns the total time recorded so far.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Like in the &lt;a href=&quot;https://developer.apple.com/documentation/avfoundation/capture_setup/avcam_building_a_camera_app&quot;&gt;AVCam sample project&lt;/a&gt;, this property is often used to show the elapsed time to the user while they’re recording a video at a base increment of seconds.&lt;/p&gt;

&lt;p&gt;Through testing, I’ve found this value is only accurate to around 0.06 seconds or 16 frames per second (FPS). If you try to sample the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recordedDuration&lt;/code&gt; property faster, say at 30 FPS, you’ll see repeated values.&lt;/p&gt;

&lt;p&gt;If you need more accuracy than this, you can use one of the following strategies.&lt;/p&gt;

&lt;h3 id=&quot;calculating-an-accurate-recordedduration-on-ios-182&quot;&gt;Calculating an accurate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recordedDuration&lt;/code&gt; on iOS 18.2+&lt;/h3&gt;

&lt;p&gt;On iOS 18.2+, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureFileOutputRecordingDelegate&lt;/code&gt; includes the method:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fileOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AVCaptureFileOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didStartRecordingTo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fileURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;startPTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CMTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AVCaptureConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startPTS&lt;/code&gt; stands for “start presentation timestamp”. It looks like a random &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMTime&lt;/code&gt;, but it’s in reference to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMClock&lt;/code&gt; instance. In this case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureSession&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronizationClock&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To get the amount of time elapsed since recording, you can therefore use:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;recordedDurationCMTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;captureSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;synchronizationClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startPTS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;recordedDurationSeconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recordedDurationCMTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;calculating-mostly-accurate-recordedduration-before-ios-182&quot;&gt;Calculating mostly accurate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recordedDuration&lt;/code&gt; before iOS 18.2&lt;/h3&gt;

&lt;p&gt;Older versions of iOS don’t include the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startPTS&lt;/code&gt; variant of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fileOutput(didStartRecordingTo:)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, the best we can do is capture our own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startPTS&lt;/code&gt; from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronizationClock&lt;/code&gt; at the moment of the delegate callback:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fileOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AVCaptureFileOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didStartRecordingTo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fileURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AVCaptureConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startPTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;captureSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;synchronizationClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recordedDurationCMTime&lt;/code&gt; code from the above section.&lt;/p&gt;

&lt;h3 id=&quot;calculating-a-slightly-less-accurate-recordedduration-converting-to-the-host-time-clock&quot;&gt;Calculating a slightly less accurate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recordedDuration&lt;/code&gt; converting to the host time clock&lt;/h3&gt;

&lt;p&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureSession.synchronizationClock&lt;/code&gt; in other parts of your app might be inconvenient. You can instead convert the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startPTS&lt;/code&gt; to be in relation to the host time clock. Then, in the rest of your app, you can reference the singleton &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMClock.hostTimeClock&lt;/code&gt; more easily.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hostClockStartPTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;captureSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;synchronizationClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convertTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startPTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CMClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hostTimeClock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In my testing, the synchronizationClock and hostTimeClock are very close in value already. Essentially less than 1 ms difference or around 1000 FPS. However, they are different clocks and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMClock&lt;/code&gt; utilities report that they can “drift”.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;captureSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;synchronizationClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mightDrift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;relativeTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CMClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hostTimeClock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Depending on your use case, you may want to avoid using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hostTimeClock&lt;/code&gt; and instead continue to reference &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;captureSession.synchronizationClock&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMClock&lt;/code&gt; does not have a lot of documentation, so I can’t make any accuracy guarantees.&lt;/p&gt;

&lt;h3 id=&quot;calculating-the-most-accurate-recordedduration-using-avcapturevideodataoutput&quot;&gt;Calculating the most accurate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recordedDuration&lt;/code&gt; using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureVideoDataOutput&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;You can get the absolute best accuracy by not using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureMovieFileOutput&lt;/code&gt; and instead using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureVideoDataOutput&lt;/code&gt; to get the presentation timestamps of the raw frame buffers yourself. This is left as an exercise to the reader. The implementation is much more involved, but it’s not uncommon to attempt.&lt;/p&gt;

&lt;p&gt;You can view an example of working with presentation timestamps in this way in the docs for &lt;a href=&quot;https://developer.apple.com/documentation/avfoundation/avcapturesession/3915813-synchronizationclock&quot;&gt;AVCaptureSession.synchronizationClock&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 06 Feb 2025 17:10:00 -0600</pubDate>
        <link>https://twocentstudios.com/2025/02/06/avcapturemoviefileoutput-recordedduration-is-inaccurate/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/02/06/avcapturemoviefileoutput-recordedduration-is-inaccurate/</guid>
        
        <category>apple</category>
        
        <category>ios</category>
        
        <category>handcrankcamera</category>
        
        
      </item>
    
      <item>
        <title>Using a USB Soundcard with Video Conferencing Apps on macOS</title>
        <description>&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;p&gt;Video conferencing apps (e.g. Zoom, Google Meet) generally do not support USB soundcards (e.g. UA Volt, Focusrite Scarlett) with &lt;strong&gt;multiple inputs&lt;/strong&gt; on macOS the way proper recording software does. It’s possible to select the entire soundcard input, but not specify which of the multiple inputs will be used, or how they will be combined.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/soundcard-macos-zoom-volt.png&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Zoom settings for my UA Volt as an input do not allow specifying which input channel to use&quot; title=&quot;Zoom settings for my UA Volt as an input do not allow specifying which input channel to use&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Zoom settings for my UA Volt as an input do not allow specifying which input channel to use&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For example, I have a 2-input &lt;a href=&quot;https://www.uaudio.com/uad-plugins/volt-2-usb.html&quot;&gt;UA Volt 2&lt;/a&gt;. I plug a Rode NT2-A condenser mic into &lt;em&gt;INPUT 1&lt;/em&gt; via an XLR cable and use the Volt’s 48V phantom power. I often use &lt;em&gt;INPUT 2&lt;/em&gt; for direct input electric guitar recording.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/soundcard-macos-volt-device.jpg&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;Your soundcard probably looks something like this UA Volt 2&quot; title=&quot;Your soundcard probably looks something like this UA Volt 2&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Your soundcard probably looks something like this UA Volt 2&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;The solution I’ve found through random forum posts is annoying, but free and reasonable until the day that video conferencing providers or Apple support this use case natively.&lt;/p&gt;

&lt;h3 id=&quot;step-1-download-ladiocast-and-blackhole&quot;&gt;Step 1: Download LadioCast and BlackHole&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://apps.apple.com/us/app/ladiocast/id411213048?mt=12&quot;&gt;LadioCast&lt;/a&gt; does the input mixing. It’s available for free on the Mac App Store. While running, it sits in your Menu Bar and has a popup window for configuration.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ExistentialAudio/BlackHole&quot;&gt;BlackHole&lt;/a&gt; acts as an virtual audio input that other apps can use, but LadioCast can write to using real device input. The BlackHole &lt;strong&gt;2ch variant is fine&lt;/strong&gt; for this use case. Follow the directions on the GitHub page to download the installer or use Homebrew.&lt;/p&gt;

&lt;p&gt;I open LadioCast before I start a video call and close it after I finish because it adds the “an app is using mic” indicator to the macOS menu bar I find annoying. If you don’t care, it doesn’t hurt to leave it open all the time.&lt;/p&gt;

&lt;p&gt;BlackHole runs in the background all the time with no issues.&lt;/p&gt;

&lt;p&gt;To be safe, restart your Mac after installing these, running them, giving permissions, etc.&lt;/p&gt;

&lt;h3 id=&quot;step-2-configure-ladiocast&quot;&gt;Step 2: Configure LadioCast&lt;/h3&gt;

&lt;p&gt;For my use case, I want to have my UA Volt input 1 act as a mono input. In other words, it should have the same level on both the left and right stereo input channel. I’ve configured it as so:&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/soundcard-macos-ladiocast-setup.png&quot; width=&quot;&quot; height=&quot;200&quot; alt=&quot;Ladiocast settings I use for routing input 1 of my UA Volt as a mono source&quot; title=&quot;Ladiocast settings I use for routing input 1 of my UA Volt as a mono source&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Ladiocast settings I use for routing input 1 of my UA Volt as a mono source&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The important parts are that I’ve:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;selected Volt 2 as the input device&lt;/li&gt;
  &lt;li&gt;set channel 1 to both left and right&lt;/li&gt;
  &lt;li&gt;set the output to be +0db&lt;/li&gt;
  &lt;li&gt;set the output to &lt;em&gt;main&lt;/em&gt;, highlighted red&lt;/li&gt;
  &lt;li&gt;set the main output to device Blackhole 2ch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your configuration is set up correctly, you should see green bars on both sides firing while using your mic.&lt;/p&gt;

&lt;p&gt;You should only need to do this configuration once. Your settings will be saved after you close and reopen LadioCast.&lt;/p&gt;

&lt;h3 id=&quot;step-3-configure-your-video-conferencing-software&quot;&gt;Step 3: Configure your video conferencing software&lt;/h3&gt;

&lt;p&gt;For this example I’m using Zoom.&lt;/p&gt;

&lt;p&gt;Set your microphone to &lt;em&gt;BlackHole 2ch&lt;/em&gt; and you should be good to go.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/soundcard-macos-zoom-setup.png&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Zoom configured to use the LadioCast -&amp;gt; Blackhole setup&quot; title=&quot;Zoom configured to use the LadioCast -&amp;gt; Blackhole setup&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Zoom configured to use the LadioCast -&amp;gt; Blackhole setup&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;other-notes&quot;&gt;Other notes&lt;/h2&gt;

&lt;p&gt;This setup should also work if you want to record audio using simple apps with the same input selection limitations like QuickTime.&lt;/p&gt;

&lt;p&gt;As mentioned in the references below, there are other ways to accomplish this using heavier software packages like GarageBand, Logic Pro, OBS, etc., but in my experience, the method in this post is the most lightweight I’ve found so far.&lt;/p&gt;

&lt;p&gt;I thought macOS’s built-in Audio MIDI Setup app could handle this via the &lt;em&gt;Create Aggregate Device&lt;/em&gt; function, but it cannot.&lt;/p&gt;

&lt;p&gt;If you’ve come across better ways, feel free to email me and I’ll update this post.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://apple.stackexchange.com/questions/400173/how-can-i-mix-multi-channel-input-device-down-to-mono?rq=1&quot;&gt;macos - How can I mix multi-channel input device down to mono? - Ask Different&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apple.stackexchange.com/questions/37538/how-can-i-force-mac-os-x-to-treat-my-mackie-onyx-blackjack-as-a-mono-input-devic?rq=1&quot;&gt;macos - How can I force Mac OS X to treat my Mackie Onyx Blackjack as a mono input device? - Ask Different&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ExistentialAudio/BlackHole&quot;&gt;ExistentialAudio/BlackHole: BlackHole is a modern macOS audio loopback driver that allows applications to pass audio to other applications with zero additional latency.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://existential.audio/howto/StreamFromLogicProXtoZoom.php&quot;&gt;Existential Audio - How To Stream From Logic Pro X to Zoom&lt;/a&gt;&lt;a href=&quot;https://existential.audio/howto/StreamFromLogicProXtoZoom.php&quot;&gt;Existential Audio - How To Stream From Logic Pro X to Zoom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.apple.com/en-us/102171&quot;&gt;Create an Aggregate Device to combine multiple audio devices - Apple Support&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apps.apple.com/us/app/ladiocast/id411213048?mt=12&quot;&gt;LadioCast on the Mac App Store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 27 Jan 2025 06:43:00 -0600</pubDate>
        <link>https://twocentstudios.com/2025/01/27/usb-soundcard-macos-video-conferencing/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/01/27/usb-soundcard-macos-video-conferencing/</guid>
        
        <category>macOS</category>
        
        
      </item>
    
      <item>
        <title>Fixing the Crash: ActivityKit is Unavailable on macOS</title>
        <description>&lt;p&gt;If you have an iOS app that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;supports “Designed for iPad” or “Designed for iPhone” and is on the Mac App Store (or is otherwise available on macOS)&lt;/li&gt;
  &lt;li&gt;uses the ActivityKit framework&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then your app will crash on macOS when you reference an ActivityKit symbol (through at least iOS 18.2).&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/activity-kit-macos-crash.png&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;Welcome to Crashville&quot; title=&quot;Welcome to Crashville&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Welcome to Crashville&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How to fix it:&lt;/p&gt;

&lt;h3 id=&quot;link-activitykitframework-as-optional&quot;&gt;Link ActivityKit.framework as optional&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Go to project -&amp;gt; app target -&amp;gt; &lt;em&gt;Link Binary With Libraries&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Add ActivityKit.framework&lt;/li&gt;
  &lt;li&gt;Set ActivityKit.framework’s status as &lt;em&gt;Optional&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Repeat for the widget app extension target as well&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/activity-kit-macos-link-optional.png&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Link ActivityKit.framework as optional in app target and widget target&quot; title=&quot;Link ActivityKit.framework as optional in app target and widget target&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Link ActivityKit.framework as optional in app target and widget target&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;avoid-calling-activitykit-symbols-in-your-code&quot;&gt;Avoid calling ActivityKit symbols in your code&lt;/h3&gt;

&lt;p&gt;There are a lot of different ways to conditionally reference ActivityKit symbols.&lt;/p&gt;

&lt;p&gt;Conditional referencing must be done at runtime since even when running on macOS the compiler directive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#if canImport(ActivityKit)&lt;/code&gt; will still evaluate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if !ProcessInfo.processInfo.isiOSAppOnMac&lt;/code&gt; to short circuit code that shouldn’t run on macOS.&lt;/p&gt;

&lt;p&gt;In the case of &lt;a href=&quot;https://twocentstudios.com/2024/07/27/eki-bright-tokyo-area-train-timetables/&quot;&gt;Eki Bright&lt;/a&gt;, I have my direct usage of ActivityKit behind a dependency, defined and configured with the &lt;a href=&quot;https://github.com/pointfreeco/swift-dependencies&quot;&gt;swift-dependencies&lt;/a&gt; library. This allows me to swap out a fully functional dependency with a dummy dependency at launch time.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// LiveActivityClient.swift&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ActivityKit&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ComposableArchitecture&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WidgetKit&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ActivityID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Same as `Activity.ID?`&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;@DependencyClient&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LiveActivityClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;startOrReplaceRouteActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@Sendable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;routeItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RouteItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ync&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ActivityID&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;updateOrEndRouteActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@Sendable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ync&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LiveActivityClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DependencyKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;liveValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;startOrReplaceRouteActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routeItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segmentActivePhases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;/// Call real implementation of `Activity.request`, etc.&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;updateOrEndRouteActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;/// Call real implementation of `activity.update`, `activity.end`, etc.&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;unavailableValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;startOrReplaceRouteActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;updateOrEndRouteActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.swift&lt;/code&gt; file I use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.unavailableValue&lt;/code&gt; instead of the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.liveValue&lt;/code&gt; on macOS:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@main&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TrainApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;RootFeature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withDependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ProcessInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;processInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isiOSAppOnMac&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;liveActivity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unavailableValue&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ActivityKit framework crashes on macOS&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scene&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;WindowGroup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;RootView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I can then use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Dependency(\.liveActivity) var liveActivity&lt;/code&gt; in any one of my features.&lt;/p&gt;

&lt;p&gt;Of course, the implementation of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unavailableValue&lt;/code&gt; can also throw specific errors handled by your feature code. In my case, the LiveActivity silently failing on macOS is acceptable.&lt;/p&gt;

&lt;h3 id=&quot;hardening-your-widget-extension&quot;&gt;Hardening your widget extension&lt;/h3&gt;

&lt;p&gt;If you’re using ActivityKit.framework, then you may have a widget extension that configures the LiveActivity. In my case, I have a normal widget as well as a LiveActivity widget. In order to conditionally enable the LiveActivity widget on non-macOS platforms, I’m using the following technique from &lt;a href=&quot;https://stackoverflow.com/a/72807287&quot;&gt;this Stack Overflow post&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@main&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WidgetLauncher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ProcessInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;processInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isiOSAppOnMac&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;WidgetOnlyBundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;WidgetActivityBundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WidgetOnlyBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WidgetBundle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;StationBookmarkWidget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WidgetActivityBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WidgetBundle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;StationBookmarkWidget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;RouteActivityWidget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, there are some bugs with macOS widgets in Xcode 16.2 that I haven’t found a workaround for yet. I can’t 100% say this technique works, but if the default configuration doesn’t work for you, try the above and see if it helps. I’m still &lt;a href=&quot;https://hachyderm.io/@twocentstudios/113887068005326578&quot;&gt;pretty confused&lt;/a&gt; about how to efficiently test and debug widgets on macOS, so I don’t have a lot of guidance for this part.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/75589730&quot;&gt;Stack Overflow: Launching a designed for iPad mac app crashes at startup: Library not loaded&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/72807287&quot;&gt;Stack Overflow: WidgetBundle return widgets based on some logic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://forums.developer.apple.com/forums/thread/773125&quot;&gt;Apple Developer Forums: WidgetKit Simulator with Intent Configurations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/widgetkit/debugging-widgets&quot;&gt;Apple Developer Documentation: Debugging Widgets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 25 Jan 2025 05:10:00 -0600</pubDate>
        <link>https://twocentstudios.com/2025/01/25/activitykit-unavailable-on-macos/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/01/25/activitykit-unavailable-on-macos/</guid>
        
        <category>apple</category>
        
        <category>ios</category>
        
        <category>ekibright</category>
        
        
      </item>
    
      <item>
        <title>Eki Bright - The Case for DIY Routing</title>
        <description>&lt;p&gt;When I set out making the first prototypes of &lt;a href=&quot;https://twocentstudios.com/2024/07/27/eki-bright-tokyo-area-train-timetables/&quot;&gt;Eki Bright&lt;/a&gt;, my train timetables iOS app for the Tokyo metropolitan area, I had no intentions of tackling routing. In fact, that was one of the selling points; the lack of routing, like lack of maps, made it visually and conceptually simpler for solving the problem of getting the next train departure time at any particular station.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-diy-route-example.jpg&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;A DIY route in Eki Bright as it appears in the bottom Route Bar&quot; title=&quot;A DIY route in Eki Bright as it appears in the bottom Route Bar&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A DIY route in Eki Bright as it appears in the bottom Route Bar&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I eventually did add routing, in a form I call &lt;em&gt;DIY routing&lt;/em&gt;, but it grew organically out of the existing feature set, and it stays within the same niche as I’ve been targeting thus far: train riders who know where they’re going and how to get there. A tool for &lt;em&gt;power users&lt;/em&gt;, so-to-speak.&lt;/p&gt;

&lt;p&gt;In this post, I want to make the case for DIY routing: why it’s a useful addition to the full-featured routing apps we all use regularly. I’ve never used anything like DIY routing before, so either it’s already obsolete, or the problem was solved &lt;em&gt;well enough&lt;/em&gt; by other apps that no one had bothered to explore other solutions until now.&lt;/p&gt;

&lt;p&gt;I’ll use Google Maps the illustrative example of a &lt;em&gt;full-featured&lt;/em&gt; routing app. I’ll use 乗換案内 (Norikae Annai or Japan Transit Planner in English) as the illustrative example of a &lt;em&gt;railway-only&lt;/em&gt; routing app. And this post will be focused on the Tokyo-area of Japan.&lt;/p&gt;

&lt;h2 id=&quot;what-is-diy-routing&quot;&gt;What is DIY routing?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Full-featured routing&lt;/strong&gt; is choosing your departure point (often “current location” via GPS) and your destination point and allowing a routing algorithm propose several route options to choose from. Each routing option will often include multiple modes (e.g. walk, train, bus) and be optimized based on some goal (e.g. soonest arrival time, cost, complexity).&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-gmaps-full-featured.png&quot; width=&quot;&quot; height=&quot;200&quot; alt=&quot;A full-featured routing interface in Google Maps where the departure and destination points are required in order to calculate a route&quot; title=&quot;A full-featured routing interface in Google Maps where the departure and destination points are required in order to calculate a route&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A full-featured routing interface in Google Maps where the departure and destination points are required in order to calculate a route&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In contrast, &lt;strong&gt;DIY routing&lt;/strong&gt; is documenting your own train-based route segment-by-segment starting from the departure station. A segment consists of one train and its departure station and arrival station, and therefore scheduled departure and arrival times. Multiple segments can be combined with transfers in-between.&lt;/p&gt;

&lt;p&gt;A completed two segment route with one transfer looks like this:&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-diy-route-basha-ebisu.png&quot; width=&quot;&quot; height=&quot;200&quot; alt=&quot;A 2-segment DIY route with a transfer at Nakameguro 中目黒&quot; title=&quot;A 2-segment DIY route with a transfer at Nakameguro 中目黒&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A 2-segment DIY route with a transfer at Nakameguro 中目黒&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And a screencast of what it looks like assembling this two segment route in the app.&lt;/p&gt;

&lt;video src=&quot;/images/eki-bright-diy-route-create.mp4&quot; controls=&quot;&quot; preload=&quot;none&quot; poster=&quot;/images/eki-bright-diy-route-create.png&quot; width=&quot;300&quot;&gt;&lt;/video&gt;

&lt;p&gt;After you’ve created a route, the pertinent details update automatically as a Live Activity in the Dynamic Island and on the lock screen.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-diy-route-dynamic-island.png&quot; width=&quot;&quot; height=&quot;200&quot; alt=&quot;A DIY route as it appears in the Dynamic Island compact view&quot; title=&quot;A DIY route as it appears in the Dynamic Island compact view&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A DIY route as it appears in the Dynamic Island compact view&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-diy-route-lock-screen.png&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;A DIY route as it appears as a Live Activity in the lock screen before departure&quot; title=&quot;A DIY route as it appears as a Live Activity in the lock screen before departure&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A DIY route as it appears as a Live Activity in the lock screen before departure&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-use-cases-for-diy-routing&quot;&gt;The use cases for DIY routing&lt;/h2&gt;

&lt;p&gt;You may be wondering, “if I already know how to get to my destination without the aid of an algorithmic route service, why would I go through the trouble of creating one myself each time I take a trip?”&lt;/p&gt;

&lt;p&gt;Sure, I sometimes use the station timetable widgets I’ve set up to optimize leaving the house to catch the next train.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-widget-category-color.jpg&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;Using a widget to check train times before leaving the house&quot; title=&quot;Using a widget to check train times before leaving the house&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Using a widget to check train times before leaving the house&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But other times I plan ahead maybe an hour or two to ensure I catch the (fastest) limited express train while also getting to my destination in time. I do this quickly by setting up the first departure of a DIY route, and the departure time immediately appears in my dynamic island so I can keep an eye on it.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-diy-route-dynamic-island.png&quot; width=&quot;&quot; height=&quot;200&quot; alt=&quot;Checking my planned departure in the dynamic island while doing something else&quot; title=&quot;Checking my planned departure in the dynamic island while doing something else&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Checking my planned departure in the dynamic island while doing something else&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sometimes I’ll set up the full route, but other times I’ll only set the initial departure and set up the rest of the DIY route while I’m waiting on the platform or even when I’m already on the train. No need to do it all at once.&lt;/p&gt;

&lt;p&gt;If you’ve got a whole DIY route set up, you get the following benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Remember when to leave your current location to catch the train you want.&lt;/li&gt;
  &lt;li&gt;Remember which train to board when you get to the departure station.&lt;/li&gt;
  &lt;li&gt;Remember when to get off at the transfer station.&lt;/li&gt;
  &lt;li&gt;Remember which train to board at the transfer station.&lt;/li&gt;
  &lt;li&gt;Remember when to get off at your arrival station.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All while browsing other apps or while your iPhone is locked.&lt;/p&gt;

&lt;h3 id=&quot;use-case-flexibility-in-departure&quot;&gt;Use case: flexibility in departure&lt;/h3&gt;

&lt;p&gt;When I’m picking my departure time in Eki Bright, I’m immediately presented with the full list, including train type (e.g. local, express). It’s quick and easy to understand at a glance what my options are. The interface has only a slight bias for “leaving now” departures, showing the next 6 departures on the station detail screen and the next ~11 departures on the station timetable screen. It’s not much more difficult to plan an hour or two ahead.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-station-timetable-station-detail.png&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Departures as they appear on the Station Timetable and Station Detail screens&quot; title=&quot;Departures as they appear on the Station Timetable and Station Detail screens&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Departures as they appear on the Station Timetable and Station Detail screens&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similarly, once you’ve added a departure to a DIY route, you can see and select 2 departures before and after the active departure. This lets you quickly recover if you miss your train or decide to leave a little early.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-alternate-departures.png&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;Alternate departures shown when tapping the departure station 馬車道&quot; title=&quot;Alternate departures shown when tapping the departure station 馬車道&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Alternate departures shown when tapping the departure station 馬車道&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In contrast, other routing apps are purely optimized for “leaving now” departures, and are forced to use a variant of the time picker control in a modal view if you’re leaving even a little later.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-gmaps-departure-time.png&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Choosing a departure time in Google Maps&quot; title=&quot;Choosing a departure time in Google Maps&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Choosing a departure time in Google Maps&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Other routing apps also have various interfaces for re-routing to the next or previous train. But I’ve found each implementation to be lacking, either in update speed or UI clarity, mostly because the interfaces need to assist users who aren’t familiar with the route.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-applemaps-alternate-departures.png&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;List of alternate departures in Apple Maps&quot; title=&quot;List of alternate departures in Apple Maps&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;List of alternate departures in Apple Maps&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;use-case-no-false-sense-of-accuracy-in-walking-transfer-times&quot;&gt;Use case: no false sense of accuracy in walking transfer times&lt;/h3&gt;

&lt;p&gt;Full-featured routing apps default to choosing the start location of your route via GPS and then calculating the train portion of the route based on the best estimate walk time to the departure station. I think this method works fine for general users.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-gmaps-walking-to-train.png&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;Google Maps showing walking directions to the departure station&quot; title=&quot;Google Maps showing walking directions to the departure station&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Google Maps showing walking directions to the departure station&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, as a power-user, I’ve found these estimates to be inaccurate to the point where they’re disruptive to my route planning.&lt;/p&gt;

&lt;p&gt;First, GPS accuracy is often quite spotty in many parts of street-level Tokyo, and even worse if you’re in one of the many underground spaces.&lt;/p&gt;

&lt;p&gt;The app must also make a tradeoff between waiting for the GPS signal to stabilize and providing a route. Waiting longer may return a more accurate GPS location, but may cause the user to become impatient, or even miss a train in rare cases.&lt;/p&gt;

&lt;p&gt;Since the walking shares the street with cars and buses, due to traffic light timings walking time estimates will always need to build in some margin of error.&lt;/p&gt;

&lt;p&gt;And finally, full-featured routing apps have no setting for “I’m a slow walker” or “I can run if it means I catch the express train and therefore a ~15 minute earlier arrival time”. This means they sometimes won’t show you a route you could easily make unless you set the departure time back a minute or two.&lt;/p&gt;

&lt;p&gt;It’s frustrating to try to work around these apps when they’re being “smart”. I need to enter my departure coordinates exactly by typing or fiddling with the map view. Or I need to open up the departure time picker and guess and check spinning the dials enough to trigger a more ideal set of route results.&lt;/p&gt;

&lt;p&gt;Many times, I’ve been on the station platform trying to quickly double check the info for a soon-to-depart train, but Google Maps will not show me that train because it thinks I need to walk 5 minutes to the train station due to the GPS accuracy.&lt;/p&gt;

&lt;p&gt;Norikae Annai assumes you’re already at the departure station and provides no walk guidance or departure time adjustment. This default configuration is fine for when you’re already at the station, but slow if you want to account for a couple minute walk.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-norikae-annai-route-setup.jpg&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;Creating a route with Norikae Annai requires selecting a departure and arrival station&quot; title=&quot;Creating a route with Norikae Annai requires selecting a departure and arrival station&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Creating a route with Norikae Annai requires selecting a departure and arrival station&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You either need to use the departure time picker modal or tap through to other departures (if you can find those buttons between the ads).&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-norikae-annai-alternate-departures.png&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;Choosing alternate departures in Norikae Annai (the orange buttons between the ad views)&quot; title=&quot;Choosing alternate departures in Norikae Annai (the orange buttons between the ad views)&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Choosing alternate departures in Norikae Annai (the orange buttons between the ad views)&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;use-case-optimizing-transfer-times&quot;&gt;Use case: optimizing transfer times&lt;/h3&gt;

&lt;p&gt;Estimating transfer times between segments is a variant of the above problem of estimating walking times to the departure station.&lt;/p&gt;

&lt;p&gt;In Eki Bright, this problem is handled the same way as above. The app does not try to make any smart estimates it can’t guarantee, but instead gives you tools and surfaces relevant information to optimize transfers on your own.&lt;/p&gt;

&lt;p&gt;If I know my route and transfer pretty well, I can estimate my absolute fastest time walking from platform to platform. From there, I can quickly see the next couple departure options and easily decide whether I can rush to make the next transfer or whether I can take my time (perhaps stopping for a drink, or snack, or to use the restroom).&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-diy-route-transfer-alternate-departures.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Alternate departures for a transfer shown in the bottom half of the screen above the route bar. I know this transfer occurs on the same platform, so one minute is enough.&quot; title=&quot;Alternate departures for a transfer shown in the bottom half of the screen above the route bar. I know this transfer occurs on the same platform, so one minute is enough.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Alternate departures for a transfer shown in the bottom half of the screen above the route bar. I know this transfer occurs on the same platform, so one minute is enough.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Google Maps has a reasonably good interface for checking other transfer time options. But as far as selecting a default option, it seems to be using its walking distance algorithm even within stations. For this example Nakameguro transfer, it seems to think the transfer will take a 1 minute walk, even though these two trains actually stop on adjacent sides of the same platform and usually wait for one another.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-gmaps-nakame-transfer.png&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Google Maps chooses the 22:51 departure but shows the 22:47 departure in a dropdown menu&quot; title=&quot;Google Maps chooses the 22:51 departure but shows the 22:47 departure in a dropdown menu&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Google Maps chooses the 22:51 departure but shows the 22:47 departure in a dropdown menu&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Noriakae Annai doesn’t even have an option for choosing an alternate transfer. It’s not clear to me how the app chooses possible transfer times by default. But in the below example, I can see in Eki Bright that if I get off the Toyoko-line train right after it arrives, I have a good chance of making the Hibiya-line transfer departing at the exact same time.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-norikae-annai-nakame-transfer.png&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Norikae Annai also shows the 22:51 departure, but has no option to show the user the 22:47 option&quot; title=&quot;Norikae Annai also shows the 22:51 departure, but has no option to show the user the 22:47 option&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Norikae Annai also shows the 22:51 departure, but has no option to show the user the 22:47 option&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-diy-route-nakame-transfer.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Eki Bright shows the 22:47 transfer option by &apos;default&apos;, but it&apos;s easy to see/select the alternate 22:51 departure as well&quot; title=&quot;Eki Bright shows the 22:47 transfer option by &apos;default&apos;, but it&apos;s easy to see/select the alternate 22:51 departure as well&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Eki Bright shows the 22:47 transfer option by &apos;default&apos;, but it&apos;s easy to see/select the alternate 22:51 departure as well&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;use-case-eliminating-distractions-like-maps&quot;&gt;Use case: eliminating distractions like maps&lt;/h3&gt;

&lt;p&gt;Other routing apps dedicate most of their UI to departure point, arrival point, routing options, maps, and proposed routes.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-gmaps-default-route-select.png&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Google Maps&apos; default route selection screen&quot; title=&quot;Google Maps&apos; default route selection screen&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Google Maps&apos; default route selection screen&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you already know which proposed route you want to take, but just need to know the departure time, the rest of the UI is just distraction and visual noise.&lt;/p&gt;

&lt;p&gt;In contrast, Eki Bright is optimized to get you, a power user, to your first departure time as quickly as possible. Since user preferences and situations are different, I use a layering approach: lock screen widgets, today view widgets, home screen widgets, and bookmarks on the app’s home screen.&lt;/p&gt;

&lt;p&gt;Priority for routing is secondary, since it can be ignored completely or set up en route with no consequences.&lt;/p&gt;

&lt;p&gt;Eliminating the necessity of choosing a destination is a big win for Eki Bright.&lt;/p&gt;

&lt;p&gt;Eliminating the necessity of a map is also a big win. Maps take up a lot of screen real estate.&lt;/p&gt;

&lt;p&gt;Other routing apps, even Google Maps, have their own version of timetable-based UI. However, the UI and UX is usually a secondary concern and quite clumsy. They’re not intended to be a full featured replacement for routing, nor do they incorporate progressive disclosure where you can use the departure time as a jumping off point to create a route.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-gmaps-station-departures.png&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Google Maps station departures screen for Ebisu station&quot; title=&quot;Google Maps station departures screen for Ebisu station&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Google Maps station departures screen for Ebisu station&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;use-case-browsing-waypoints-while-en-route&quot;&gt;Use case: browsing waypoints while en route&lt;/h3&gt;

&lt;p&gt;When using Google Maps for routing, it’s not possible to browse waypoints like restaurants while you’re in the middle of navigating. Using another app for routing (not only Eki Bright) allows you to still search for a restaurant at your destination while still being able to keep track of your departure time.&lt;/p&gt;

&lt;h2 id=&quot;when-does-it-not-make-sense-to-use-diy-routing&quot;&gt;When does it not make sense to use DIY routing?&lt;/h2&gt;

&lt;h3 id=&quot;unfamiliar-routes&quot;&gt;Unfamiliar routes&lt;/h3&gt;

&lt;p&gt;Straight up, if you don’t know how to get from your departure station to your arrival station, it will be frustrating and difficult (but not impossible) to derive an ideal route using the Eki Bright UX.&lt;/p&gt;

&lt;h3 id=&quot;comparing-multiple-routes&quot;&gt;Comparing multiple routes&lt;/h3&gt;

&lt;p&gt;If you think you have the option of using two different routes, but aren’t sure which is better (i.e. faster, cheaper), Eki Bright will not be useful in making that decision.&lt;/p&gt;

&lt;h3 id=&quot;ultra-short-routes-with-no-fixed-schedule&quot;&gt;Ultra-short routes with no fixed schedule&lt;/h3&gt;

&lt;p&gt;The Yamanote line only has one type (“local”) and comes quite frequently (every ~3-4 minutes). Although it has a published schedule, in most cases trains will not wait for their departure time. This makes it ill suited to plan around if it’s the only segment of a trip. You’ll usually want to go to the platform whenever you’re ready to leave (odds are you won’t need to wait long). This is the dream of all public transportation, right?&lt;/p&gt;

&lt;h3 id=&quot;planning-over-one-day-in-advance&quot;&gt;Planning over one day in advance&lt;/h3&gt;

&lt;p&gt;Although Eki Bright has access to timetables for weekdays, weekends, and holidays, selecting a schedule other than the current day’s is not currently supported. Also, DIY routes are assumed to be temporary and reset at the end of the day. Therefore, you can’t use Eki Bright to plan routes in advance.&lt;/p&gt;

&lt;h2 id=&quot;my-progression-of-designing-diy-routing&quot;&gt;My progression of designing DIY routing&lt;/h2&gt;

&lt;p&gt;Eki Bright started as a list of stations and the station timetable for each.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-station-list-timetable-screens.png&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;The station list and station timetable screens in version 1.0&quot; title=&quot;The station list and station timetable screens in version 1.0&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The station list and station timetable screens in version 1.0&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Right before launch, I decided to add the train timetable for each departure as a third layer of the navigation.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-train-timetable-multiple-railways.gif&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;The train timetable screen with a train that runs multiple railways&quot; title=&quot;The train timetable screen with a train that runs multiple railways&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The train timetable screen with a train that runs multiple railways&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This was arguably unnecessary, but as soon as I added it, I immediately found it useful. I could now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Check which stations any train stopped at.&lt;/li&gt;
  &lt;li&gt;Check the arrival time of the train at my destination station.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a single-segment trip, this was useful enough. I started using Eki Bright for more than I originally expected to.&lt;/p&gt;

&lt;p&gt;However, this interface didn’t work for two segment trips that required a transfer. To work around the limitation, I needed to make a mental note of the arrival time of the first segment, then go back to the home screen and search for that station. But this would mean I lost access to the timetable of the first train.&lt;/p&gt;

&lt;p&gt;From here, the next logical step was linking a station in the train timetable screen to its station timetable. This would make it quicker to tap through and see the departure and arrival times for the full route, but I’d need to pop the stack to see earlier times.&lt;/p&gt;

&lt;p&gt;After creating some other features, I finally decided to tackle routing. My idea was maintain a bottom toolbar that floated above all screens and showed the route as the user was assembling it. I added a button to each station on the train timetable screen to allow the user to add a departure or arrival station to a route segment.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-route-bar-train-timetable.png&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Train timetable screen with add-to-route buttons at each station&quot; title=&quot;Train timetable screen with add-to-route buttons at each station&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Train timetable screen with add-to-route buttons at each station&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This UI immediately solved a lot of my problems. The implementation was more difficult than I expected though. I wanted to support alternate departures out of the gate, and alternate departures need to account for a selected destination segment since not all trains go to all destinations. Plus I needed to show the user when the route configuration was not temporally possible. All the usual hardening aspects of creating a production-ready feature.&lt;/p&gt;

&lt;p&gt;But once I had the chance to use DIY routing in the field, I found it &lt;em&gt;fun&lt;/em&gt;. Tapping through a couple screens, choosing my trains, switching up my departure times on the fly; I felt like I was in full control.&lt;/p&gt;

&lt;p&gt;It was an obvious next step to add Live Activities and Dynamic Island support (which presented their own implementation challenges). Once these were implemented, DIY routes felt even more like the logical jumping off point for several other features that continued to improve the experience of riding trains.&lt;/p&gt;

&lt;p&gt;The last complementary feature I added before taking a breather was share cards. I found myself often screenshotting and cropping the route bar after I’d created a DIY route and sending it via messaging apps to my friends to tell them when I’d arrive to meet them. So I added a share button and made an attractive little PNG image that’s easy to copy or export to share.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-share-cards.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;A sampling of various DIY route share cards from the Eki Bright marketing images&quot; title=&quot;A sampling of various DIY route share cards from the Eki Bright marketing images&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A sampling of various DIY route share cards from the Eki Bright marketing images&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From my past product experience, having some sort of shareable content is a surefire way to increase interest in your app. For a train timetables app, external sharing is a tough proposition. But hopefully these share cards will help spread the word assuming I can get enough users to the bottom of that long funnel.&lt;/p&gt;

&lt;h2 id=&quot;how-to-convinceteach-people-to-tryuse-diy-routing&quot;&gt;How to convince/teach people to try/use DIY routing&lt;/h2&gt;

&lt;p&gt;After developing this feature from scratch and using it for a few months, I’m sold. I think DIY routing is great and I use it for 90% of my trips around Tokyo.&lt;/p&gt;

&lt;p&gt;But I’ll admit I haven’t figured out a way to convince people to try using DIY routing in Eki Bright. This blog post is a way to get my thoughts and arguments in order.&lt;/p&gt;

&lt;p&gt;I spent a couple weeks gently polishing the UX and adding the Live Activities feature in order to make the effort of making a DIY route better rewarded. But now I need to actually convince users to try it, and also effectively teach them how to use it.&lt;/p&gt;

&lt;p&gt;Is the most effective teaching method tooltips? An interactive onboarding? A video tutorial? All of the above? This will be a future task.&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jan 2025 10:43:00 -0600</pubDate>
        <link>https://twocentstudios.com/2025/01/24/eki-bright-the-case-for-diy-routing/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/01/24/eki-bright-the-case-for-diy-routing/</guid>
        
        <category>ekibright</category>
        
        
      </item>
    
  </channel>
</rss>
