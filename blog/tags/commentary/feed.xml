<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>twocentstudios</title>
    <description>A coding blog covering iOS, Swift, and other programming topics.</description>
    <link>https://twocentstudios.com/blog/tags/commentary/index.html</link>
    <atom:link href="https://twocentstudios.com/blog/tags/commentary/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 19 Aug 2025 23:16:57 -0500</pubDate>
    <lastBuildDate>Tue, 19 Aug 2025 23:16:57 -0500</lastBuildDate>
    <generator>Jekyll v3.9.3</generator>
    
      <item>
        <title>Cookpad: A Retrospective</title>
        <description>&lt;p&gt;It’s been almost 5 years since my last series of posts, and 8 since &lt;a href=&quot;/2015/11/03/timehop-a-retrospective/&quot;&gt;Timehop: A Retrospective&lt;/a&gt;. As my last day as an iOS engineer at Cookpad was June 30th, 2023, it’s time to start another chapter of this blog.&lt;/p&gt;

&lt;p&gt;While I only published publicly twice on the Cookpad developer blog (&lt;a href=&quot;https://techlife.cookpad.com/entry/2019/06/14/160000&quot;&gt;Working with AWS AppSync on iOS&lt;/a&gt; and &lt;a href=&quot;https://techlife.cookpad.com/entry/2023/06/21/162523&quot;&gt;Path Drawing in SwiftUI&lt;/a&gt;), on our company internal blog I wrote nearly 90 posts, including tutorial videos and recorded presentations. At the time I knew I’d regret publishing internally only, but the ease of writing for a known audience was too hard to break from.&lt;/p&gt;

&lt;p&gt;In my next phase, I’ll be making up for lost time. However, for the moment, I’ll try to recap the last ~6 years at Cookpad.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;I worked in some capacity in 7 departments at Cookpad over my tenure, mostly as an iOS engineer, but also in and around AR, IoT, hardware, and ML. From my perspective, management at Cookpad was always encouraging of inter-company movement of engineers, even at smaller scales like 2-3 months (“study abroad”). I certainly appreciated these opportunities.&lt;/p&gt;

&lt;p&gt;For context, I worked for Cookpad remotely from Chicago for Cookpad Japan for 6 months starting in April 2017. I moved to Japan in October 2017 and have lived here since.&lt;/p&gt;

&lt;h2 id=&quot;cookpad-global&quot;&gt;Cookpad Global&lt;/h2&gt;

&lt;p&gt;I started off on the &lt;a href=&quot;https://apps.apple.com/gb/app/cookpad-find-share-recipes/id585332633&quot;&gt;Cookpad Global&lt;/a&gt; team.&lt;/p&gt;

&lt;p&gt;On Global I learned of the complexities of supporting a fully internationalized app, especially in the era where Apple’s support for things like right-to-left languages was still primitive. I learned how intentional distributed work must be while working with groups in the UK and Japan from both Chicago and Japan. I re-learned that premature scaling (choose your preferred definition of “premature” and “scaling”) is perhaps the most irrecoverable mistake startups can make. I continued to refine and put into practice my ideas about unidirectional architecture, immutable view models, and the tradeoffs of functional reactive systems.&lt;/p&gt;

&lt;p&gt;It was a unique team where I worked closely with teammates from dozens of nationalities and cultures.&lt;/p&gt;

&lt;p&gt;My three biggest (non-solo) projects were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Converting our app’s navigation layer to use the nascent coordinator pattern.&lt;/li&gt;
  &lt;li&gt;Rewriting our recipe editor.&lt;/li&gt;
  &lt;li&gt;Rewriting our login module to support region switching, new OAuth services, and Apple’s new Safari APIs specifically for login.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;studio-satellite&quot;&gt;Studio Satellite&lt;/h2&gt;

&lt;p&gt;Next was &lt;a href=&quot;https://apps.apple.com/us/app/cookpad-studio/id1464118207&quot;&gt;Cookpad Studio Satellite&lt;/a&gt;, a startup project within the Cookpad TV organization with a team of around 5. Our goal was to make an app where any cook could easily shoot and edit their own quick-cut recipe video from their iPhone. In later stages pre-launch, we even bolted on a social network that included all the mainstays: a feed, likes, comments, profiles, etc.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/cookpad-studio-satellite.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Video editor timeline of a pre-release version of Cookpad Studio Satellite&quot; title=&quot;Video editor timeline of a pre-release version of Cookpad Studio Satellite&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Video editor timeline of a pre-release version of Cookpad Studio Satellite&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On this project I learned that I love prototyping, working on zero-to-one ideas, working with small teams, and having input (whether true or imagined) into the full product development process. I learned that there will always be stakeholders and that check will always come due.&lt;/p&gt;

&lt;p&gt;I learned that sometimes your first users aren’t who you originally thought they’d be. Specifically: we had a dedicated group of community managers from the Global division beta testing from the early versions of the app and giving us very detailed feedback, and yet we never treated them as our “real” users, instead sticking to our original plan of eventually launching to more traditional Cookpad users. It’s speculation, but with some hindsight, I think those community managers could have a been the perfect group to seed the app to and grow from.&lt;/p&gt;

&lt;h2 id=&quot;interlude-wwdc-2019&quot;&gt;Interlude: WWDC 2019&lt;/h2&gt;

&lt;p&gt;I attended WWDC for the first time 2019 with a small group of iOS engineers from Cookpad Japan and Cookpad Global. It turned out to be a massive year: iOS 13, SwiftUI, Combine, UICollectionViewDiffableDataSource, dark mode, etc. And it was also the final year of the “classic” in-person WWDC format before COVID19.&lt;/p&gt;

&lt;h2 id=&quot;oicy-smart-kitchen&quot;&gt;OiCy (Smart Kitchen)&lt;/h2&gt;

&lt;p&gt;During a transitional period, I built a one-off app for the Smart Kitchen team. Our team used the app to present a concept during the &lt;a href=&quot;http://smartkitchensummit.mars.bindcloud.jp/food-innovation.co/sksj2019/index.html&quot;&gt;Smart Kitchen Summit Japan 2019&lt;/a&gt; conference. From concept to presenting the fully functioning app at the conference, it was less than 2 weeks. The app interfaced with a connected oven, inductive cooktop, condiment dispenser, and &lt;a href=&quot;https://thespoon.tech/cookpad-has-100m-active-monthly-users-broadens-into-original-hardware-design-with-a-hard-soft-water-device/&quot;&gt;variable hardness water dispenser&lt;/a&gt;, and was remote controlled via the Multipeer Connectivity framework.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/cookpad-oicy-sksj-2019-presentation.png&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;A video still from the OiCy Smart Kitchen Summit Japan 2019 presentation showing a hardware-integrated recipe app prototype.&quot; title=&quot;A video still from the OiCy Smart Kitchen Summit Japan 2019 presentation showing a hardware-integrated recipe app prototype.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A video still from the OiCy Smart Kitchen Summit Japan 2019 presentation showing a hardware-integrated recipe app prototype.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Through the unique scope of this project – a one-off demo app used for a conference presentation – I learned how to radically tailor my development style to some given constraints. It can be surprisingly difficult to choose between development techniques that I know well and work well for 1M+ user-facing apps, and hacky techniques that get the prototype shipped by the end of the day.&lt;/p&gt;

&lt;p&gt;In the end, the presentation was a success, but the smart kitchen division closed down a year or so later in late 2020.&lt;/p&gt;

&lt;h2 id=&quot;rd&quot;&gt;R&amp;amp;D&lt;/h2&gt;

&lt;p&gt;I joined the R&amp;amp;D division with a remit to prototype and productionize various R&amp;amp;D technologies under active research by our team of 5-10. I shipped an MVP that integrated image recognition into an app flow to estimate calories. This was another project that was developed and released internally within a few weeks.&lt;/p&gt;

&lt;p&gt;My next big project was using image recognition to filter food photos in the main Cookpad’s recipe photo picker. The main challenges were converting the machine learning model to Core ML and doing all processing transparently on device as a background task for potentially hundreds of thousands of photos. The feature was released for a brief period in beta, but was later rolled back after changes to privacy settings in iOS 14 rendered it too low impact to justify continued maintenance. However, my teammate and I won &lt;a href=&quot;https://www.j-platpat.inpit.go.jp/c1800/PU/JP-7011011/3CE2815D9318E761AA5124BCD9A289ED1CEE4E6EE230751AC357FDA198F0AC47/15/en&quot;&gt;patent JP,2022-040842,A&lt;/a&gt; (&lt;a href=&quot;https://patents.google.com/patent/US20230196769A1/en?oq=2023/0196769&quot;&gt;US patent&lt;/a&gt; is still pending) for the design of the feature.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/cookpad-patent-art.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Diagram from food photo filter patent&quot; title=&quot;Diagram from food photo filter patent&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Diagram from food photo filter patent&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, I worked with a small group of R&amp;amp;D members on an RGB and thermographic camera system placed above one’s stovetop. As an R&amp;amp;D project, the scope of this project changed significantly over its lifetime. I wrote algorithms in Python for image registration, investigated HLS video streaming over AWS, and built myriad apps and tools in Swift and SwiftUI to move this data around.&lt;/p&gt;

&lt;p&gt;Many of my projects during my time in R&amp;amp;D were short explorations. I researched, mostly from the applied technology side, topics like image segmentation, image classification, image inpainting, ML sound classification, pose detection, automatic video editing, and image generation with Stable Diffusion, ControlNet, and Textual Inversion.&lt;/p&gt;

&lt;p&gt;However, my persistent focus in R&amp;amp;D was the field of augmented reality. This started with building a “recipe playground” app built in Unity for the Microsoft HoloLens 2 and used in the kitchen. Later, I began building prototypes with Apple’s ARKit and RealityKit for iOS, with the knowledge that &lt;em&gt;eventually&lt;/em&gt; Apple would release a headset (Apple Vision Pro, announced at WWDC 2023).&lt;/p&gt;

&lt;p&gt;Although my primary role was R&amp;amp;D during this period, I split my time on a few other teams as well, working an average of 2-3 days a week on each.&lt;/p&gt;

&lt;h2 id=&quot;cookpad-japans-recipe-app&quot;&gt;Cookpad Japan’s recipe app&lt;/h2&gt;

&lt;p&gt;I did a brief stint working part-time on Cookpad’s flagship &lt;a href=&quot;https://apps.apple.com/us/app/%E3%82%AF%E3%83%83%E3%82%AF%E3%83%91%E3%83%83%E3%83%89-no-1%E6%96%99%E7%90%86%E3%83%AC%E3%82%B7%E3%83%94%E6%A4%9C%E7%B4%A2%E3%82%A2%E3%83%97%E3%83%AA/id340368403&quot;&gt;recipe app&lt;/a&gt; for the Japanese market as an iOS individual contributor. My biggest contribution was a recipe module presented when opening a recipe from an external source that included paging behavior between recommended recipes. The design spec was surprisingly complex and required significant planning work, experimentation, and eventually a custom UICollectionViewLayout.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/cookpad-japan-recipe-carousel.gif&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Recipe carousel in the Cookpad Japan app&quot; title=&quot;Recipe carousel in the Cookpad Japan app&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Recipe carousel in the Cookpad Japan app&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;tabedori&quot;&gt;Tabedori&lt;/h2&gt;

&lt;p&gt;I joined the &lt;a href=&quot;https://note.com/tabedori/&quot;&gt;Tabedori&lt;/a&gt; team part-time for around 2 years. Tabedori was service within – but separate from – Cookpad run by a small team of between 4-8 members. I was originally slated to cover iOS duties for the 3 months of a coworker’s childcare leave, but the product and team resonated so well with me that I stayed until the product was discontinued in 2023.&lt;/p&gt;

&lt;p&gt;The service always served to teach people how to cook without recipes, but advanced through nearly 7 different versions over its lifetime, with myself contributing mostly as an iOS engineer for 2.5 versions. The first version I worked on was still primarily a UIKit codebase, but I added a chat system in SwiftUI, and then the final 2 versions of the app were all SwiftUI. It was the perfect environment for me to dive deep into the details of SwiftUI to understand its constantly evolving limitations from iOS 13 through 16 in real shipping app with a very opinionated style guide.&lt;/p&gt;

&lt;p&gt;One of my favorite eras was participating in 2 intense prototyping and exploration periods between versions 5 and 6, then versions 6 and 7. It was during this time we developed, iterated, pitched, and discarded dozens of prototypes individually and as a team, working towards a release. In a short period I learned so much about animations, gestures, navigation, and rapid UI development in SwiftUI, while also considering the product and design angles.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/cookpad-tabedori-v7.jpg&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;Tabedori version 7, developed with SwiftUI&quot; title=&quot;Tabedori version 7, developed with SwiftUI&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Tabedori version 7, developed with SwiftUI&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cookpad-global-redux&quot;&gt;Cookpad Global Redux&lt;/h2&gt;

&lt;p&gt;I was invited to visit the Global headquarters in Bristol, UK for 2 months in late 2022. I had the chance to revisit a codebase I hadn’t touched in 3 years while working alongside new and old coworkers and cooking in the office kitchen.&lt;/p&gt;

&lt;p&gt;By this point the Cookpad Global iOS codebase and development process had matured significantly. I dove back into UIKit and specifically UICollectionViewDiffableDataSource and helped build an interface for exploring machine translated recipes from other countries.&lt;/p&gt;

&lt;h2 id=&quot;cookpad-mart&quot;&gt;Cookpad Mart&lt;/h2&gt;

&lt;p&gt;After a company-wide restructuring in 2023, I found a new home in &lt;a href=&quot;https://apps.apple.com/us/app/%E3%82%AF%E3%83%83%E3%82%AF%E3%83%91%E3%83%83%E3%83%89%E3%83%9E%E3%83%BC%E3%83%88-%E3%82%AF%E3%83%83%E3%82%AF%E3%83%91%E3%83%83%E3%83%89%E5%85%AC%E5%BC%8F/id1434632076&quot;&gt;Cookpad Mart&lt;/a&gt; for my final few months at Cookpad. I had been a long-time user of Cookpad Mart’s unique grocery delivery service since its early days and was looking forward to improving the service through the iOS app, its primary client-side interface.&lt;/p&gt;

&lt;p&gt;As an e-commerce startup, Cookpad Mart has the conflicting goals of being stable, robust, and bug-free enough to support reliable exchanges of goods for payment, while also needing to iterate quickly to find product market fit and profitability. I was incredibly humbled jumping in and seeing the evolution of a 5 year old codebase and how the alumni iOS engineers had handled these constraints. Much of the required reliability came from systems built &lt;em&gt;around&lt;/em&gt; the codebase, rather than the codebase itself: test plans in every pull request, thorough code reviews, a weekly release cadence automated to the bone, “tap parties” where all iOS team members get together to thoroughly test each new feature, rotating QA participation from the product and design departments, and finally a culture of bug fixes being high priority.&lt;/p&gt;

&lt;p&gt;Unfortunately, the Mart service itself underwent a massive pivot almost immediately after I joined the team.&lt;/p&gt;

&lt;h2 id=&quot;the-end-of-the-story&quot;&gt;The End of the Story&lt;/h2&gt;

&lt;p&gt;Cookpad as a company went through some significant turmoil starting in early 2023 with the departure of the Japan CEO, then a call for a round of &lt;a href=&quot;https://pdf.irpocket.com/C2193/NJLt/hAIz/SDEh.pdf&quot;&gt;voluntary retirements (PDF)&lt;/a&gt; in February, a &lt;a href=&quot;https://pdf.irpocket.com/C2193/CaoZ/acVo/MlYT.pdf&quot;&gt;CEO change (PDF)&lt;/a&gt; in May, and finally a &lt;a href=&quot;https://pdf.irpocket.com/C2193/CaoZ/qmSw/IQUI.pdf&quot;&gt;larger round (PDF)&lt;/a&gt; of voluntary retirements in June.&lt;/p&gt;

&lt;p&gt;I was part of that last round of voluntary retirements.&lt;/p&gt;

&lt;p&gt;My honest thoughts? It was good time for me to go. I’ve been immersed in solving problems in the food and cooking domain for these past 6 years. Although I’ve always considered cooking a genuine interest – especially in the context of moving to a different country – there are several other domains that I’d like to explore.&lt;/p&gt;

&lt;p&gt;So cheers to a good ride. The part I’ll miss most is working with so many kind and talented coworkers, hopefully at least a few of which I’ll be able to work with again.&lt;/p&gt;

</description>
        <pubDate>Wed, 18 Oct 2023 17:25:00 -0500</pubDate>
        <link>https://twocentstudios.com/2023/10/18/cookpad-retrospective/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2023/10/18/cookpad-retrospective/</guid>
        
        <category>retro</category>
        
        <category>commentary</category>
        
        
      </item>
    
      <item>
        <title>On Learning Japanese</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;This is a heavily autobiographical (and most likely boring) post. If you’ve ever done a deep dive into language learning, you may find it interesting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This past year, I’ve revitalized my efforts to learn Japanese. In the process, I’ve learned a lot about how I learn. This post is personal summary of the efforts of my distant past, recent past, and present.&lt;/p&gt;

&lt;h2 id=&quot;distant-past&quot;&gt;Distant Past&lt;/h2&gt;

&lt;p&gt;I started learning Japanese during my Sophomore year in college. The College of Engineering at the University of Illinois at Urbana-Champaign requires three semesters (or the equivalent three years of high school classes) of foreign language study in order to graduate.&lt;/p&gt;

&lt;p&gt;My options at the time were to continue with Spanish (I’d taken two uneventful years in high school and absorbed nothing), or start from the beginning with Japanese. After a lot of thought, I chose the harder, but more rewarding path of studying Japanese.&lt;/p&gt;

&lt;p&gt;I’ve always been interested in Japanese culture, all the way back to middle school. As far as the language though, I was starting from scratch.&lt;/p&gt;

&lt;p&gt;For 18 months straight, I was in Japanese class for one hour a day, five days a week. My memories of those classes consist of great pain. They were difficult. The homework was brutal. I remember staying up until 4am at least a few times a week copying kanji stroke-by-stroke hundreds of times into scratch notebooks. I remember cutting up notecards and making hundreds of flashcards for words I could barely write or pronounce at the time. I remember cramming for grammar tests five minutes before class started every day.&lt;/p&gt;

&lt;p&gt;I struggled. I think I got sympathy B minuses because I put in the effort and worked hard (but probably not smart). I even went so far as to retake (as an auditor) the second level class during the summer between my Sophomore and Junior year.&lt;/p&gt;

&lt;p&gt;My struggles came from a few places:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Curriculum&lt;/strong&gt;: We used the Nakama series books. Which weren’t/aren’t bad. But they often lacked nuance in explaining word choice and grammar. A lot of the exercises leaned heavily on in-class participation which there wasn’t always a lot of time for. And as I’ve found, it’s usually a mistake to learn anything from one source.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Teaching&lt;/strong&gt;: My teacher for my first two semesters was super super nice. She was a grad student from Japan studying classical piano at UIUC. Unfortunately, her English wasn’t fantastic and her lack of linguistics or teaching experience showed at times. My professor for third semester was a lot more qualified, and I ended up doing a lot better that class.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Technology&lt;/strong&gt;: Technically the spaced repetition software Anki was around when I was studying, and I think I remember trying it briefly. I had already done a lot of manual work making flashcards though, and the concept of entering all of my vocab words into a computer program seemed like even more work, and less mobile capable. In the several years since that time, technology has matured significantly.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Divided Attention&lt;/strong&gt;: Taking a full load of Engineering classes is no walk in the park. At the time, I could never have a singular focus in learning Japanese, which is something I’ve found to be important to my success in the years since. There were plenty of occasions that even when my motivation for learning was at its peak, I just didn’t have the time or mental energy to give.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lack of Extracurricular Practice&lt;/strong&gt; I’m admittedly not the most outgoing person. I never ended up making any Japanese friends around campus to do language exchange with (until study abroad), so my immersion was localized to my daily hour of Japanese class.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cram-Exam-Forget Cycle&lt;/strong&gt;: Because I was taking these classes for a grade (that would be weighted heavily into my GPA), it was easy to fall into the cram-exam-forget cycle where I could cram all the vocab into my brain the night before, do alright on the exam, then immediately forget it all the next day and still do alright grade-wise. But there was no motivation to keep up vocab and grammar from previous chapters (besides the inevitable studying for finals).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That reads like a long list of excuses, but truly, the real thing holding me back was that I never sat back and pictured myself as a fluent speaker of Japanese. It was easier to tell myself and others, “I’m just not good at learning languages.” And honestly, it’s a line of thinking I still struggle with.&lt;/p&gt;

&lt;p&gt;After my third semester was finished, I was no longer under any obligation to continue my language studies. It was a difficult decision, but I ended up concluding that it’d be for the best for focus those five credit hours on my Engineering studies rather than continue onto a fourth level of Japanese since I wasn’t pursuing a double-major.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As an aside, it’s really frustrating how the university/grading system can warp your priorities. It’s all too common for short term gains to take precedence over long term learning, and for real internal motivation to be sacrificed for manufactured motivation in the form of a letter on a report card. Formal education can certainly be a double-edged sword at times.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I did, however, make a compromise with myself, and was accepted into a study aboard program for the upcoming Summer. Spending the Summer between my Junior and Senior years in Kanazawa, Japan at Kanazawa Institute of Technology was one of my most memorable experiences of those four years at University.&lt;/p&gt;

&lt;p&gt;The experience itself was incredible, but after taking a semester off from language study, my language courses over the six weeks were one-foot-in-one-foot-out. Being there definitely helped, but it was actually demotivating being around other Americans who seemed to be picking up the language at such a rapid pace compared to myself.&lt;/p&gt;

&lt;p&gt;I promised my senseis that I would keep studying when I got back to America. I sent a few emails to my new Japanese friends over the next few months, but as time slipped by, it took longer and longer to craft even a few sentences in Japanese. As my Senior year progressed and core classes and final projects loomed, Japanese fell to the wayside.&lt;/p&gt;

&lt;p&gt;Towards the end of the year, I applied to Mitsubishi Japan and made it through three interviews before I was rejected. I would have spent three years training in Japan before returning to Chicago. I think it was an Engineering sales job (selling industrial relays or something like that). Not really in my wheelhouse, but the prospect of living in Japan was incentive enough.&lt;/p&gt;

&lt;p&gt;My first job out of school was also an Engineering job that wasn’t necessarily in my wheelhouse, so a few months in I applied to the JET program. The JET program is a program run by the Japanese government that places native English speakers in assistant teaching roles in schools all around Japan. Teaching English is also not in my wheelhouse, but again, at that point I was still young and really wanted to live in Japan. I was convinced that it would be impossible to improve my Japanese outside of Japan.&lt;/p&gt;

&lt;p&gt;I wasn’t accepted to the JET program either, so I continued on my Engineering career path and eventually migrated into software development.&lt;/p&gt;

&lt;p&gt;Over the following years, I stayed in touch with some of the Japanese friends I met during study abroad. I did some quick Japanese cramming before my two week vacations to Japan in 2011 and 2014 just so I didn’t get too lost, but of course nothing ever stuck.&lt;/p&gt;

&lt;h2 id=&quot;recent-past&quot;&gt;Recent Past&lt;/h2&gt;

&lt;p&gt;This brings me to present day. I lived in Sapporo and Nagoya, Japan for three months over this Winter. I spent most of my time working on a (to be open-sourced) Swift iOS app, as well as doing some sightseeing, seeing friends, and eating great food.&lt;/p&gt;

&lt;p&gt;Before I left, I was still undecided about how much time I wanted to contribute to learning Japanese. It wasn’t until my ride to the airport that I downloaded an app I’d heard about called Memrise and started exploring my options.&lt;/p&gt;

&lt;p&gt;Memrise turned out to be a great addition to my routine. On good days, I’d spend about an hour a day reviewing or learning new words before I’d dive into coding.&lt;/p&gt;

&lt;p&gt;My first course on Memrise ended up being a JLPT N5 course. JLPT is the national proficiency test. It’s used by the Japanese government and some larger companies to assess non-native speakers. It’s divided up into five stages of increasing difficulty, N5 being the easiest and N1 being the hardest.&lt;/p&gt;

&lt;p&gt;One of the pros of the JLPT curriculum is that since it is so popular, there are a wealth of materials available for it and lots of people who are in the same boat or ahead of me. That translates to less time spent crafting my studying materials and more time learning.&lt;/p&gt;

&lt;p&gt;One of the cons is that in only includes bits and pieces of what would be considered “everyday Japanese”, and thus works better if your goal is to become fluent rather than simply know how to order dinner and talk about the weather.&lt;/p&gt;

&lt;p&gt;So I decided to dip my toe in and do the JLPT N5 course. I’d been previously exposed to around 2/3s of the material through my previous courses which made it much easier to digest. Plus, I was only being tested on the English to Kana and English to Kanji, and therefore only had to “recognize” the Kanji and not necessarily read it.&lt;/p&gt;

&lt;p&gt;Even with my fair pace of study, it took me about 9 weeks (the majority of my time there) to finish the course of all 675 words. Granted, I took a week or two off between my move from Sapporo to Nagoya, and I spent more time with friends in Nagoya. But still, I couldn’t tell if I was proud of myself or I should have pushed myself twice as hard.&lt;/p&gt;

&lt;p&gt;One of the most disappointing parts of the experience was that even after finishing the course, I still was only understanding a word here and there while listening to the conversations of my roommates. I would still clam up and say “I don’t understand” when interacting with shop owners. I realized that drilling vocab was in some ways an avoidance of the speaking, listening, and grammar pillars.&lt;/p&gt;

&lt;p&gt;Not all was lost though. I was getting much quicker at hammering out messages in Japanese through LINE. And with the combination of the awesome Midori Japanese dictionary for iOS and sparing use of Google Translate, the feedback loop was getting tighter, I was learning quicker, and my confidence was growing.&lt;/p&gt;

&lt;p&gt;Upon returning to Chicago after my three months in Japan, I was at another crossroads. Do I push for fluency, maintain my current abilities by reviewing vocab at intervals, or just let it taper off?&lt;/p&gt;

&lt;p&gt;It took a week or two, but I sort of fell into the decision going all out into the JLPT N4 course one lazy Sunday afternoon. This time, however, I elected to learn the Kanji readings as well for the 700 words. I set a goal to finish the remainder of the course (about two-thirds of it) in seven days.&lt;/p&gt;

&lt;p&gt;For that week, I was on the Memrise website for about eight hours a day with frequent breaks for decompression. My pace was about 50 words and Kanji readings per day, although some days I did 25 and others I did 100.&lt;/p&gt;

&lt;p&gt;The experience tested the limits of my memory and the limits of my frustration. Although I was only learning 50 new words a day, in reality, I was just adding to the pile of linguistic debt, because I would have to review those 50 words the next day, and the 50 words from the day before, etc. A few days in and I would wake up to 400 words to review. Reviewing those words would take the entire afternoon and evening, and it would be 11pm before I’d start learning my new set of words.&lt;/p&gt;

&lt;p&gt;I finished the remainder of the course in a little under two weeks instead of one. It was a really fascinating experience pushing myself to the limits of my abilities in a significantly different way than programming does. I learned (and am still learning) a lot of meta things about how I learn best, especially when it comes to rote memorization.&lt;/p&gt;

&lt;p&gt;A few lessons I’ve learned. First, starting with mems:&lt;/p&gt;

&lt;p&gt;At this point, I still have mixed feelings about mems. Memrise has heavy emphasis on mems in their interface. Mems, or mnumonics, are a memorization technique used as sort of mental scaffolding to connect a new word to something you previously know. The mem assists in the process of learning and forgetting the word until finally, the mem is no longer needed and fades away.&lt;/p&gt;

&lt;p&gt;In college, I knew about mems but never used them. I did a lot of writing over and over in a notebook (which doesn’t help &lt;em&gt;at all&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;I was still anti-mems until about half way through my Week of Pain. I quickly realized that when I was blazing through learning my new words for the day (exhausted at 11pm), I was putting them in the shortest of short term memory and simply deferring their learning until the next day. The next day’s review was as bad as learning them for the first time.&lt;/p&gt;

&lt;p&gt;I found that, during my vocab introduction sessions, when I slowed myself down and spent time crafting a mem for each word, my sessions the next day went about 75% better. It took some extra time recalling my mems before my brain got to the final word, but it made a huge difference having that initial foothold to latch onto. That first review actually felt like a review and not learning for the first time. After this experience, I was (finally) sold on the value of mems.&lt;/p&gt;

&lt;h2 id=&quot;present&quot;&gt;Present&lt;/h2&gt;

&lt;p&gt;So I finished my 700 word JLPT N4 course, did some extra review of the words on the automated Memrise schedule, was feeling pretty good about things, then went on vacation for a week and didn’t touch it.&lt;/p&gt;

&lt;p&gt;Getting back into it was &lt;em&gt;painful&lt;/em&gt;. Sitting down and seeing 900 words to review was bad, but going through that first session and not recognizing more than half the words was heartbreaking and demoralizing.&lt;/p&gt;

&lt;p&gt;I found myself at another crossroads. Do I continue on to JLPT N3 (which has about 4x as many words and kanji) or should I get back to full time programming?&lt;/p&gt;

&lt;p&gt;I wrestled with it, but ended up taking about four days to power through the vocab review anyway. Once I finished and started looking into JLPT N3 courses, I couldn’t find the exact type and quality I wanted. If was going to dig into another two month process, I definitely wanted to make sure the curriculum is as polished as possible.&lt;/p&gt;

&lt;p&gt;Unfortunately, the more I do outside of SRS/Memrise, the more I realize that sort of one-dimensional studying helps very little in the long run. I have a hard time recognizing words in context, and I have a feeling that doing more rapid-fire vocab SRS isn’t the answer.&lt;/p&gt;

&lt;p&gt;The other problem is that because I decided to jump straight to vocab and skip learning radicals, kanji meanings, and kanji readings, each vocab word feels very isolated. The effect of learning should be multiplicative instead of additive. I don’t necessarily regret doing all the work I’ve done so far. I’ve learned a lot about learning and about myself through those intensive studying experiences. And having been exposed to these vocab words at least once will undoubtedly help when I see them again.&lt;/p&gt;

&lt;p&gt;Over the last few weeks, I’ve tentatively decided to try out a different SRS program to see if I can rectify some of these deficiencies. I had come across Wanikani before, but at the time wasn’t ready to commit to it. After working with Memrise, I have greater appreciation for Wanikani’s benefits. Some of these benefits are: learning radicals first, building to kanji, then building to vocab; starting with easy kanji first and composing them into more complex kanji later (even if the easy kanji represent more complex concepts); learning both the English and Japanese readings; embracing mnemonics (and not having to create my own); getting two full practice sentences with each vocab word; and having a large community going through the exact same curriculum.&lt;/p&gt;

&lt;p&gt;That being said, the first couple weeks haven’t been all roses. The pace right now is significantly slower than I got used to with Memrise and there’s no way to go faster by design. This might be a good thing, I’m not sure if my word retention will be better in the long run. I currently have more time to commit to learning Japanese, so I’d like to spend more time if I can (if my brain can handle it).&lt;/p&gt;

&lt;p&gt;The other problem is that Wanikani is very strict with input. Just knowing the concept of something isn’t enough. You have to know its exact English phrasing when being tested on kanji -&amp;gt; English. Going from kanji -&amp;gt; English is a new test type for me though, so I may get better at it.&lt;/p&gt;

&lt;p&gt;I’m still adjusting to Wanikani’s mnemonics. I usually remember the whole story after 2 hours, bits and pieces of it after 1 day, just enough to get the right answer after 2 days, then by the 3rd day, I’ve forgotten it and can’t remember the readings without them. I have a feeling I’ll get better at internalizing the stories, but it’s going to take more effort on my part.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a sidebar, that’s the huge paradigm shift with SRS. I’ve always been taught through 16+ years of school that “the more time you put in, the better you’ll do”. SRS actually teaches the opposite, that if you study just a little bit at specific times, you’ll actually remember &lt;em&gt;more&lt;/em&gt; than you would if you studied continuously and never allowed yourself to get the edge of forgetting. Sort of the culmination of the “work smart, not hard” mentality. I’m definitely hoping that once I get through a few more levels in Wanikani that I’ll be able to prove to myself that the “burned” kanji/vocab (aka the kanji/vocab that I’ll allegedly remember forever without needing to study it anymore) will actually be burned forever. So in the mean time, I sit here all anxious waiting for my next review time when my natural instinct is to &lt;em&gt;keep hitting the books!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Outside of Wanikani, I’ve been slowly making my way through some classic Japanese childrens’ books. I might punt on those for a while because they’re not as useful as I’d hoped they’d be. They’re mostly written in hirigana and thus are hard to parse. Plus, there are a lot of outdated words and phrases.&lt;/p&gt;

&lt;p&gt;I might try to dive into NHK Easy News more, but I’m still missing a lot of the necessary vocab. I’ve read that at around Wanikani level 30 you’re at the point where you know enough that reading basic texts isn’t as painful anymore (or in other words, you know enough vocab that you can get the gist of a sentence and keep your rhythm while reading). Maybe in the mean time it makes more sense to really hunker down on grammar. Maybe not.&lt;/p&gt;

&lt;p&gt;I’ve been watching some old Digimon Adventure 02 episodes in Japanese. These are good for listening practice, but still above my current level. I can follow along getting bits and pieces of the dialogue, but eventually my brain gets fatigued and I can no longer keep up with the realtime “have I heard this word before?” game I have to play while checking the subtitles.&lt;/p&gt;

&lt;p&gt;My final curriculum addition has been to start reading the non-fiction book &lt;em&gt;Moonwalking With Einstein&lt;/em&gt; by Joshua Foer, a book about memorization told through personal anecdotes. I’m hoping to pick up a few tips and tricks, or at least get an interesting read out of it.&lt;/p&gt;

&lt;h2 id=&quot;future&quot;&gt;Future&lt;/h2&gt;

&lt;p&gt;I’d like to write more about my successes and failures as my studies progress. Wish me luck.&lt;/p&gt;

&lt;p&gt;If you’ve gone through a similar journey or are just starting one, I’d love to chat about it. Feel free to contact me on Twitter &lt;a href=&quot;https://twitter.com/twocentstudios&quot;&gt;@twocentstudios&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Apr 2016 19:26:31 -0500</pubDate>
        <link>https://twocentstudios.com/2016/04/06/on-learning-japanese/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2016/04/06/on-learning-japanese/</guid>
        
        <category>japanese</category>
        
        <category>commentary</category>
        
        
      </item>
    
      <item>
        <title>Timehop: A Retrospective</title>
        <description>&lt;p&gt;I worked at &lt;a href=&quot;http://timehop.com&quot;&gt;Timehop&lt;/a&gt; as an iOS Engineer for almost two and a half years. The experience meant a lot to me both personally and professionally, and I believe it set me on the right course for my future in this industry.&lt;/p&gt;

&lt;p&gt;Here are a few thoughts I have about what I learned along the way. Granted, most of them are the kind of lessons you come across every other day in Medium posts from those in the industry, but it feels important to have lived them first hand.&lt;/p&gt;

&lt;h2 id=&quot;shipping&quot;&gt;Shipping&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are a million reasons not to ship… but you have to ship anyway.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My most important lesson was learning to scope down to the bare essentials and compromise on bugs. It’s easier to argue for project scope than it is for whether a bug is a “show-stopper”, but it’s important to always have the idea of shipping resting heavily on your shoulders pushing you to make the hard decisions.&lt;/p&gt;

&lt;p&gt;Over time I got a lot better at understanding how design and engineering decisions affect scope and shipping schedules. Most of that is gained with experience. When you’re first starting out, coming up with one solution to an engineering problem is cause for celebration. But when you need to get that feature out the door in two weeks instead of two months, that’s when as an engineer, you need to have three potential solutions in your head and understand the cost/benefit for each. Then, you need to communicate those concerns clearly to the rest of the team so that everyone is on the same page with the tradeoffs that have to be made.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I can get a prototype out to our beta group in three days, but if it’s successful, I’ll need to more or less start over with an alternate implementation to make it scale to the rest of our user base. Is that acceptable?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A simple example of this that came up time and again was receiving designs for custom views and components that worked just slightly differently than the standard iOS components. I would have to evaluate each component, create a time estimate, then report back to the product manager and tell them, “hey, this navigation paradigm is slick, but it will stick out like a sore thumb from the rest of our app and I can ship two days faster by using a built-in component. Are you sure you want to do it this way?” Some of the time, the answer would be, “No, it doesn’t affect the core user experience enough to warrant the delay.” The remainder of the time, it would be, “It’s worth it. Our hunch is that the navigation will significantly affect uptake of the feature.”&lt;/p&gt;

&lt;p&gt;Of course, that hunch is a gamble. Which leads me to instincts.&lt;/p&gt;

&lt;h2 id=&quot;product-instincts&quot;&gt;Product Instincts&lt;/h2&gt;

&lt;p&gt;Your product instincts will get better with time. What I mean by instincts is your ability to predict the behavior of a diverse and statistically significant amount of people in response to your product or feature (note: your group of close friends is probably not diverse or statistically significant enough). How will they use it? How long will they use it for? Will they use it like you predict they will? Will they even use it at all?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your product instincts will get better with time… but only if you set up your experiments correctly and are brutally honest with yourself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s natural to think of product instinct as something “you have or you don’t”. Psychology and sociology are sciences though, and I believe that applying the scientific method to product can lead to better outcomes for users and for those learning from the results.&lt;/p&gt;

&lt;p&gt;It is absolutely more difficult to design a product experience in a way that is based in a few key hypotheses, facilitates the collection of analytics data, and uses that data to ultimately prove or disprove the original hypotheses. &lt;strong&gt;Without this process product development is simply taking disparate stabs in the dark and crossing your fingers that you’ll hit some abstract goal.&lt;/strong&gt; Not only is it impossible to iterate effectively, it also denies the chance to learn from the outcome of an experiment and improve the instincts of the entire team.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I predicted that users would tap the ‘Follow All’ button 60% of the time, but after one week of data collection it’s only at 15%. I can now begin to ask the next questions such as ‘do users understand the value of following others?’ or ‘do users just not see the button?’.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Forcing yourself and the rest of the product team to make hypotheses isn’t about seeing who was right and wrong at the end of the experiment. It’s not a competition. It’s about forcing yourself to take all of your collective experience into account (and hopefully your direct experience from previous experiments) and draw a line in the sand. It’s all too easy to forget your original hunches when the analytics numbers start rolling in, and by then you’ve missed a great opportunity to adjust your internal biases.&lt;/p&gt;

&lt;p&gt;More often than not, goals of your product experiments will fail and &lt;em&gt;that’s okay&lt;/em&gt;. You’ve learned something. The worst thing you can do is to sweep your failures under the rug. By ignoring failures, you’ll be skipping the most important part of the iteration process: the part where you don’t repeat your mistakes. When you don’t learn from your experiments, each product cycle will be like starting from scratch, never progressing.&lt;/p&gt;

&lt;h2 id=&quot;making-mistakes&quot;&gt;Making Mistakes&lt;/h2&gt;

&lt;p&gt;Ultimately, someone has decide where to start and what path to take from there. As much as a meme the “idea person” has become, leading a product takes legitimate effort. Sustaining the product development cadence can be brutal and unforgiving (especially if you look at it as taking alternating stabs in the dark, which you shouldn’t). Always having the right idea ready to go at the right time is something I respect greatly.&lt;/p&gt;

&lt;p&gt;When I started at Timehop, my primary goal was to improve my craft of iOS development. Having a new feature spec’d out, designed up, and ready to implement is great for that. There were never a shortage of ideas, and thus there was always interesting development work to do. I’ve touched what feels like a dozen disparate iOS frameworks over my tenure, gaining a breadth of knowledge because I was pushed to implement features that on my own I would have judged to be too time consuming or too far out of my comfort zone.&lt;/p&gt;

&lt;p&gt;On the flip side though, I only got a few chances to put my own ideas to the test. For those few chances, I am undoubtedly grateful. However, the rush of nurturing an idea from start to finish is an intoxicating feeling, one that I started to miss dearly as the day to day became implementing feature after feature. It was ultimately the desire to make my own mistakes that nudged me out the door.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;No one has all the answers. No one really knows what they’re doing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I participated in dozens and dozens of product experiments. Features that were pitched as sure wins often failed the hardest. Features that were incremental improvements or minor changes in response to something as innocuous as required Apple API deprecations sometimes produced our largest user influxes. At some point you have to come to terms with knowing that no one has all the answers and you have to brace yourself for a bumpy ride.&lt;/p&gt;

&lt;h2 id=&quot;the-people&quot;&gt;The People&lt;/h2&gt;

&lt;p&gt;My favorite part about coming into work every day was working with such an amazing team of people. Team Timehop was both fun and talented, and inspired me to do some of my best work.&lt;/p&gt;

&lt;p&gt;It was an honor to be part of something that brings joy to the lives of millions of people.&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Nov 2015 06:19:53 -0600</pubDate>
        <link>https://twocentstudios.com/2015/11/03/timehop-a-retrospective/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2015/11/03/timehop-a-retrospective/</guid>
        
        <category>retro</category>
        
        <category>commentary</category>
        
        
      </item>
    
      <item>
        <title>TDD, RSpec &amp; Conway&apos;s Game of Life</title>
        <description>&lt;p&gt;On my continuing quest to do more micro-projects, I decided to begin focusing on TDD today. After doing a little RSpec Googling, I came across &lt;a href=&quot;https://vimeo.com/31403388&quot;&gt;this live coding&lt;/a&gt; video for doing TDD with RSpec on &lt;a href=&quot;http://en.wikipedia.org/wiki/Conway&apos;s_Game_of_Life&quot;&gt;Conway’s Game of Life&lt;/a&gt;, something I hadn’t heard of before.&lt;/p&gt;

&lt;p&gt;After watching about half the video, I realized I was far enough along that I could try it myself. So I took a stab at it doing TDD the whole way. It was actually pretty fun doing a simple OO Ruby project and getting my feet wet with RSpec. I’ve always had this ugly feeling of repeating myself with tests, which is one reason I never could bring myself to write tests upfront for my little Rails projects.&lt;/p&gt;

&lt;p&gt;It turns out (as everyone knows) that testing actually saves the repetition that comes with hand-testing everything in irb. If I had a nickel for every time I sat there banging away at the keyboard constructing objects and relationships in the Rails console just to do a reload and wipe everything out, I’d be rich (and a cliche).&lt;/p&gt;

&lt;p&gt;In any case, it was apparent very quickly that I was really saving myself a lot of headaches by writing tests. The feedback loop was much quicker writing tests first. Fixing bugs and not having to re-establish all of your test setup by hand each time makes it much easier to focus on the bug at hand. And this was just for a three-class micro-project. I can only imagine how much headaches testing saves in large scale Rails projects.&lt;/p&gt;

&lt;p&gt;RSpec was actually a lot more intuitive than I expected. It helped that I found an old cheat sheet to kind of guide my thinking of how my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;should&lt;/code&gt; statements should be structured. I tried to keep all the best practices in mind while writing my tests, but I’m sure I missed quite a bit on my first run. Looking back, I probably should have had a few more edge case tests especially on the 4 big rules. I’m still getting used to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;before&lt;/code&gt;, and all the other structural stuff. It doesn’t help that, from what I’ve seen, there seems to be a personal style to writing tests that varies. It varies in both test structure and amount of testing.&lt;/p&gt;

&lt;p&gt;I also forced myself to get a primer on Ruby Debug (using the debugger gem). It’s a little different than I’m used to with the full IDE and the goodies that Xcode offers, but I’m sure it’ll be another useful tool in the toolbox.&lt;/p&gt;

&lt;p&gt;I wrote a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cell&lt;/code&gt; class and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;World&lt;/code&gt; class in what I think was good OO. Then I wrote a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Display&lt;/code&gt; class that handles printing the world to the terminal (and even a little animation). I didn’t write tests for that though, it was kind of a just-for-kicks deal.&lt;/p&gt;

&lt;p&gt;Sidebar: this actually reminds me a lot of the big project we did in my C++ class Sophomore year of high school. We spent what seemed like several months writing all these classes to simulate fish. I can’t remember exactly what the rules were, but I remember it being a bit tough to wrap my mind around. I don’t think I really understood the difference between UI code and game logic back then. I didn’t get that STDOUT was all we really needed for the concepts we were learning. I kept wanting to understand the GUI classes when all that was in the curriculum were the comp sci basics.&lt;/p&gt;

&lt;p&gt;I’m not sure if my code is worth posting to github. I’ll keep it off for now and try to leave room for the more important/interesting projects I’ve got planned.&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Oct 2012 21:22:00 -0500</pubDate>
        <link>https://twocentstudios.com/2012/10/08/tdd/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2012/10/08/tdd/</guid>
        
        <category>commentary</category>
        
        
      </item>
    
      <item>
        <title>&quot;I Wonder If I Could Make Something Like That&quot;</title>
        <description>&lt;p&gt;For as long as I can remember, I’ve been a jack-of-all-trades sort of person.&lt;/p&gt;

&lt;p&gt;Whenever I see someone create something that I enjoy or respect, my immediate response is “I wonder if I could make something like that too”. It’s led to me acquiring all sorts of weird skills and hobbies. Here are some somewhat self-indulgent auto-biographical examples to get things rolling.&lt;/p&gt;

&lt;h2 id=&quot;calculator-programming&quot;&gt;Calculator Programming&lt;/h2&gt;

&lt;p&gt;Since this is a programming blog, I’ll start with an example about my first experiences with writing code. I’ve been playing around with computers for as long as my family had one (Dell, Intel Pentium, Windows 3.1). But it was freshmen year of high school that the graphing calculator fad took off and I really fell for programming.&lt;/p&gt;

&lt;p&gt;One of the best ways to waste time in math class was playing calculator games. I’m still surprised how quickly these games spread from TI-83 to TI-83 (I wonder if kids do it the same way today?). There were the classic snake-type games, and then there were the formula pack apps where you could plug in variables and get your answer without having to punch out the whole equation.&lt;/p&gt;

&lt;p&gt;Getting my first taste of these, I immediately thought “I wonder if I could make something like this too?”. I was in my first real programming class that year (Visual Basic 6), so I was getting a taste of common programming syntax and elements, but learning the specific TI-83 APIs was trial and error. Over the next year or two, I made my fair share of little apps and games. Even to the point where I made an entire playable board game app for my Homer’s Odyssey English class project.&lt;/p&gt;

&lt;h2 id=&quot;music&quot;&gt;Music&lt;/h2&gt;

&lt;p&gt;This behavior had already started for me back in middle school, where I started getting into popular rock music. Before long, I had started/joined my first band and started writing songs as soon I learned my first two guitar chords.&lt;/p&gt;

&lt;p&gt;Then we needed recordings, so I listened to my favorite records and said “how can I make recordings that sound like this?”. I started buying gear and cobbling together our first records. I’ve recorded in the order of 30 to 40 records for my bands and others’ bands since then.&lt;/p&gt;

&lt;p&gt;By college, my musical tastes had expanded. I started a second band with one of my friends who sided more towards classic punk/acoustic music. I listed to the records he and I shared a taste for and thought “I bet I could make music like this.” And so we did. Five records with that band in eight years. Everyone has to have a solo project, and so I started one of those too. At one point I was writing and recording one record for each of my three bands per year.&lt;/p&gt;

&lt;h2 id=&quot;more-programming&quot;&gt;More Programming&lt;/h2&gt;

&lt;p&gt;I learned VB6 and C++ in high school mostly by curriculum. In college I learned C and a couple different flavors of assembly, mostly by curriculum too. It wasn’t until the summer after my graduation that I looked at smartphone apps and said “I wonder if I could write something like that?”. I dove in and learned Objective-C and Cocoa Touch from scratch. That was the only thing I did for an entire two months until I got my first job. Once I got my job, however, it was back to the part-time shelf with all the music stuff.&lt;/p&gt;

&lt;p&gt;Looking at the App Store and coming up with new ideas for apps over the next year, I realized all my best ideas needed a back-end. So I put my iOS coding on hold while I started learning Ruby and Rails. That of course spawned the need for JavaScript, HTML, CSS, and all the other related technologies.&lt;/p&gt;

&lt;h2 id=&quot;photos--video&quot;&gt;Photos &amp;amp; Video&lt;/h2&gt;

&lt;p&gt;During college, A friend of mine was delving into photography and always posting his DSLR photos of our group of friends to Facebook and blowing all of us away. I asked myself “could I learn how to take photos like that?”. I borrowed his old camera when I went to Japan for two months, and returned with a new back-burner hobby.&lt;/p&gt;

&lt;p&gt;It wasn’t until a few years later that I got my own camera and started shooting regularly again. My camera has video, so it wasn’t long before I had focused most of my energies to shooting video at gatherings and editing together clips with my own music arrangements to show everyone a few days later, an idea I appropriated from the same friend that loaned me his camera.&lt;/p&gt;

&lt;h2 id=&quot;master-of-none&quot;&gt;Master of None&lt;/h2&gt;

&lt;p&gt;At a certain point, I realized that having this many semi-active interests means that I will never be at the top 1% of any of them. I’m still of the persuasion that no one can escape the 10,000 hours rule.&lt;/p&gt;

&lt;p&gt;This wouldn’t be a problem if I was still a high school or college kid, but as an adult I realize that some pursuits have more of a payback than others. In the past, the only priorities I assigned to all these activities was based on my own random day-to-day decisions and the promises I’d made to those I worked on these projects with.&lt;/p&gt;

&lt;p&gt;And because most of these pursuits require multi-month projects, I am constantly backlogged with a dozen simultaneous commitments. Every time I finish one, two are already there to replace it.&lt;/p&gt;

&lt;p&gt;With my realization that programming is going to be my breadwinning function for the indefinite future, should my programming pursuits be my default number one priority? Should music and photography and the others be placed further back in the list than they already are if I am to keep up with the programming industry and stay employable?&lt;/p&gt;

&lt;p&gt;Or is this a trait that a lot of successful people have? I know that my various pursuits always end up giving me some lightbulb-over-head insight into other seemingly unrelated pursuits.&lt;/p&gt;

&lt;p&gt;I don’t think I’ll ever be able to completely during off my wandering ambition towards acquiring new skills. I know it’s part of who I am. The question that’s on the table is if I should artificially adjust my priorities. I’m sure if I were 40 instead of 25, I’d be able to answer these questions succinctly and insightfully, and it would help a lot of young people like myself.&lt;/p&gt;

&lt;h2 id=&quot;going-forward&quot;&gt;Going Forward&lt;/h2&gt;

&lt;p&gt;From here, I’m guessing I’ll just have to keep a better handle on my current projects and commitments. Opportunities for new projects should be evaluated more carefully for time and enjoyment, because at the end of the day, a lot of these pursuits are things I should be doing because I really really want to do them.&lt;/p&gt;

&lt;p&gt;That’s how I’ll have to reason things next time the thought pops into my head: “I wonder if I could make something like that?”.&lt;/p&gt;
</description>
        <pubDate>Sun, 20 May 2012 16:29:00 -0500</pubDate>
        <link>https://twocentstudios.com/2012/05/20/i-wonder-if-i-could-make-something-like-that/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2012/05/20/i-wonder-if-i-could-make-something-like-that/</guid>
        
        <category>commentary</category>
        
        
      </item>
    
      <item>
        <title>Hosting</title>
        <description>&lt;p&gt;My rent on my shared garbage VPS is up in early August and I’m not sure what to do. I’ve got two problems and a number of routes I could go.&lt;/p&gt;

&lt;p&gt;I know very little about server admining and hosting. Next to nothing I’d say. I would like to learn, but like anything, there’s an opportunity cost to it. I’m leaning towards not taking the easy way out this time, simply because I know some more advanced knowledge of Linux will most likely be useful sometime in my not-so-distant future.&lt;/p&gt;

&lt;p&gt;My first problem to solve is what platform is best for this blog. I started on Wordpress because it’s ridiculously easy to leave all the technical stuff aside and just get to writing. Unfortunately, I don’t know any PHP and don’t much care to learn it, so hacking on it is out of the question for now. And if I’m not going to try to deal with PHP, I might as well put my eggs in one basket and try to hack on a Rails blog framework. So I guess my real problem is how to migrate the few posts on here over to a Rails platform (after setting it up of course).&lt;/p&gt;

&lt;p&gt;Seeing as I’ve decided not to continue on with Wordpress and switch to Rails, the next item on the agenda is where to host it.&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;&lt;strong&gt;Stay on my current garbage VPS for another year.&lt;/strong&gt; This is what I&apos;d call the easy way out. I could leave the WP version of this blog and the rest of my site up and give myself some time to migrate over. While supposedly my VPS does support Rails, I don&apos;t get command line access without paying some ridiculous fee, and I have no idea what its capabilities are.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Set up something on Heroku.&lt;/strong&gt; I was exploring Heroku a little bit over last weekend, and things there are looking rather nice. However, I think it may end up being too complicated for the low-key hodge-podge of things I&apos;d be running on it. At some point in the future I&apos;d like to deploy some stuff there just to check it out in greater detail.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Set up a VPS on Linode.&lt;/strong&gt; I feel like I would easily learn the most on this route. I&apos;d get a chance to really dig into a Linux distro and learn how to set everything up manually. I know there are a ton of great tutorials out there for doing pretty much anything on a fresh install. The only downside is that I&apos;m sure it would pretty much every waking moment of my freetime to get everything I need up and running to the capability I&apos;m at right now. I&apos;m just not sure I have that kind of time to devote to this right now.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With all that being said, I looks like maybe my best option is to go with #1 (as much as I feel like I’m wussing out), and shoot for #3 next year. That will give me some more time to get a better hold on Rails.&lt;/p&gt;

&lt;p&gt;If anyone else has been in this boat before, I’d love to hear about it in the comments.&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Jul 2011 00:00:00 -0500</pubDate>
        <link>https://twocentstudios.com/2011/07/30/hosting.html/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2011/07/30/hosting.html/</guid>
        
        <category>commentary</category>
        
        <category>hosting</category>
        
        <category>rails</category>
        
        
      </item>
    
      <item>
        <title>State of the Three20 Union</title>
        <description>&lt;p&gt;I’ve been sitting on this topic for a little while now, and feel like I should finally weigh in on where the Three20 framework is at this point.&lt;/p&gt;
&lt;h2&gt;Where I Started&lt;/h2&gt;
&lt;p&gt;I started working with Three20 a little over a year ago. In that time, a lot of really talented people have improved the library to the point where it is today. They have done great work that all of us have benefitted from greatly. Recently, I got comfortable enough with the library to start filling in holes in the documentation using this blog.&lt;/p&gt;

&lt;p&gt;But I think everyone in the community has started to feel the weight of Three20. I think the three main reasons for this are documentation, architecture, and community. All of which seem to be making each other worse as time goes on.&lt;/p&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Three20 has gotten continuous flak on Twitter, blogs, and anywhere else iOS devs talk for the lack of documentation. There’s really no argument against that. Everyone acknowledges it.&lt;/p&gt;

&lt;p&gt;A lot of people have gone out of their way to help with tutorials and blog posts that usually get a sliver of functionality across. But a lot of them are intermediate or advanced and assume you know about dependencies and other Three20 magic. And there’s no nice neat repository for all of them. And a lot of them are out of date.&lt;/p&gt;

&lt;p&gt;The startup docs written by Jeff are great for just that: getting started. This gives beginners a taste of what Three20 can do for them and completely leaves them out to dry once they try their first customization. So they look at the documentation and find nothing. Then they look at the source and find nothing. Then they search blogs and find a bunch of old stuff. Then they get pissed off after a number of hours or days and give up and post angry comments to Twitter.&lt;/p&gt;

&lt;p&gt;With the mass of source that Three20 has, I can’t blame them. It’s tough to know where to start, especially if you want to use a large portion of the library. And this is definitely not something that can be explained in a short bit of source documentation. It’s much better suited to an Apple “programming guide” type document. This just doesn’t exist because I truly believe there aren’t that many people that know the library inside and out. And those that do exist are busy fixing the plethora of issues and pull requests.&lt;/p&gt;
&lt;h2&gt;Architecture&lt;/h2&gt;
&lt;p&gt;The modularity that Jeff introduced sometime last year was heavily called for and a step in the right direction in theory. But I think the problem is that Three20 was originally written as a cohesive app, and you basically had to add all seven or so components anyway in order to get the thing to build (I always included the full library because I usually use all of it, so don’t quote me on that).&lt;/p&gt;

&lt;p&gt;There used to be a chart that had “The Three20 Ecosystem” showing how all the table stuff worked together. I still believe the concept behind the Three20 table structures has plenty of merit over Apple’s. But you can definitely tell that the architecture is such that it works for the Facebook app, but not much else without a lot of rewriting, which almost defeats the purpose of having reusable library components.&lt;/p&gt;

&lt;p&gt;Three20 has a lot of independent goodies and additions that don’t have much to do with the architecture. But most of the components require you to do things The Three20 Way. And if you’re going to use Three20 the way it was intended, you should probably be writing an app that has similar layout.&lt;/p&gt;

&lt;p&gt;Three20 is best for making apps for web services that have assets in databases. I’m not sure how else to describe this, but maybe API-centered app is the best description. Think of Facebook then set your bounds somewhere outside of that. Most all your data used in the app should come from the cloud. The webservice should have a well-documented API. It should be heavily URL based.&lt;/p&gt;

&lt;p&gt;This is because Three20’s URL system does not do well with passing around data. Sure, it can do it. But it’s not designed for it. You’ll be fighting the whole way, especially with tablecells. Each view controller should have a corresponding URL on your webservice for best compatibility.&lt;/p&gt;

&lt;p&gt;This post isn’t about when you should use Three20 so I’ll cut that example short. Needless to say, those new to Three20 don’t know if they should or shouldn’t be using it because there’s no documentation because there are so few people that understand the library and we’re back to the chicken and egg problem.&lt;/p&gt;
&lt;h2&gt;Community&lt;/h2&gt;
&lt;p&gt;I have to be frank with this one. There are plenty of great people in the Three20 community so I don’t want to give the wrong impression that I know all the players and I can pass judgement freely. But from what I see, there’s an increasing number of weight that is being added to the community due to many of the problems mentioned above.&lt;/p&gt;

&lt;p&gt;Let me start with a fictional iOS developer. He’s been developing using standard libraries for a year or so and has the basics of Objective-C, Foundation, and UIKit down. He hears something about a library from the Facebook developers, checks out the github page, sees some examples, and says, “Wow, this is awesome. This will save me a ton of time writing my own networking classes and photo rendering classes and all that other stuff that I need right now but don’t have time to dig into the Apple frameworks to perfect.” In one word, they get greedy.&lt;/p&gt;

&lt;p&gt;This is perfectly normal. Perfectly acceptable too. This is exactly what I thought when I first saw the framework. After all, the whole point of a framework is having a black box to use where you need it without having to have thousands of developers write the same code. Spending more time on your app-specific business logic and app aesthetic is the siren song of most developers.&lt;/p&gt;

&lt;p&gt;But whereas some developers give up and curse Three20 after not finding any documentation, there are also two other groups.&lt;/p&gt;

&lt;p&gt;Group 1 digs even harder for documentation. They find and read every blog post, step through the source of every provided example, and even &lt;em&gt;read the source until they understand it&lt;/em&gt;. Obviously this takes a long time, and thus the group is small.&lt;/p&gt;

&lt;p&gt;Group 2 immediately pounds Stack Overflow and the Three20 forum with questions. They don’t hesitate to file issues on github for anything and everything they don’t understand and assume is a bug. A lot of the time, they really didn’t understand the standard UIKit way in the first place, and are more or less spinning their tires and flinging mud in everyone else’s faces.&lt;/p&gt;

&lt;p&gt;Group 2 exists in every community, but they usually are indistinguishable because plenty of books and guides exist for all three groups to use. The main contributors are there to answer the really tough questions, but they mainly get to work on fixing mission-critical bugs and writing new features/components. So again, we come back to a lack of documentation making a different problem worse.&lt;/p&gt;
&lt;h2&gt;Where To Go From Here&lt;/h2&gt;
&lt;p&gt;Again, I am not trying to demean any of the hard work all the Three20 contributors have done, especially Joe’s original idea and Jeff’s great curation. My main question is this… &lt;strong&gt;is the Three20 framework salvageable?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From where I sit right now, I don’t believe it is.&lt;/p&gt;

&lt;p&gt;I think those moderately familiar with the library understand that there are a lot of inherent flaws baked into the framework. Hindsight has made those flaws easily visible, but still not extractable from the framework. It’s a cliche to say that programmers love to rewrite their projects, but in this case I’d like to think we’re rewriting this time from higher ground.&lt;/p&gt;

&lt;p&gt;I know I’m not the only one that feels this way. Jeff’s new &lt;a href=&quot;https://github.com/jverkoey/nimbus&quot; target=&quot;_blank&quot;&gt;Nimbus&lt;/a&gt; project seems to be the answer to many the above complaints. Documentation is the number one priority of the project, and so far Jeff is doing great out of the gate. Many of the best parts of Three20 will be ported over, but foreseeably with all the changes that have come from Jeff’s hindsight of the project.&lt;/p&gt;

&lt;p&gt;What do I mean by not salvageable? I think that more time should be spent rewriting Three20 as Nimbus than should be spent fixing the multitude of Three20 bugs that exist. That being said, I should probably put my money where my mouth is and help with some of that workload.&lt;/p&gt;

&lt;p&gt;I hate to see Three20 collapse under its own weight seeing as how much great work has been put into it. The rapid iteration of the iOS frameworks requires even more rapid iteration of community-driven frameworks to keep up. I think the best way for Three20 to keep up is to gradually migrate to its new form. This will also give us a chance to reevaluate the need for some of the Three20 functionality that was written to cover up holes in previous iOS versions that have since been filled by Apple. It will also give a chance to incorporate other open source projects that have become well known and stable since Three20 was originally started.&lt;/p&gt;

&lt;p&gt;This post was not meant to be an attack on the community, and I’m definitely not trying to be a Negative Nancy. I’d simply like to document my opinion on the source and exacerbation of Three20’s problems so that hopefully the same mistakes can be avoided in the future.&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Jul 2011 00:00:00 -0500</pubDate>
        <link>https://twocentstudios.com/2011/07/10/state-of-the-three20-union.html/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2011/07/10/state-of-the-three20-union.html/</guid>
        
        <category>commentary</category>
        
        <category>apple</category>
        
        <category>ios</category>
        
        <category>three20</category>
        
        
      </item>
    
      <item>
        <title>When Learning a New Language, One Book is Never Enough</title>
        <description>&lt;p&gt;How do you go about learning a new programming language or tool?&lt;/p&gt;

&lt;p&gt;My steps to learning a new language are traditionally as follows:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Stare blankly at source code of new language until my eyes and brain hurt.&lt;/li&gt;
	&lt;li&gt;Acquire a book and fight my way through it, reading from cover to cover.&lt;/li&gt;
	&lt;li&gt;Use said book and Google to code up whatever idea had originally inspired me to learn the language.&lt;/li&gt;
	&lt;li&gt;Find more well-written (I hope?) source code and this time actually understand about half of it.&lt;/li&gt;
	&lt;li&gt;Acquire a second book and read through it slightly faster than the first, seeing things I read in the first explained in a slightly different way.&lt;/li&gt;
	&lt;li&gt;Work on a more complicated idea, using all previous knowledge acquired.&lt;/li&gt;
	&lt;li&gt;Start using only Google, Github, and targeted blog posts to gain more knowledge.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As a kid (high school, college), I realize I relied way too much on one source of information when learning a new language. Of course, the internet wasn’t the same as it is now, but the bookshelves were definitely filled with plenty of “Beginning Zombiescript++” books. Heck, I remember pulling random books off the shelves and leafing through them just to try to figure out why I would want to use whatever language they were teaching. Most of time I couldn’t figure it out.&lt;/p&gt;

&lt;p&gt;I’ve seen it a million times through my schooling years; I just don’t really get things the first time through. A lot of the time that was because I didn’t really understand why I needed to know what I was being taught in the first place (which is an entire topic of its own). But even if I saw the entire birds-eye view of a subject, it would still take seeing it from a different angle to really get me to connect the dots.&lt;/p&gt;

&lt;p&gt;(Aside: I know of the popular technique of immediately trying to teach what you’ve just learned. At the initial stages of learning, I find this pointless. Mostly because it only really makes sense for memorization type exercises, and if you’re trying to teach something serious, you’re not really teaching, you’re pandering to be corrected. I only feel comfortable publicly teaching after I know I have enough knowledge to put together that general birds-eye view curriculum and have proven successes.)&lt;/p&gt;

&lt;p&gt;One particular event in college when things really lined up for me was learning assembly in two different courses at the same time. I was learning x86 assembly in my systems programming class, while at the same time learning TI DSP assembly in my digital signal processing lab. Before starting these, it wasn’t obvious to me that assembly wasn’t like C++ or other high level languages that you wrote once and someone else wrote the compiler for each system type to make it run. Seeing how the instruction sets were tailored to the main function of each processor (processing digital signals, running complex operating systems, etc.) opened my eyes to the underlying logic of how these systems were designed in a way it wouldn’t have understood if I were just taking one of the classes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When you’re learning something new, get as many perspectives as you can on whatever you’re learning early on.&lt;/strong&gt; Not only will it help you better understand the subject itself, but it will also prevent you from getting a “brainwashed” view of your subject. If one author thinks the best way to teach iOS programming is to start with learning everything there is to know about views, you might be a little disappointed when you realize you didn’t have to worry about them at all to write your first UITableView driven app. Likewise, if the author you’re reading thinks it’s fine and dandy to never touch the CoreGraphics framework, having another perspective might change your mind if you’re building a very customized UI.&lt;/p&gt;

&lt;p&gt;The other thing to hunt out furiously when you’re first starting out is the big picture. Knowing what you don’t know, knowing what you need to know now, and knowing what you can do with libraries and frameworks is the main focus here. I was painfully unaware of how to find good opensource libraries when I started out iOS programming, and in turn wrote a ton of basic low-level stuff from scratch. A lot of it was wrong, and a lot of it worked anyway even though it was so hacked together it was indecipherable the next day. I did learn a lot from this, but only by seeing it done correctly later (usually &lt;em&gt;much&lt;/em&gt; later). And also by getting a few apps under my belt and revisiting it to assess the damage. There are some cases where it’s a good idea to roll your own, but it’s almost always a better idea to use it as a guided exercise so you can immediately learn from your mistakes.&lt;/p&gt;

&lt;p&gt;The last tip I have is to push yourself in your research often. This usually means reading blogs and opensource projects containing advanced topics and problems about your chosen subject. You will almost certainly run into terms, algorithms, techniques, and ideas you will need to know in the future. Bookmark anything that jumps out at you, and maybe try to gather enough understanding to write a one paragraph summary of it (for your own personal future reference). It’s good to get that first meeting out of the way so you’re ready to start building recognition the next time you see them.&lt;/p&gt;
</description>
        <pubDate>Wed, 18 May 2011 00:00:00 -0500</pubDate>
        <link>https://twocentstudios.com/2011/05/18/when-learning-a-new-language-one-book-is-never-enough.html/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2011/05/18/when-learning-a-new-language-one-book-is-never-enough.html/</guid>
        
        <category>commentary</category>
        
        
      </item>
    
      <item>
        <title>Learning Ruby and Rails</title>
        <description>&lt;p&gt;Last October, a couple things came together at the same time which prompted to want to learn Rails.&lt;/p&gt;
&lt;h2&gt;Starting Out&lt;/h2&gt;
&lt;p&gt;I had been listening to Dan Benjamin’s &lt;a title=&quot;5by5&quot; href=&quot;http://5by5.tv&quot; target=&quot;_blank&quot;&gt;5by5&lt;/a&gt; podcasts nearly since they started at the beginning of the year, and always came away feeling like Ruby was a force to be reckoned with. I was also getting a little burnt out doing iOS stuff. All my coding in college was C and assembly. After that was strictly iOS for a year and change up to that point.&lt;/p&gt;

&lt;p&gt;As I constantly brainstormed new app ideas and looked at the most successful apps that had come, gone, and stayed in the AppStore charts, I realized that the best ones (that aren’t games) are viewports into webservices. The problem was that I didn’t know anything about writing server-side anything. My web endeavors began and ended in high school before CSS was a toddler.&lt;/p&gt;

&lt;p&gt;I was on a big productivity kick at work, trying to find ways to better connect the project groups in my office. Everyone was half-heartedly talking about group to-do lists, MS Project, spreadsheets on a server, all the usual suspects. My idea at the time was to have some kind of inter-office Twitter feed, and of course I needed to do some server-side stuff to get that to happen. (I can’t remember exactly what happened, but I ended up giving up on the idea and with it, learning Rails).&lt;/p&gt;

&lt;p&gt;At the time, I don’t think I was aware of all the CMS frameworks in PHP and other languages that would make this a cakewalk. I know the WordPress theme would have been extremely easy to set up. But either way, I wanted to get my hands dirty. But I also wanted results. And because I was impatient, I skipped Ruby and dived straight into Rails.&lt;/p&gt;

&lt;p&gt;That was my first mistake. I’ve read a few things about how most people could go either way with learning Ruby first or jumping straight into Rails. I couldn’t quite make it without Ruby.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-size: 20px; font-weight: bold;&quot;&gt;Diving In&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;It felt kind of like when your middle school teacher assigns a book to read and says, “If you get stuck, just skip the words you don’t know and keep reading”. Except that with diving straight into Rails, I felt like I didn’t know a single word. As soon as I hit something I didn’t understand, my brain would stick in a loop and I couldn’t move on without understanding what the line meant. And without base Ruby, I could go nowhere.&lt;/p&gt;

&lt;p&gt;So I tried &lt;a title=&quot;tryruby&quot; href=&quot;http://tryruby.org&quot; target=&quot;_blank&quot;&gt;tryruby&lt;/a&gt;. But it kept crashing and I didn’t have a pure Ruby project to work on, so it never really stuck.&lt;/p&gt;

&lt;p&gt;I then tried a couple Rails tutorials, including Rails for Zombies. &lt;a title=&quot;Rails for Zombies&quot; href=&quot;http://railsforzombies.org/&quot; target=&quot;_blank&quot;&gt;Rails for Zombies&lt;/a&gt; was great, but since my knowledge was so shallow, I was just going through the motions and not retaining anything. After a weekend or two of trying to power through the learning phase, I’m ashamed to say I quit. I gave up my idea for my office, and I quit. I came crawling back to iOS.&lt;/p&gt;
&lt;h2&gt;Doing It the Right Way&lt;/h2&gt;
&lt;p&gt;Fast forward to March. I came across the opportunity to learn Ruby for my day job. The idea of learning Ruby and Rails had still been simmering since the Fall. I was almost actively looking for any reason to learn them. The task I had to complete was to import a bunch of old customer support tickets into Zendesk. A nice, bite-sized Ruby project.&lt;/p&gt;

&lt;p&gt;I knew that I really needed to learn Ruby this time around. Not just enough to fake my way through Rails, but really get a handle on the ins and outs. Luckily, I came across &lt;a title=&quot;Ruby Koans&quot; href=&quot;http://rubykoans.com/&quot; target=&quot;_blank&quot;&gt;Ruby Koans&lt;/a&gt; which kicked my butt up and down the text editor. I can’t say enough great things about it. Really wonderful little courselet.&lt;/p&gt;

&lt;p&gt;As a quick aside, I’ve never really coded in a scripting language before, even Javascript, so one of the hardest things about Ruby at first was literally just understanding the entry point and the program flow. int main has always been my friend, but now I was just sitting at the terminal saying, “Great. I just wrote all these modules and classes and functions, now where do I use them?”.&lt;/p&gt;

&lt;p&gt;I worked through Koans, and went to start on my task. The first part was finding gems to help me out. I found a gem for the Zendesk-API, a csv parser, and an XML assembler. Looking through the source of these gems helped me understand more about program flow and best practices on code structure.&lt;/p&gt;

&lt;p&gt;It took plenty of trial and error, but after all that I pounded out a nice little script to import a csv file into Zendesk using Ruby. It felt good.&lt;/p&gt;
&lt;h2&gt;Onto Rails&lt;/h2&gt;
&lt;p&gt;Fast forward again a month, and I realized that I was in a much better position to learn Rails now. It just so happened that administrating Zendesk for a little while and starting to use &lt;a title=&quot;TestFlight&quot; href=&quot;http://testflightapp.com&quot; target=&quot;_blank&quot;&gt;TestFlight&lt;/a&gt; for my iOS beta testing really started to inspire another productivity kick around the office.&lt;/p&gt;

&lt;p&gt;I’m pretty familiar with most of the engineering processes and workflows at my day job. The problem is that they’re all pretty archaic. Lots of MS Office tools because that’s what everyone knows. And even though they’re not designed for it, Excel is used to lay out forms, email is used to do workflows, and even SharePoint is now in the mix. Using the wrong tools diverts a lot of time towards the wrong things.&lt;/p&gt;

&lt;p&gt;So I decided that I was going to write a workflow system for an engineering process. It doesn’t have a lot of data that needs stored, and it’s mostly users interacting with one set of objects. I don’t think it’s more than I can chew, but I guess we’ll see because it’s not done yet.&lt;/p&gt;

&lt;p&gt;I ran across a Rails tutorial I hadn’t seen before. &lt;a title=&quot;Ruby on Rails Tutorial&quot; href=&quot;http://ruby.railstutorial.org/ruby-on-rails-tutorial-book&quot; target=&quot;_blank&quot;&gt;Ruby on Rails Tutorial&lt;/a&gt; by Michael Hartl was exactly what I needed. Doesn’t pull punches, but also patiently explains every step of the way. Again, highly recommended. Read it cover to cover, and I’m still going back for more. It gets pretty tough at the end though, especially for someone like me with little to no experience with databases.&lt;/p&gt;
&lt;h2&gt;Where am I Now?&lt;/h2&gt;
&lt;p&gt;I’ve brainstormed out my database tables, listed my routes, mocked up most of the screens, and I think I’m ready to dive into code. I wanted to mark this moment as a point of little knowledge that will hopefully make me feel better when I (hopefully) have a lot of Rails knowledge in the distant future.&lt;/p&gt;

&lt;p&gt;If anyone had other good routes to Ruby and/or Rails fluency, I’d love to hear about it in the comments.&lt;/p&gt;
</description>
        <pubDate>Fri, 06 May 2011 00:00:00 -0500</pubDate>
        <link>https://twocentstudios.com/2011/05/06/learning-ruby-and-rails.html/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2011/05/06/learning-ruby-and-rails.html/</guid>
        
        <category>commentary</category>
        
        <category>rails</category>
        
        <category>ruby</category>
        
        
      </item>
    
      <item>
        <title>The iPhone 3G and Me: Obsolete Before the Contract Even Ended</title>
        <description>&lt;p&gt;I’ve had a love-hate relationship with my iPhone since iOS4.&lt;/p&gt;

&lt;p&gt;I have an iPhone 3G. I got it a little under two years ago, at around the same time the 3GS hit stores. I can justify my mistake of not dropping the extra $100 because I was just out of school, didn’t have a job yet, and just wanted something to start testing my first few apps on.&lt;/p&gt;

&lt;p&gt;I’ve been pretty much dying to get an iPhone 4, but realize the error in my ways of buying old over buying new.&lt;/p&gt;

&lt;p&gt;My memory is a little foggy, but I think it worked great up until iOS4. The only features I figured I was missing out on were the compass (which actually would have been useful a couple times I was lost in the city) and the OpenGL ES upgrade (didn’t really do any serious gaming). Nothing else really jumped out to me, and that’s why I thought my decision was for the best for quite awhile. (Thinking back again, I was disappointed that I didn’t get voice control).&lt;/p&gt;

&lt;p&gt;I was stricken to hear that my iPhone wouldn’t be getting the multitasking capability in iOS4. I was working on a prototype for an app that used local notifications and I was unsure of how it would work on a real device with all the backgrounding jazz that had to go on. Still, I pushed on.&lt;/p&gt;

&lt;p&gt;It was really the day to day stuff that was the worst. I even had friends with 3GSs complain about how much iOS4.0 bogged them down. I think the later releases of 4.1 and 4.2 cleared that up, but for me the bottom dropped out and stayed there. I watched a few funny spoof videos of iPhone commercials with the 3G taking 20 seconds to load up an app. Those helped me through the pain.&lt;/p&gt;

&lt;p&gt;Maps used to be usable during my 3G’s first year. I could even play music &lt;i&gt;AND&lt;/i&gt; and look at a map at the same time. Now, I start up the app and it will either crash and burn, or lock up for five minutes and lag on each tap after that.&lt;/p&gt;

&lt;p&gt;It’s the same with my core group of daily apps. Twitter, Facebook, Safari. Apps doing simple things now stuttered and crashed. Some of it was just the overhead growing as I’d expect. But some of it was the curse of being able to do too much. Every time you start up the Facebook app, you can see the location services kick in. This activity brings my phone to its knees.&lt;/p&gt;

&lt;p&gt;Twitter added its infamous ad bar to the top (yeah, I know what it’s called, haha) which also slows my reading experience down considerably. Not only that, but the start-up-from-where-I-left-off feature was completely brushed to the side as the 3Gs have become less popular. As a user I can complain as much as I want about these little signs of betrayal. However, as a developer I have to consider the exact same things. Do I really care how many people like me are still using a 3G? If it takes me an extra month to rewrite a feature to work for them, will they have already ditched their phone by the time I get it out? Do that many developers even still possess a 3G to do testing on?&lt;/p&gt;

&lt;p&gt;Apple in some ways has done an okay job of keeping their patrons from getting too left behind. If they had decided not to support iOS4 on the 3G at all, then I would have no way of running apps written for iOS4 and higher, and therefore the developers whose apps I would have bought would be out of luck. They also had the foresight to realize that multitasking wasn’t feasible with the memory capacity of the 3G, and I’m sure had to work a little harder to make two different versions. But at the same time, there has been some serious wishful thinking in the belief that an iPhone 3G can handle the other upgrades that iOS4 brought to the table.&lt;/p&gt;

&lt;p&gt;The nail in the coffin came for me last week when I went to do my (bi-monthly?) SDK update. iTunes kept telling me I already had the latest version of iOS at 4.2.1. Impossible, I thought, and scoured the blogs to find that 4.3 had indeed been released earlier in the week. Then I found the angry posts on the Apple forums of “NOOOOO. Apple has abandoned me!!!”. My 3G is now unsupported by Apple and cannot receive any more iOS updates.&lt;/p&gt;

&lt;p&gt;In a lot of ways my fellow 3G owners do have a point. They were still selling the 3G well into the term of the 3GS. It hasn’t been the length of my 2 year AT&amp;amp;T contract and my phone is already unsupported. Not even that, but for someone who bought the 3G the day before it was discontinued (right before the iPhone 4 was released), that person may have started off with iOS4 and a more or less unusable phone.&lt;/p&gt;

&lt;p&gt;So is the 3G (and the original iPhone) just a fluke? I have neither the circumstantial or the benchmarking evidence to predict whether the 3GS will stand the test of time longer. I’m disappointed that I own such a remarkable piece of hardware (in the grand scheme of things) and yet a lot of days I feel more crippled than I was with my WM6 phone or any of the feature phones I used to own.&lt;/p&gt;

&lt;p&gt;What’s the solution? I think Apple should stop selling their old hardware a little sooner. It’s very clear that they don’t have any desire to make two tiers of phone hardware, so they shouldn’t accept having the de-facto tiers of old and new.&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Mar 2011 00:00:00 -0500</pubDate>
        <link>https://twocentstudios.com/2011/03/18/the-iphone-3g-and-me-obsolete-before-the-contract-even-ended.html/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2011/03/18/the-iphone-3g-and-me-obsolete-before-the-contract-even-ended.html/</guid>
        
        <category>commentary</category>
        
        
      </item>
    
  </channel>
</rss>
