<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>twocentstudios</title>
    <description>A coding blog covering iOS, Swift, and other programming topics.</description>
    <link>https://twocentstudios.com/blog/tags/claudecode/index.html</link>
    <atom:link href="https://twocentstudios.com/blog/tags/claudecode/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 10 Oct 2025 21:59:22 -0500</pubDate>
    <lastBuildDate>Fri, 10 Oct 2025 21:59:22 -0500</lastBuildDate>
    <generator>Jekyll v3.9.3</generator>
    
      <item>
        <title>An E-Ink Desk Companion With M5Paper</title>
        <description>&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/m5paper-desk-unit.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;The M5Paper on my desk displaying my daily TODO list&quot; title=&quot;The M5Paper on my desk displaying my daily TODO list&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The M5Paper on my desk displaying my daily TODO list&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I‚Äôve had an &lt;a href=&quot;https://shop.m5stack.com/products/m5paper-esp32-development-kit-v1-1-960x540-4-7-eink-display-235-ppi&quot;&gt;M5Paper&lt;/a&gt; since my days in the R&amp;amp;D Department at Cookpad that I‚Äôve never known what to do with. My friend Dave has been doing a lot of microcontroller projects in his spare time, and it inspired me to get out the M5Paper again.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/m5paper-marketing.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;M5Paper ESP32 development kit with E-Ink display marketing image&quot; title=&quot;M5Paper ESP32 development kit with E-Ink display marketing image&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;M5Paper ESP32 development kit with E-Ink display marketing image&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;M5Paper is an all-in-one development kit device that wraps an ESP32 microcontroller, a rechargeable battery, some environment sensors, and sticks on a 4.7‚Äù capacitive-touch E-Ink display. I bought it for about ¬•8000 a couple years ago, but the &lt;a href=&quot;https://shop.m5stack.com/products/m5papers3-esp32s3-development-kit&quot;&gt;improved version S3&lt;/a&gt; goes for $59 USD at the time of this writing.&lt;/p&gt;

&lt;p&gt;My new idea was to have the M5Paper on my desk mirroring my current TODO list for the day.&lt;/p&gt;

&lt;h2 id=&quot;feasibility-research&quot;&gt;Feasibility research&lt;/h2&gt;

&lt;p&gt;I keep a daily markdown file with my TODOs at the top and then notes about the day‚Äôs work below it. I‚Äôve been doing this for the last 2 years. Previously I‚Äôd use one markdown file for an entire year and use it as a rolling TODO list and scratch pad (this actually worked surprisingly well).&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/m5paper-obsidian-daily-notes.png&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Daily notes in Obsidian with TODO items at the top&quot; title=&quot;Daily notes in Obsidian with TODO items at the top&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Daily notes in Obsidian with TODO items at the top&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I‚Äôve found that my daily TODO list often falls off my radar as soon as the Obsidian window gets buried behind all the others. I end up leaving TODOs unchecked or, even worse, completely forget to do a task. &lt;strong&gt;I realized the E-Ink display of the M5Paper was one way to keep my TODO list in my literal peripheral vision without requiring any additional TODO list management&lt;/strong&gt;, including manual duplication or otherwise altering my current workflow.&lt;/p&gt;

&lt;p&gt;The Obsidian vault I use for my daily notes and project notes is sourced from a folder synced with Dropbox. Therefore, I realized I could have the M5Paper run the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Wake up and connect to WiFi&lt;/li&gt;
  &lt;li&gt;Calculate the current date&lt;/li&gt;
  &lt;li&gt;Use the Dropbox API to fetch a file called 2025-10-10.md within a hardcoded folder path (i.e. the current date)&lt;/li&gt;
  &lt;li&gt;Display the contents of the file on the E-Ink display&lt;/li&gt;
  &lt;li&gt;Go to sleep for some amount of time (an hour?) to conserve battery&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/m5paper-workflow-illustration.png&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Workflow diagram showing the M5Paper fetch and display cycle&quot; title=&quot;Workflow diagram showing the M5Paper fetch and display cycle&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Workflow diagram showing the M5Paper fetch and display cycle&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I had Claude Code and Codex help me along the prototyping journey.&lt;/p&gt;

&lt;h2 id=&quot;first-prototype&quot;&gt;First prototype&lt;/h2&gt;

&lt;p&gt;The first big decision was what environment to use for programming the ESP32. There‚Äôs the beginner-friendly &lt;a href=&quot;https://docs.m5stack.com/en/uiflow2/uiflow_web&quot;&gt;UiFlow2&lt;/a&gt; web IDE, the &lt;a href=&quot;https://docs.m5stack.com/en/arduino/arduino_ide&quot;&gt;Arduino IDE&lt;/a&gt;, the &lt;a href=&quot;https://platformio.org/&quot;&gt;PlatformIO&lt;/a&gt; plugin for VSCode, and then the more command line heavy route.&lt;/p&gt;

&lt;p&gt;After flashing the firmware with UiFlow2 (this required downloading an out-of-date macOS app), I decided to use MicroPython with command line tools. I‚Äôve used PlatformIO and Arduino IDE before but I wanted to see if MicroPython was more ergonomic than the embedded C++ variant.&lt;/p&gt;

&lt;p&gt;The command line tools I ended up using were &lt;a href=&quot;https://docs.espressif.com/projects/esptool/en/latest/&quot;&gt;esptool&lt;/a&gt; and &lt;a href=&quot;https://docs.micropython.org/en/latest/reference/mpremote.html&quot;&gt;mpremote&lt;/a&gt;. Another reason I picked these was so my coding agents could be more helpful in being part of the development loop, although maybe the models have more training data for Arduino code?&lt;/p&gt;

&lt;p&gt;The Dropbox part was a big unknown for me. I was banking on being able to fetch from my existing folder hierarchy with the Dropbox API. If it turned out to be impossible I probably would have given up since I‚Äôm not willing to change my entire personal knowledge-base setup.&lt;/p&gt;

&lt;p&gt;Luckily, it was really easy to create a Dropbox App that worked only for my account. I could even generate a hardcoded API token with the right permissions that lasted 4 hours for testing. With that in place, Claude Code generated the first attempt at the code needed to get something from Dropbox onto the screen.&lt;/p&gt;

&lt;p&gt;The next step was understanding how deployment to device was supposed to work and then later automating it. This was especially error-prone because I was intentionally putting the device into deep sleep, which would cause it to become unresponsive to the base commands. In the end, I have a Makefile with a deploy command that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Makefile&quot;&gt;DEVICE_PORT = /dev/cu.usbserial-0214257D
ESPTOOL = python3 -m esptool --chip esp32 --port $(DEVICE_PORT) read_mac
MPREMOTE = python3 -m mpremote connect $(DEVICE_PORT)

.PHONY: deploy test list clean help reset rtc-check rtc-sync rtc-init repl-mode

deploy: ## Deploy main.py, secrets.py, and bm8563_rtc.py to M5Paper (full deployment)
	@echo &quot;üîÑ Deploying to M5Paper...&quot;
	@echo &quot;‚ö° Resetting device...&quot;
	@$(ESPTOOL) &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
	@echo &quot;‚è≥ Waiting for boot...&quot;
	@sleep 4
	@echo &quot;üìÅ Copying files...&quot;
	@$(MPREMOTE) cp main.py :main.py &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; echo &quot;  ‚úì main.py copied&quot; || echo &quot;  ‚ö†Ô∏è main.py failed&quot;
	@if [ -f secrets.py ]; then $(MPREMOTE) cp secrets.py :secrets.py &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; echo &quot;  ‚úì secrets.py copied&quot; || echo &quot;  ‚ö†Ô∏è secrets.py failed&quot;; fi
	@if [ -f bm8563_rtc.py ]; then $(MPREMOTE) cp bm8563_rtc.py :bm8563_rtc.py &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; echo &quot;  ‚úì bm8563_rtc.py copied&quot; || echo &quot;  ‚ö†Ô∏è bm8563_rtc.py failed&quot;; fi
	@echo &quot;üîÑ Final reset...&quot;
	@$(ESPTOOL) &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
	@echo &quot;‚úÖ Deployment complete!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This essentially just copies over the Python files from my Mac to the M5Paper, but with a few extra steps to make sure the device is ready to be written to. Hard-won knowledge, but after getting this in place, the development loop is about as fast as it can be.&lt;/p&gt;

&lt;p&gt;Putting the device in deep sleep blocks the REPL from connecting normally. Therefore, I also have a Makefile command for temporarily replacing the deployed contents with a dummy file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Makefile&quot;&gt;repl-mode: ## Replace main.py with a stub so the device boots straight to the REPL
	@echo &quot;üõ†  Entering REPL mode...&quot;
	@echo &quot;‚ö° Resetting device...&quot;
	@$(ESPTOOL) &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
	@echo &quot;‚è≥ Waiting for boot...&quot;
	@sleep 4
	@echo &quot;üóë  Installing REPL stub...&quot;
	@$(MPREMOTE) cp repl_stub.py :main.py &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; echo &quot;  ‚úì stub copied&quot; || echo &quot;  ‚ö†Ô∏è stub copy failed&quot;
	@echo &quot;üîÑ Final reset...&quot;
	@$(ESPTOOL) &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
	@echo &quot;‚úÖ Device will now stay idle for REPL access.&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;going-beyond-the-prototype&quot;&gt;Going beyond the prototype&lt;/h2&gt;

&lt;p&gt;I had my first working prototype up and running after a few hours which was great. However, there were some lingering issues the next day:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The dev-use-only Dropbox API token I had used expired after 4 hours. I needed to use the full OAuth flow to get a refreshable token.&lt;/li&gt;
  &lt;li&gt;The real time clock (RTC) was often getting confused after wake-ups or power events and either returning to the unix epoch or defaulting to an incorrect hour during the correct day.&lt;/li&gt;
  &lt;li&gt;Japanese characters showed up as rectangular boxes.&lt;/li&gt;
  &lt;li&gt;I wanted a way to refresh the contents manually by pressing the side button.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dropbox-api-token&quot;&gt;Dropbox API token&lt;/h3&gt;

&lt;p&gt;The Dropbox API token issue turned out to be the easiest solve of the above problems. Claude Code wrote me a quick script I could run on my Mac that used my Dropbox app secret credentials to return a refreshable token. I added that token to the secrets.py file on the M5Paper and now I had a long-term solution.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/m5paper-dropbox-app-api.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Dropbox app settings showing API token configuration&quot; title=&quot;Dropbox app settings showing API token configuration&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Dropbox app settings showing API token configuration&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;clock-issues&quot;&gt;Clock issues&lt;/h3&gt;

&lt;p&gt;As usual, anything with clocks or calendars is the hardest problem. 1. My lack of knowledge about the M5Paper itself combined with 2. the difficulty of isolating a test environment that allowed me to observe the device without interrupting it ‚Äì prolonged the debugging experience.&lt;/p&gt;

&lt;p&gt;Through a lot of agent churn, I finally learned that the M5Paper has two clocks: ESP‚Äôs on-chip RTC and a dedicated chip external RTC connected to the lithium battery. Setting the external RTC with a one-off script during dev time would save a lot of hassle and complexity in the main loop.&lt;/p&gt;

&lt;h3 id=&quot;japanese-characters&quot;&gt;Japanese characters&lt;/h3&gt;

&lt;p&gt;I sometimes leave notes in Japanese. I noticed these characters appeared on the display as unrenderable unicode blocks like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;‚ñØ‚ñØ‚ñØ&lt;/code&gt;. Leaving them this way was not a deal breaker, but through a quick exploration of the M5 API, I found there was already a pre-loaded Japanese font I could use that solved the problem. The only down side is that the granularity of font sizes with the Japanese font makes it so I have to choose between a-little-too-small and a-little-too-large (I chose large).&lt;/p&gt;

&lt;h3 id=&quot;contents-refresh-and-power-management&quot;&gt;Contents refresh and power management&lt;/h3&gt;

&lt;p&gt;I was originally hoping I could use the M5Paper for long stretches on battery power. Unfortunately, I think its age has left the battery in a vestigial state. Plus, I have a new charging port available for it, which makes keeping it plugged in all the time no longer an issue.&lt;/p&gt;

&lt;p&gt;I‚Äôve therefore set the refresh logic going forward as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;On battery power: refresh once an hour.&lt;/li&gt;
  &lt;li&gt;On USB power: refresh once every 5 minutes.&lt;/li&gt;
  &lt;li&gt;Also refresh on side button tap.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On redraws, the whole screen flickers black and white, then draws the text (quickly) line by line. This would be a little distracting to see in my field of view every 5 minutes, especially since the TODO list does not change that often (and I am the only one changing it). Therefore, I also added some diffing logic. Although the list is refreshed every 5 minutes, it will only redraw if the contents on screen have changed.&lt;/p&gt;

&lt;p&gt;The M5Paper does have a capacitive touch screen, but in my preliminary investigations, the deep sleep interrupt does not work the same way as it does for the hardware button. Since I‚Äôve recently changed the refresh logic to account for unlimited USB power, I could go further and keep the ESP32 awake, add scrolling, and add other capacitive touch buttons to the display. But for now I‚Äôm happy with the light feature set.&lt;/p&gt;

&lt;p&gt;The final small task (mostly for ongoing debugging) was to add a battery level indicator to the bottom of the screen as a screen-width progress bar. I‚Äôm only using the battery level indicator to get a feel for how the internal battery handles daily usage going forward. This knowledge will inform future decisions about product direction (heavy air quotes on ‚Äúproduct‚Äù since this is just for me).&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you‚Äôve never done embedded systems development before, hopefully I‚Äôve shown that building personal-use hardware is within reach for most software developers. There‚Äôs an infinite web of tangential devices and use cases out there (looking at you, Raspberry Pi 4 in a box in my closet). Hopefully this has given you, the reader, some ideas for fun weekend projects whose results you can enjoy every day.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/m5paper-final-setup.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;The completed M5Paper desk companion in action&quot; title=&quot;The completed M5Paper desk companion in action&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The completed M5Paper desk companion in action&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 10 Oct 2025 13:39:28 -0500</pubDate>
        <link>https://twocentstudios.com/2025/10/10/an-e-ink-desk-companion-with-m5paper/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/10/10/an-e-ink-desk-companion-with-m5paper/</guid>
        
        <category>hardware</category>
        
        <category>micropython</category>
        
        <category>claudecode</category>
        
        <category>m5paper</category>
        
        <category>esp32</category>
        
        
      </item>
    
      <item>
        <title>Giving Claude Code Eyes to See Your SwiftUI Views</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://claude.ai/claude-code&quot;&gt;Claude Code&lt;/a&gt; works best as a multi-shot agent, iterating on a task by making changes and checking whether its attempts match the target.&lt;/p&gt;

&lt;p&gt;Let‚Äôs explore one way of giving Claude Code (henceforth ‚ÄúCC‚Äù) a way to use its multimodal capabilities to view the results of the SwiftUI code: &lt;a href=&quot;https://github.com/pointfreeco/swift-snapshot-testing&quot;&gt;Swift Snapshot Testing&lt;/a&gt;. We‚Äôll look into ways to enhance its image analysis capabilities with tool calling. And finally we‚Äôll see how well it does with the challenge of recreating a SwiftUI View from a reference image.&lt;/p&gt;

&lt;p&gt;The strategy in this post is optimized for ‚Äúunit testing‚Äù SwiftUI Views in isolation (i.e. without the status bar, with flexible dimensions, etc.). We‚Äôll briefly review other visualization strategies at the end of this post.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-swift-snapshot-testing&quot;&gt;Setting up Swift Snapshot Testing&lt;/h2&gt;

&lt;p&gt;This is not a full tutorial, so here are some other walkthroughs to get you started:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.delasign.com/blog/how-to-setup-swift-testing-in-swift-or-swiftui-project-in-xcode/&quot;&gt;How to setup Swift Testing in a Swift or SwiftUI project in Xcode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pointfreeco/swift-snapshot-testing?tab=readme-ov-file#installation&quot;&gt;pointfreeco/swift-snapshot-testing: Installation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I created a separate target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewSnapshotTests&lt;/code&gt; to isolate these kinds of tests and disabled it from running with Cmd+U alongside my main iOS target.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/cc-eyes-xcode-scheme-test-panel.png&quot; width=&quot;600&quot; height=&quot;&quot; alt=&quot;Xcode scheme test panel configuration ignoring ViewSnapshotTests&quot; title=&quot;Xcode scheme test panel configuration ignoring ViewSnapshotTests&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Xcode scheme test panel configuration ignoring ViewSnapshotTests&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our goal with this setup is to give CC a way to visually reference its work, &lt;em&gt;not&lt;/em&gt; create long-lived snapshot tests that will be maintained.&lt;/p&gt;

&lt;p&gt;Let‚Äôs add a file we‚Äôll have CC use a template. We‚Äôll instruct it to modify this test, run it, then reset it once the verification is complete.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// ViewVerificationTests.swift&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SnapshotTesting&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SwiftUI&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@testable&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mytarget&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Testing&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;@Suite(&quot;ViewVerificationTests&quot;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@MainActor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewVerificationTests&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@Test(&quot;ViewVerificationTest&quot;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewVerification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// Replace with the view under test&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EmptyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;nf&quot;&gt;assertSnapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then we can try exercising this template:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// HelloWorldView.swift&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HelloWorldView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;VStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;spacing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cornerRadius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Modify the template test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewVerification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;HelloWorldView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;assertSnapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you run the suite manually, the test will (as expected) fail, and a new folder and image will be created in the test directory:&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/cc-eyes-snapshots-file-hierarchy.png&quot; width=&quot;400&quot; height=&quot;&quot; alt=&quot;Snapshot testing file hierarchy&quot; title=&quot;Snapshot testing file hierarchy&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Snapshot testing file hierarchy&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/cc-eyes-view-verification-output.png&quot; width=&quot;200&quot; height=&quot;&quot; alt=&quot;ViewVerification test output&quot; title=&quot;ViewVerification test output&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;ViewVerification test output&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;instructions-for-claude-codes-iteration-loop&quot;&gt;Instructions for Claude Code‚Äôs iteration loop&lt;/h2&gt;

&lt;p&gt;Exactly &lt;em&gt;when&lt;/em&gt; you, the developer, decide to use Claude‚Äôs visualization depends highly on your design -&amp;gt; code workflow.&lt;/p&gt;

&lt;p&gt;For the sake of argument, let‚Äôs start by adding this instruction to CLAUDE.md:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Any time you create or modify a SwiftUI View, use the workflow defined in the &lt;strong&gt;SwiftUI View Verification Workflow&lt;/strong&gt; section below to check your work. Iterate &lt;strong&gt;at least 2 times&lt;/strong&gt; and &lt;strong&gt;up to 5 times&lt;/strong&gt; before considering your SwiftUI code complete.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The instruction is heavy handed, but will give us a baseline requirements to relax. Now let‚Äôs describe the ideal workflow to CC in detail:&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gu&quot;&gt;## SwiftUI View Verification Workflow&lt;/span&gt;

&lt;span class=&quot;gu&quot;&gt;### View Creation Workflow&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;
1.&lt;/span&gt; Create a SwiftUI View based on the developer-provided written specifications or reference image.
&lt;span class=&quot;p&quot;&gt;2.&lt;/span&gt; Run xcodegen to add the &lt;span class=&quot;sb&quot;&gt;`.swift` file to the `.xcodeproj`&lt;/span&gt;.
&lt;span class=&quot;p&quot;&gt;3.&lt;/span&gt; Modify the &lt;span class=&quot;sb&quot;&gt;`viewVerification` test in `ViewVerificationTests.swift`&lt;/span&gt; to use the new View and set the expected layout.
&lt;span class=&quot;p&quot;&gt;4.&lt;/span&gt; Run &lt;span class=&quot;sb&quot;&gt;`xcodebuild test -only-testing:&quot;ViewSnapshotTests/ViewVerificationTests&quot; -quiet`&lt;/span&gt; and ignore the expected test failure.
&lt;span class=&quot;p&quot;&gt;5.&lt;/span&gt; Read the output image &lt;span class=&quot;sb&quot;&gt;`ViewSnapshotTests/__Snapshots__/ViewVerificationTests/viewVerification.1.png`&lt;/span&gt; and compare it to the written specifications or reference image. Use any image analysis tools or techniques listed in the &quot;Image Analysis Strategies&quot; section.
&lt;span class=&quot;p&quot;&gt;6.&lt;/span&gt; Plan a list of changes to the SwiftUI View code that will bring &lt;span class=&quot;sb&quot;&gt;`viewVerification.1.png`&lt;/span&gt; closer to the written spec or reference image.
&lt;span class=&quot;p&quot;&gt;7.&lt;/span&gt; Implement the changes in the plan.
&lt;span class=&quot;p&quot;&gt;8.&lt;/span&gt; Run the command in (4) to replace the snapshot image.
&lt;span class=&quot;p&quot;&gt;9.&lt;/span&gt; Repeat steps (5) to (9) as many times as specified in previous instructions.
&lt;span class=&quot;p&quot;&gt;10.&lt;/span&gt; Once I have approved, please reset the test files and image to their original state.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You‚Äôll need to heavily modify that prompt to fit with your ideal workflow and use the proper command line commands for your project. For example, if you‚Äôre going off a written spec with no particular design in mind, you could to add ‚Äúmake the View more beautiful‚Äù after each iteration.&lt;/p&gt;

&lt;p&gt;It‚Äôs important to note that, when using Swift Testing instead of XCTest, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xcodebuild test&lt;/code&gt; can &lt;strong&gt;only&lt;/strong&gt; target &lt;em&gt;suites&lt;/em&gt; via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-only-testing&lt;/code&gt;, &lt;strong&gt;not&lt;/strong&gt; individual tests like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swift test&lt;/code&gt; can. For the root cause and workarounds, see &lt;a href=&quot;https://trinhngocthuyen.com/posts/tech/swift-testing-and-xcodebuild/&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The View Modification Workflow would be subset of the View Creation Workflow. In that prompt, we tell CC to reference another section for image analysis. Below are some ImageMagick commands that could be useful.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Extract exact RGB values from specific coordinates&lt;/span&gt;
magick image.png -crop 1x1+200+300 txt:
&lt;span class=&quot;c&quot;&gt;# Output: (240,240,240,255) #F0F0F0FF grey94&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Check image dimensions and properties&lt;/span&gt;
magick identify image.png
&lt;span class=&quot;c&quot;&gt;# Output: image.png PNG 1206x2622 1206x2622+0+0 8-bit sRGB&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Get Root Mean Square Error between images&lt;/span&gt;
magick compare -verbose -metric RMSE reference.png snapshot.png null:
&lt;span class=&quot;c&quot;&gt;# Provides per-channel distortion percentages&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Generate visual difference overlay&lt;/span&gt;
magick compare reference.png snapshot.png diff_output.png
&lt;span class=&quot;c&quot;&gt;# Red areas show differences, black areas show matches&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;weak-points-of-snapshot-testing&quot;&gt;Weak points of snapshot testing&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;As far as I can tell, it‚Äôs not possible to get the full system UI wrapper with snapshot testing (e.g. the status bar).&lt;/li&gt;
  &lt;li&gt;There are built in device sizes, but they aren‚Äôt frequently updated to include new devices.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;challenge-create-a-swiftui-view-from-a-reference-image&quot;&gt;Challenge: create a SwiftUI View from a reference image&lt;/h2&gt;

&lt;p&gt;I gave CC a challenge as a way to develop the above setup and strategies. I gave it the simple users list screen from my recently re-released app &lt;a href=&quot;/2025/06/22/vinylogue-swift-rewrite/&quot;&gt;Vinylogue&lt;/a&gt;, captured directly from the simulator.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/cc-eyes-vinylogue-reference.png&quot; width=&quot;300&quot; height=&quot;&quot; alt=&quot;Reference image of Vinylogue users list directly from the simulator&quot; title=&quot;Reference image of Vinylogue users list directly from the simulator&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Reference image of Vinylogue users list directly from the simulator&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alongside the reference image, I gave a variant of the above instructions flow. I gave it some upfront hints: the font is AvenirNext; please ignore the dynamic island. Then had it run unguided for 5 iterations before stepping in and giving it more hints and tools to see how close it could get to pixel perfect.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/cc-eyes-swiftui-evolution.png&quot; width=&quot;800&quot; height=&quot;&quot; alt=&quot;Evolution of SwiftUI view across 9 iterations (please view full)&quot; title=&quot;Evolution of SwiftUI view across 9 iterations (please view full)&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Evolution of SwiftUI view across 9 iterations (please view full)&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/cc-eyes-comparison-1.png&quot; width=&quot;600&quot; height=&quot;&quot; alt=&quot;Iteration 1: First blind attempt&quot; title=&quot;Iteration 1: First blind attempt&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Iteration 1: First blind attempt&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/cc-eyes-comparison-4.png&quot; width=&quot;600&quot; height=&quot;&quot; alt=&quot;Iteration 4: Improved spacing but worse background color&quot; title=&quot;Iteration 4: Improved spacing but worse background color&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Iteration 4: Improved spacing but worse background color&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/cc-eyes-comparison-6.png&quot; width=&quot;600&quot; height=&quot;&quot; alt=&quot;Iteration 6: Font weights are still wrong&quot; title=&quot;Iteration 6: Font weights are still wrong&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Iteration 6: Font weights are still wrong&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/cc-eyes-comparison-9.png&quot; width=&quot;600&quot; height=&quot;&quot; alt=&quot;Iteration 9: After asking Gemini&apos;s help, for some reason the titles are now uppercased&quot; title=&quot;Iteration 9: After asking Gemini&apos;s help, for some reason the titles are now uppercased&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Iteration 9: After asking Gemini&apos;s help, for some reason the titles are now uppercased&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;challenge-results-analysis&quot;&gt;Challenge Results Analysis&lt;/h2&gt;

&lt;p&gt;Without direct prompting, even with a reference image, CC will default to system fonts and colors (to be fair, this is usually the best route if you have no specific design spec). I had to give it pretty specific instructions to ‚Äúnotice‚Äù things about the image like the colors not being black and white, or the font weights being incorrect. Even using the ImageMagick techniques, CC got confused more often than not. I felt like CC had limited ability to see either absolute or relative differences in padding or sizing. After almost every step, CC thought the output was close enough and it praised itself and wanted to stop.&lt;/p&gt;

&lt;p&gt;With CC‚Äôs current image analysis capabilities, using snapshot testing isn‚Äôt a useful strategy for getting to a pixel perfect result. If your development flow involves reproducing mocks from Figma, it‚Äôd be better to provide the mock and generated web code and colors and fonts directly to CC. If your development flow involves giving CC general vibe reference shots, snapshot testing may give it a few more shots at getting it right.&lt;/p&gt;

&lt;p&gt;This technique is in research phase for me. Without putting it through its full paces, I‚Äôm guessing it doesn‚Äôt make sense at the moment to give it more than 3 iterations before putting a human in the loop.&lt;/p&gt;

&lt;h2 id=&quot;other-ways-to-give-claude-code-eyes&quot;&gt;Other ways to give Claude Code eyes&lt;/h2&gt;

&lt;p&gt;Below are a few other techniques, although I have not tried any of them enough to say how well they work for any particular workflow.&lt;/p&gt;

&lt;h3 id=&quot;full-xctest-uiautomation&quot;&gt;Full XCTest UIAutomation&lt;/h3&gt;

&lt;p&gt;It‚Äôs possible to get the full simulator output with XCTest, but more complicated to get access to the raw image. You can also simulate taps and perform navigation. But the tradeoff is that you have to set up the whole app environment even if you just want to see one view in isolation.&lt;/p&gt;

&lt;h3 id=&quot;simulator-via-xcodebuildmcp&quot;&gt;Simulator via XcodeBuildMCP&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cameroncooke/XcodeBuildMCP&quot;&gt;XcodeBuildMCP&lt;/a&gt; advertises simulator automation features:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;UI Automation: Interact with simulator UI elements&lt;/li&gt;
    &lt;li&gt;Screenshot: Capture screenshots from a simulator&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;macos-system-viewing-with-peekaboomcp&quot;&gt;macOS system viewing with PeekabooMCP&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://peekaboo.dev/&quot;&gt;PeekabooMCP&lt;/a&gt; is a macOS system-wide tool for accessing screen contents. This is more useful for developing macOS apps.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;For anyone looking to take the next steps in CC automation in the realm of the view layer, I hope this was somewhat helpful in understanding the current landscape an capabilities.&lt;/p&gt;

&lt;p&gt;The expected shelf-life of this post is short. This post references Claude Code v1.0.51, Xcode 16.4, Swift Snapshot Testing 1.18.4.&lt;/p&gt;
</description>
        <pubDate>Sun, 13 Jul 2025 05:30:00 -0500</pubDate>
        <link>https://twocentstudios.com/2025/07/13/giving-claude-code-eyes-to-see-your-swiftui-views/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/07/13/giving-claude-code-eyes-to-see-your-swiftui-views/</guid>
        
        <category>claudecode</category>
        
        <category>swiftui</category>
        
        <category>apple</category>
        
        <category>ios</category>
        
        
      </item>
    
  </channel>
</rss>
