<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>twocentstudios</title>
    <description>A coding blog covering iOS, Swift, and other programming topics.</description>
    <link>https://twocentstudios.com/blog/tags/ekilive/index.html</link>
    <atom:link href="https://twocentstudios.com/blog/tags/ekilive/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 10 Oct 2025 22:09:10 -0500</pubDate>
    <lastBuildDate>Fri, 10 Oct 2025 22:09:10 -0500</lastBuildDate>
    <generator>Jekyll v3.9.3</generator>
    
      <item>
        <title>Let&apos;s Write a Train Tracking Algorithm</title>
        <description>&lt;p&gt;I delivered a 20-minute presentation on September 20th at &lt;a href=&quot;https://iosdc.jp/2025/&quot;&gt;iOSDC Japan 2025&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you prefer video:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Japanese (conference): &lt;em&gt;available 2025/10/22&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;English (post-conference recording): &lt;a href=&quot;https://youtu.be/xBQlipN0pMg&quot;&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other materials:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/twocentstudios/train-tracker-talk&quot;&gt;GitHub: train-tracker-talk&lt;/a&gt; - Open source code and presentation materials&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2025/09/21/i-presented-at-iosdc-2025/&quot;&gt;Blog: I Presented At iOSDC 2025&lt;/a&gt; - More about the conference and presentation context&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apps.apple.com/app/id6745218674&quot;&gt;App Store: Eki Live&lt;/a&gt; - The app discussed in the presenation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post is a deconstructed version of the talk with the slide images above and my speaker notes in English below.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-01.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lately I’ve been working on an app called &lt;a href=&quot;https://twocentstudios.com/2025/06/03/eki-live-announcement/&quot;&gt;Eki Live&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Today I’m going to talk about a part of that app.&lt;/li&gt;
  &lt;li&gt;So what do I mean by train tracking algorithm?&lt;/li&gt;
  &lt;li&gt;Well, when riding a train, it’s useful to know the upcoming station.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-02.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;On the train, we can see the train information display or listen for announcements.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;video src=&quot;/images/eki-live-presentation-03.mp4&quot; autoplay=&quot;&quot; controls=&quot;&quot; preload=&quot;true&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;ul&gt;
  &lt;li&gt;But would it also be useful to see this information in your Dynamic Island?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-04.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In my talk, we’ll first review the data prerequisites we’ll need for the algorithm.&lt;/li&gt;
  &lt;li&gt;Then, we’ll write each part of the algorithm, improving it step-by-step.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-05.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We need two types of data for the train tracking algorithm:&lt;/li&gt;
  &lt;li&gt;Static data that describes the railway system of greater Tokyo.&lt;/li&gt;
  &lt;li&gt;And Live GPS data from the iPhone user.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-06.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Railways are ordered groups of Stations.&lt;/li&gt;
  &lt;li&gt;In this example, we can see that the Minatomirai Line is made up of 6 stations.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-07.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Trains travel in both Directions on a Railway.&lt;/li&gt;
  &lt;li&gt;Coordinates make up the path of a Railway’s physical tracks.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-08.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This map shows the Railway data we’ll be using.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-09.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We collect live GPS data from an iPhone using the Core Location framework.&lt;/li&gt;
  &lt;li&gt;We store the data in a local SQLite database.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-10.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; has all data from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocation&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Latitude, longitude, speed, course, accuracy, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-11.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A Session is an ordered list of Locations.&lt;/li&gt;
  &lt;li&gt;A Session represents a possible journey.&lt;/li&gt;
  &lt;li&gt;Green is for fast and red is for stopped.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-12.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I created a macOS app to visualize the raw data.&lt;/li&gt;
  &lt;li&gt;In the left sidebar there is a list of Sessions.&lt;/li&gt;
  &lt;li&gt;In the bottom panel there is a list of ordered Locations for a Session.&lt;/li&gt;
  &lt;li&gt;Clicking on a Location shows its position and course on the map.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-13.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Our goal is to write an algorithm that determines 3 types of information:&lt;/li&gt;
  &lt;li&gt;The Railway, the direction of the train, and the next Station.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-14.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Here is a brief overview of the system.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-15.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The app channels &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; values to the algorithm.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-16.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The algorithm reads the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; and gathers information from its memory.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-17.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The algorithm updates its understanding of the device’s location in the world.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-18.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The algorithm calculates a new result set of railway, direction, and station phase.&lt;/li&gt;
  &lt;li&gt;The result is used to update the app UI and Live Activity.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-19.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s start by considering a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;I captured this Location while riding the Tokyu Toyoko Line close to Tsunashima Station.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-20.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Can we determine the Railway from just this Location?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-21.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We &lt;em&gt;do&lt;/em&gt; have coordinates that outline the railway…&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-22.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, we find the closest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RailwayCoordinate&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; for each Railway.&lt;/li&gt;
  &lt;li&gt;Then, we order the Railways by which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RailwayCoordinate&lt;/code&gt; is nearest.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-23.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Here are our results.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-24.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The closest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RailwayCoordinate&lt;/code&gt; is from the Toyoko Line at only 12 meters away.&lt;/li&gt;
  &lt;li&gt;The next closest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RailwayCoordinate&lt;/code&gt; is from the Shin-Yokohama Line at 177 meters away.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;video src=&quot;/images/eki-live-presentation-applause.mp4&quot; autoplay=&quot;&quot; loop=&quot;&quot; preload=&quot;true&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;ul&gt;
  &lt;li&gt;We did it!&lt;/li&gt;
  &lt;li&gt;Our algorithm works well for &lt;em&gt;this&lt;/em&gt; case.&lt;/li&gt;
  &lt;li&gt;But…&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-26.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s consider another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; was also captured on the Toyoko Line.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-27.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;But in this section of the railway track, the Toyoko Line and Meguro Line run parallel.&lt;/li&gt;
  &lt;li&gt;It’s not possible to determine whether the correct line is Toyoko or Meguro from just this one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-28.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The algorithm needs to use all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt;s from the journey.&lt;/li&gt;
  &lt;li&gt;The example journey follows the Toyoko Line for longer than the Meguro Line.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-29.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, we convert the distance between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; and the nearest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RailwayCoordinate&lt;/code&gt; to a score.&lt;/li&gt;
  &lt;li&gt;The score is high if close and exponentially lower when far.&lt;/li&gt;
  &lt;li&gt;Then, we add the scores over time.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-30.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The score from Nakameguro to Hiyoshi is now higher for the Toyoko Line than the Meguro Line.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;video src=&quot;/images/eki-live-presentation-applause.mp4&quot; autoplay=&quot;&quot; loop=&quot;&quot; preload=&quot;true&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;ul&gt;
  &lt;li&gt;We did it!&lt;/li&gt;
  &lt;li&gt;Our algorithm works well for this case.&lt;/li&gt;
  &lt;li&gt;But…&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-32.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s consider a third &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; was captured on the Keihin-Tohoku Line which runs the east corridor of Tokyo.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-33.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Several lines run parallel in this corridor.&lt;/li&gt;
  &lt;li&gt;The Tokaido Line follows the same track as the Keihin-Tohoku Line&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-34.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;But the Tokaido Line skips many stations.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-35.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If we only compare railway coordinate proximity scores, the scores will be the same.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-36.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s add a small penalty to the score if a station is passed.&lt;/li&gt;
  &lt;li&gt;If a station is passed, that indicates the iPhone may be on a parallel express railway.&lt;/li&gt;
  &lt;li&gt;Let’s also add a small penalty to the score if a train stops between stations.&lt;/li&gt;
  &lt;li&gt;If a train stops between stations, that indicates the iPhone may be on a parallel local railway.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-37.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using this algorithm, the Keihin-Tohoku score is now slightly larger than the Tokaido score.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-38.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s consider two example trips to better understand penalties.&lt;/li&gt;
  &lt;li&gt;For an example trip 1 that starts at Tokyo station…&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-39.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The train stops at the second Keihin-Tohoku station.&lt;/li&gt;
  &lt;li&gt;The Tokaido score receives a penalty since the stop occurs between stations.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-40.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;As we continue…&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-41.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Tokaido score receives many penalties.&lt;/li&gt;
  &lt;li&gt;Therefore, the algorithm determines the trip was on the Keihin-Tohoku Line.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-42.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For an example trip 2 that also starts at Tokyo…&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-43.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The train passes the 2nd Keihin-Tohoku station.&lt;/li&gt;
  &lt;li&gt;And the Keihin-Tohoku score receives a penalty.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-44.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;As we continue…&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-45.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Keihin-Tohoku score receives many penalties.&lt;/li&gt;
  &lt;li&gt;Therefore, the algorithm determines the trip was on the Tokaido Line.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;video src=&quot;/images/eki-live-presentation-applause.mp4&quot; autoplay=&quot;&quot; loop=&quot;&quot; preload=&quot;true&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;ul&gt;
  &lt;li&gt;We did it!&lt;/li&gt;
  &lt;li&gt;Our algorithm works well for this case.&lt;/li&gt;
  &lt;li&gt;There are many more edge cases.&lt;/li&gt;
  &lt;li&gt;However, let’s continue.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-48.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For each potential railway, we will determine which direction the train is moving.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-49.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Every railway has 2 directions.&lt;/li&gt;
  &lt;li&gt;We’re used to seeing separate timetables on the departure board at a non-terminal station.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-50.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For example, the Toyoko Line goes inbound towards Shibuya and outbound towards Yokohama.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-51.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s consider a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; captured on the Toyoko Line going inbound to Shibuya.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-52.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Once we have visited two stations, we can compare the temporal order the station visits.&lt;/li&gt;
  &lt;li&gt;If the visit order matches the order of the stations in the database, we say that the iPhone is heading in the “ascending” direction.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-53.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The iPhone visited Kikuna and then Okurayama.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-54.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This ordering does not match the database, so we consider it “descending”.&lt;/li&gt;
  &lt;li&gt;In the database, “descending” maps to inbound.&lt;/li&gt;
  &lt;li&gt;Therefore, we know the iPhone is heading inbound to Shibuya.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;video src=&quot;/images/eki-live-presentation-applause.mp4&quot; autoplay=&quot;&quot; loop=&quot;&quot; preload=&quot;true&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;ul&gt;
  &lt;li&gt;We did it!&lt;/li&gt;
  &lt;li&gt;Our algorithm works well for this case.&lt;/li&gt;
  &lt;li&gt;But…&lt;/li&gt;
  &lt;li&gt;It could take 5 minutes to determine the train direction.&lt;/li&gt;
  &lt;li&gt;Can we do better?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-56.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt;’s course.&lt;/li&gt;
  &lt;li&gt;Remember that course is included with some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocation&lt;/code&gt;s by Core Location.&lt;/li&gt;
  &lt;li&gt;Several points moving at a decent speed are required before Core Location adds course to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocation&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;And course itself has its own accuracy value included.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-57.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Core Location provides an estimate of the iPhone’s course in degrees.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-58.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Note that this is &lt;em&gt;not&lt;/em&gt; the iPhone’s orientation using the compass.&lt;/li&gt;
  &lt;li&gt;The course value should be the same regardless of whether the iPhone is in a pocket or held in a hand facing the rear of the train.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-59.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The course for the example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; is 359.6 degrees.&lt;/li&gt;
  &lt;li&gt;It’s almost directly North.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-60.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, we find the 2 closest stations to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-61.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Next, we calculate the vector between the 2 closest stations for the “ascending” direction in our database.&lt;/li&gt;
  &lt;li&gt;For the Toyoko line, the “ascending” direction is outbound (as mentioned earlier).&lt;/li&gt;
  &lt;li&gt;Therefore the vector goes from Tsunashima to Okurayama.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-62.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We need to take a quick sidebar to talk about the dot product.&lt;/li&gt;
  &lt;li&gt;Do you remember the dot product from math class?&lt;/li&gt;
  &lt;li&gt;We can compare the direction of unit vectors with the dot product.&lt;/li&gt;
  &lt;li&gt;Two vectors facing the same direction have a positive dot product.&lt;/li&gt;
  &lt;li&gt;Two vectors facing in opposite directions have a negative dot product.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-63.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Next, we calculate the dot product between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt;’s course vector and the stations vector.&lt;/li&gt;
  &lt;li&gt;If the dot product is positive, then the railway direction is “ascending”.&lt;/li&gt;
  &lt;li&gt;If the dot product is negative, then the railway direction is “descending”.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-65.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The dot product is -0.95.&lt;/li&gt;
  &lt;li&gt;It’s negative.&lt;/li&gt;
  &lt;li&gt;Negative means “descending”.&lt;/li&gt;
  &lt;li&gt;And “descending” in our database maps to inbound for the Toyoko Line.&lt;/li&gt;
  &lt;li&gt;Therefore, the iPhone is heading to Shibuya.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;video src=&quot;/images/eki-live-presentation-applause.mp4&quot; autoplay=&quot;&quot; loop=&quot;&quot; preload=&quot;true&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;ul&gt;
  &lt;li&gt;We did it!&lt;/li&gt;
  &lt;li&gt;Our algorithm works well.&lt;/li&gt;
  &lt;li&gt;Let’s move on to the last part of the algorithm.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-67.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Finally, we can determine the next station.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-68.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The next station is shown on the train information display.&lt;/li&gt;
  &lt;li&gt;We’ll call this the “focus station phase” going forward.&lt;/li&gt;
  &lt;li&gt;This includes the station name (e.g. Kikuna) and its phase (e.g. Next).&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-69.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The display cycles through next, soon, and now phases for each station.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-70.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;On a map, here is where we will show each phase.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-71.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We calculate the distance &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; and direction vector &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt; from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; to the closest station.&lt;/li&gt;
  &lt;li&gt;We show the closest station &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S&lt;/code&gt; or the next station in the travel direction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S+1&lt;/code&gt; depending on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-72.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When the closest station is in the travel direction, the phase will be “next”.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-73.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; less than 500m from the station will be “soon”.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-74.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; less than 200m from the station will be “now”.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-75.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Even though the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; is within 500m from the closest station, the station is not in the travel direction.&lt;/li&gt;
  &lt;li&gt;Therefore, the phase will be “next” for the next station in the travel direction.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;video src=&quot;/images/eki-live-presentation-applause.mp4&quot; autoplay=&quot;&quot; loop=&quot;&quot; preload=&quot;true&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;ul&gt;
  &lt;li&gt;We did it!&lt;/li&gt;
  &lt;li&gt;Our algorithm works well.&lt;/li&gt;
  &lt;li&gt;But…&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-77.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GPS data is unreliable.&lt;/li&gt;
  &lt;li&gt;Especially within big stations.&lt;/li&gt;
  &lt;li&gt;Especially when not moving.&lt;/li&gt;
  &lt;li&gt;Here is an example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; stopped inside Kawasaki station that has an abysmal 1 km accuracy.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-78.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s create a history of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt;s for each station.&lt;/li&gt;
  &lt;li&gt;For each station, let’s categorize each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; according to its distance and direction.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-79.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In this example, “approaching” points are orange, “visiting” points are green, and the departure point is “red”.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-80.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Focus station algorithm version 2 has 3 steps.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-81.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In step 1, we categorize a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; as “visiting” or “approaching” if it lies within the bounds of a Station.&lt;/li&gt;
  &lt;li&gt;Our rule is that only 1 Station per Railway will store a unique &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;visitingLocations&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;approachingLocations&lt;/code&gt; array.&lt;/li&gt;
  &lt;li&gt;Usually, this is not an issue, but some Stations on the same Railway are within 200m of each other.&lt;/li&gt;
  &lt;li&gt;To disambiguate, we always choose the closest Station.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-82.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; is outside the bounds of any Station that already has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;visitingLocations&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;approachingLocations&lt;/code&gt; as non-empty, we set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstDepartureLocation&lt;/code&gt; for that Station.&lt;/li&gt;
  &lt;li&gt;It’s okay for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; to be set as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstDepartureLocation&lt;/code&gt; for Station A while also being in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;visitingLocations&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;approachingLocations&lt;/code&gt; array of Station B.&lt;/li&gt;
  &lt;li&gt;Additionally, there is special handling for the startup case where a railway has no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt;s set yet. In this case, we try to find the closest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Station&lt;/code&gt; opposite the travel direction and set its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstDepartureLocation&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We can then consider that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Station&lt;/code&gt; the user’s departure station and use it to determine the focus station.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-83.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In step 2, we use the station history to calculate the phase for each station.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-84.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This is a departure phase for Minami-Senju station.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StationDirectionalLocationHistory&lt;/code&gt; has only a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstDepartureLocation&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-85.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This is an approaching phase for Kita-Senju station.&lt;/li&gt;
  &lt;li&gt;Note: this would still count as an approaching phase even if there were only 1 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;approachingLocations&lt;/code&gt; array.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-86.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This is a visiting phase.&lt;/li&gt;
  &lt;li&gt;Note: this would still count as a visiting phase even if there were only 1 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;visitingLocations&lt;/code&gt; array.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-87.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This is a visited phase.&lt;/li&gt;
  &lt;li&gt;You can see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstDepartureLocation&lt;/code&gt; in red.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-88.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In step 3, we look through the station phase history for all stations to determine the focus station phase.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-89a.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In an example, when the latest phase for Kawasaki station is visited, then the focus phase is “Next: Kamata”&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-89b.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In another example, when the latest station phase for Musashi-Kosugi station is visited and Motosumiyoshi station is approaching, then the focus phase is “Soon: Motosumiyoshi”&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-90.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using a state machine gives us more stable results.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;video src=&quot;/images/eki-live-presentation-applause.mp4&quot; autoplay=&quot;&quot; loop=&quot;&quot; preload=&quot;true&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;ul&gt;
  &lt;li&gt;We did it!&lt;/li&gt;
  &lt;li&gt;Our algorithm works well…&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-91.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;But can we tell the difference between a visited station and a passed station?&lt;/li&gt;
  &lt;li&gt;Remember, we need this information to calculate a potential penalty for the railway score.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-92.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the train is stopped within a station’s bounds for more than 20 seconds then we consider it visited.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-93.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the train is moving within a station’s bounds for more than 70 seconds then we also consider it visited.&lt;/li&gt;
  &lt;li&gt;This case is for stations with bad GPS reception.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-94.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Otherwise we consider the station as passed.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;video src=&quot;/images/eki-live-presentation-95a.mp4&quot; controls=&quot;&quot; preload=&quot;false&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;ul&gt;
  &lt;li&gt;Now I’d like to demo the SessionViewer macOS app I created.&lt;/li&gt;
  &lt;li&gt;I’ll show a journey from Kannai station to Kawasaki station on the Keihin-Tohoku line.&lt;/li&gt;
  &lt;li&gt;It takes some time for all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt;s to be processed by the algorithm (top right).&lt;/li&gt;
  &lt;li&gt;But while it’s processing, I can start playback to see the journey at 10x speed (top right).&lt;/li&gt;
  &lt;li&gt;In the inspector (right sidebar), you can see the algorithm’s results updating.&lt;/li&gt;
  &lt;li&gt;Keihin-Tohoku line has the highest score (top right).&lt;/li&gt;
  &lt;li&gt;The direction is northbound (top right).&lt;/li&gt;
  &lt;li&gt;The latest phase for each station is shown (middle right).&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;video src=&quot;/images/eki-live-presentation-95b.mp4&quot; controls=&quot;&quot; preload=&quot;false&quot; width=&quot;100%&quot;&gt;&lt;/video&gt;

&lt;ul&gt;
  &lt;li&gt;When we reach the last &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Session&lt;/code&gt;, we can see the full Station history (middle right).&lt;/li&gt;
  &lt;li&gt;We can see the phase history for any station by clicking its current phase.&lt;/li&gt;
  &lt;li&gt;When I click on a station, I can see on the map the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt;s that were used to calculate its phase.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-96.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The 5 iOS apps I created to collect this data are &lt;a href=&quot;https://github.com/twocentstudios/train-tracker-talk&quot;&gt;open source on GitHub&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The macOS app and algorithm are included as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-97.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The algorithm is still being improved!&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-98.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;But if you want to try it, Eki Live is on the &lt;a href=&quot;https://apps.apple.com/app/id6745218674&quot;&gt;App Store&lt;/a&gt; now.&lt;/li&gt;
  &lt;li&gt;The app starts up automatically in the background and shows the next station in the Dynamic Island.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/eki-live-presentation-99.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thanks for reading this presentation.&lt;/li&gt;
  &lt;li&gt;If you have questions or comments, feel free to reach out.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 22 Sep 2025 15:00:00 -0500</pubDate>
        <link>https://twocentstudios.com/2025/09/22/lets-write-a-train-tracking-algorithm/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/09/22/lets-write-a-train-tracking-algorithm/</guid>
        
        <category>ekilive</category>
        
        <category>apple</category>
        
        <category>ios</category>
        
        <category>presentation</category>
        
        
      </item>
    
      <item>
        <title>I Presented At iOSDC 2025</title>
        <description>&lt;p&gt;I gave a 20-minute presentation at iOSDC 2025 called “Let’s Write a Train Tracking Algorithm”. I’m still gathering up all the presentation materials, but so far:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/twocentstudios/lets-write-a-train-tracking-algorithm&quot;&gt;Speaker Deck: Static slides&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/twocentstudios/train-tracker-talk&quot;&gt;GitHub: Open source code and presentation materials&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apps.apple.com/app/id6745218674&quot;&gt;App Store: Eki Live&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fortee.jp/iosdc-japan-2025/proposal/a5e991ef-fec8-420b-8da8-de1f38c58182&quot;&gt;Fortee: My talk proposal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2025/04/15/train-tracker-checkpoint-devlog/&quot;&gt;Blog: Eki Live Devlog 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2025/05/29/train-tracker-devlog-02/&quot;&gt;Blog: Eki Live Devlog 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a more behind-the-scenes diary post. I’ll follow up with more details from the actual talk after the conference has ended.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/iosdc25-livestream.jpg&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;Me looking especially jpg encoded on the live stream&quot; title=&quot;Me looking especially jpg encoded on the live stream&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Me looking especially jpg encoded on the live stream&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;about-the-conference&quot;&gt;About the conference&lt;/h2&gt;

&lt;p&gt;iOSDC is a really great conference for both attendees and speakers. This is my first year speaking but I’ve attended the past 3 years. I like that there’s an open proposal system and it draws a wide variety of speakers that are not necessarily on the “circuit”. The rookies lighting talk system is also a fantastic way to create the next generation of great speakers in a supportive environment. I met some cool developers at the speakers’ dinner that got me excited to do my own talk and to see their talks.&lt;/p&gt;

&lt;p&gt;After my talk, there were several great questions during Q&amp;amp;A. And I had several more really interesting conversations with developers at the Ask the Speaker table.&lt;/p&gt;

&lt;p&gt;This was my first conference talk presenting in Japanese. When I created my proposal, I knew I wanted to do it in Japanese. Although I’m sure the majority of iOSDC attendees could have understood the presentation in English (especially simplified), it felt like the right time to challenge myself.&lt;/p&gt;

&lt;p&gt;Writing the talk in Japanese had a significant upside: I had to iterate the spoken lines for each slide several times to their most essential elements. My less expansive vocabulary resulted in a talk that is easier to understand by both developers and non-developers. My inability to improvise made the talk less fluid, but also ensured that my talk was optimized for time and I could learn it down to the word.&lt;/p&gt;

&lt;p&gt;The final version of my presentation was 121 slides in 20 minutes. The slides layout was created in Deck Set. I created about 90 images and 5 videos captured from the maps in my custom apps and in Figma. The demo video was lightly edited in Final Cut Pro.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/iosdc25-deckset.png&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;My deck in Deck Set&quot; title=&quot;My deck in Deck Set&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;My deck in Deck Set&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks to everyone who came to the talk and watched online. Special thanks to my friends who gave early feedback on my drafts.&lt;/p&gt;

&lt;p&gt;I’m really happy I had this opportunity. I hope I’ll have something interesting to propose for a talk for next year.&lt;/p&gt;

&lt;h2 id=&quot;how-i-developed-the-presentation-materials&quot;&gt;How I developed the presentation materials&lt;/h2&gt;

&lt;p&gt;At the time of the call for proposals, I’d released Eki Live to the App Store with what I considered “version 2” of the underlying algorithm that determines the user’s railway, the direction, and station and updates it over time.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-v1-home-en.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Eki Live&apos;s home screen, showing railway, direction, and next station&quot; title=&quot;Eki Live&apos;s home screen, showing railway, direction, and next station&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Eki Live&apos;s home screen, showing railway, direction, and next station&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before version 2, there was of course version 1 of the algorithm. Version 1 was the simplest method that worked for the least difficult train journey scenarios. The app would use the iPhone’s distance from station coordinates to create a visit history for the stations on a railway line. This info was enough to provide an estimate of the railway, direction, and station in many cases. But version 1 of the algorithm had several unfixable flaws:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The user had to visit at least 2 stations in order for a result to be produced.&lt;/li&gt;
  &lt;li&gt;The algorithm was not differentiating between parallel railways that split at some point.&lt;/li&gt;
  &lt;li&gt;There was no way to differentiate between parallel railways with different station configurations like the Tokaido and Keihin-Tohoku lines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although the rest of the app was ready, I didn’t end up releasing version 1 of the tracking algorithm. It didn’t quite feel magical enough.&lt;/p&gt;

&lt;p&gt;I rewrote the algorithm to a version 2 before releasing the app. I spent more time collecting data and more time creating visual debug utility apps to assist in development.&lt;/p&gt;

&lt;p&gt;However, the biggest change to the algorithm was obtaining and cleaning up railway coordinate data. The dataset I used for &lt;a href=&quot;/eki-bright-tokyo-area-train-timetables/&quot;&gt;Eki Bright&lt;/a&gt; only included station (and its coordinates) and railway data. Once I had access to the coordinate data, that opened up a new avenue for being able to estimate a railway instantly and then continue to refine the estimate over time.&lt;/p&gt;

&lt;p&gt;In version 2, I doubled down on a scoring system for each aspect of the overall algorithm. Although my head was in the right place, this introduced far too much complexity for too little benefit. It took much longer than I’d hoped, but I eventually got this version to a state I was reasonably satisfied with and released it as Eki Live v1.0 to the App Store.&lt;/p&gt;

&lt;p&gt;It would be much easier to develop the tracking algorithm assuming access to an infinite stream of accurate GPS coordinates from an iPhone. Unfortunately, this is not the case. The app needs to work within the bounds of the Core Location APIs for monitoring significant location changes so that device battery life can be preserved. The app also needs to &lt;em&gt;stop&lt;/em&gt; tracking a journey when that journey ends. Therefore, there’s two other separate heuristics I needed to iterate on that subtly affect the behavior of the tracking algorithm via the data provided to it.&lt;/p&gt;

&lt;p&gt;When I submitted my talk proposal to iOSDC, I was planning on talking about the entire app. After all, there were so many unique and interesting problems I’d run into in the development process.&lt;/p&gt;

&lt;p&gt;When my proposal was accepted, I started working on my talk with this in goal in mind: more of a high level overview of the app development. In that early draft of the talk, I set out a map for which data-gathering apps I needed to create. A main theme of this draft would be &lt;em&gt;why you should develop throwaway prototype apps to gather data before developing for production&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Of course, it took a few weeks to develop what became 5 separate prototype apps plus the algorithm viewer app. Along the way, I became less and less satisfied with the prospect of presenting “version 2” of the tracking algorithm to an audience since it had many admitted flaws.&lt;/p&gt;

&lt;p&gt;Once I’d finally created all my prototype apps and updated the talk draft, I realized I was already probably 5-10 minutes over time without talking about the tracking algorithm, UI, or Live Activity. I took a step back and realized that the tracking algorithm made for a more easily digestible story for newcomers to this problem than a bunch of minutia about the self-imposed constraints of data collection.&lt;/p&gt;

&lt;p&gt;So in terms of the talk draft, I essentially started over. This time I focused purely on the tracking algorithm itself, telling a cleaned up story about how it has improved over time. Although I didn’t show any of the several data collection apps I made, they were still useful in collecting real life data to use in examples and to develop the algorithm itself.&lt;/p&gt;

&lt;p&gt;To fit the time constraints, I had to pare down a few examples and gloss over some details. But in spite of this, I was satisfied with the talk being code-free and accessible to even non-developers. It’s a true challenge trying to set up all the background knowledge needed to understand a problem, present the problem, and have the audience understand the solution within the span of 2 or 3 slides. Especially when the solution was something that took me days or weeks to work out.&lt;/p&gt;

&lt;p&gt;The tracking algorithm presented in my talk is version 3. But due to spending the last two weeks writing and practicing the talk, I didn’t have time to actually integrate this version into the Eki Live app! The production version is still using tracking algorithm version 2 and in addition has some iOS 26 bugs (iOS 26 was released this week).&lt;/p&gt;

&lt;p&gt;I still have a lot of work to do before I can (temporarily) put a bow on this project: integrating tracking algorithm version 3 into the app, improving the manual start/stop tracking UI, and recording and uploading my talk in English.&lt;/p&gt;

&lt;p&gt;I wrote two development logs (&lt;a href=&quot;/2025/04/15/train-tracker-checkpoint-devlog/&quot;&gt;Devlog 1&lt;/a&gt; &lt;a href=&quot;/2025/05/29/train-tracker-devlog-02/&quot;&gt;Devlog 2&lt;/a&gt;) about Eki Live that go into further detail. Check them out and free free to reach out.&lt;/p&gt;

</description>
        <pubDate>Sun, 21 Sep 2025 05:14:02 -0500</pubDate>
        <link>https://twocentstudios.com/2025/09/21/i-presented-at-iosdc-2025/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/09/21/i-presented-at-iosdc-2025/</guid>
        
        <category>ios</category>
        
        <category>ekilive</category>
        
        <category>presentation</category>
        
        
      </item>
    
      <item>
        <title>Caveats Using Read-only SQLite Databases from the App Bundle</title>
        <description>&lt;p&gt;In my iOS apps &lt;a href=&quot;/2025/06/03/eki-live-announcement/&quot;&gt;Eki Live&lt;/a&gt; and &lt;a href=&quot;https://twocentstudios.com/2024/07/27/eki-bright-tokyo-area-train-timetables/&quot;&gt;Eki Bright&lt;/a&gt; I’ve been using read-only SQLite databases shipped in the app bundle. It’s mostly worked fine so far (disregarding the &lt;a href=&quot;https://ryanashcraft.com/sqlite-databases-in-app-group-containers/&quot;&gt;App Group Containers&lt;/a&gt; problem).&lt;/p&gt;

&lt;p&gt;My workflow involves:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Running a Swift script from a separate target that aggregates several &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; files into an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlite&lt;/code&gt; file.&lt;/li&gt;
  &lt;li&gt;Copying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlite&lt;/code&gt; file to the app target; it gets included in the app bundle.&lt;/li&gt;
  &lt;li&gt;Opening the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlite&lt;/code&gt; file as read-only on app launch.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Opening an sqlite database from the bundle using the venerable GRDB library&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;databasePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;db&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sqlite&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Database not found in bundle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DatabaseQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;databasePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Up to now, I had unwittingly avoided any problems with the write-ahead log (WAL) journaling mode because the database generated by the script was created as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DatabaseQueue&lt;/code&gt; and not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DatabasePool&lt;/code&gt;, and otherwise did not inherit any settings via backup.&lt;/p&gt;

&lt;p&gt;In Eki Live, I started using a read-write database to record GPS datapoints while out riding trains that I could play back in a bespoke app on my Mac. I again unwittingly avoided any problems with journaling mode because I was taking the intermediate step of processing this read-write database in a Swift script that produced a flat &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; file. The Swift script maintained read-write access to the file system because it ran from a target without a bundle.&lt;/p&gt;

&lt;p&gt;My luck finally ran out when I decided to refactor my system to skip that intermediate step: I wanted to be able to export a read-write database from the Eki Live iOS app, include it in the bundle of the macOS debug app, and run it as read-only.&lt;/p&gt;

&lt;p&gt;When trying this, SQLite threw errors:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;os_unix.c:49450: (2) open(../viewer.app/Contents/Resources/db.sqlite-wal) - No such file or directory
SQLite error 14: unable to open database file - while executing `SELECT * FROM sqlite_master LIMIT 1`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can check and change the &lt;a href=&quot;https://blog.sqlitecloud.io/journal-modes-in-sqlite&quot;&gt;journal mode&lt;/a&gt; of a database in SQLite with the following terminal commands:&lt;/p&gt;

&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Check the journal mode of the database&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sqlite3 db.sqlite &lt;span class=&quot;s2&quot;&gt;&quot;PRAGMA journal_mode;&quot;&lt;/span&gt;
wal &lt;span class=&quot;c&quot;&gt;# this mode can cause problems when opening the database from a read-only part of the file system&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Change the journal mode of the database&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sqlite3 db.sqlite &lt;span class=&quot;s2&quot;&gt;&quot;PRAGMA journal_mode=DELETE;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Check the journal mode of the database again&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sqlite3 db.sqlite &lt;span class=&quot;s2&quot;&gt;&quot;PRAGMA journal_mode;&quot;&lt;/span&gt;
delete &lt;span class=&quot;c&quot;&gt;# as long as we open the database in readonly mode, there&apos;s no problem with delete mode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Manually changing the journal mode to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete&lt;/code&gt; via the command line before copying the database to the app bundle solved my problem. However, I wanted to ensure any database I exported from the iOS app would be easily importable by the macOS app.&lt;/p&gt;

&lt;p&gt;Here is the working export function from the iOS app that includes resetting the journal mode to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete&lt;/code&gt; for the exported database:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exportDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sourceDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DatabaseReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuidString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;_&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;formatted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iso8601&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temporaryDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appendingPathExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sqlite&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;targetDatabase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DatabaseQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Note: `backup` changes the journal mode of `targetDatabase`&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;backup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Optional: make any changes to the target database contents before exporting&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Ensure database size is as compact as possible after any deletes&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vacuum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Change the journal mode from `wal` to `delete`&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeWithoutTransaction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PRAGMA journal_mode=DELETE;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Housekeeping&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the above code, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;targetDatabase&lt;/code&gt; actually &lt;em&gt;is&lt;/em&gt; created in journal mode &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete&lt;/code&gt;. However, it’s the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;backup&lt;/code&gt; command that changes the journal mode of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;targetDatabase&lt;/code&gt; to match that of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sourceDatabase&lt;/code&gt; (which, as read-write, is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wal&lt;/code&gt; as intended). In retrospect, that makes sense I guess.&lt;/p&gt;

&lt;p&gt;For the record, on the macOS app side, I tried copying the database from the bundle into the documents directory before opening it, but ran into the same problem with a “missing .sqlite-wal file”. I think because I hadn’t been properly closing the exported database and wasn’t including the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wal&lt;/code&gt; file in the export, sqlite was getting confused. This is still a bit of a mystery though.&lt;/p&gt;

&lt;p&gt;I’ll also note it’s possible to use &lt;a href=&quot;https://www.sqlite.org/lang_vacuum.html#vacuuminto&quot;&gt;VACUUM INTO&lt;/a&gt; in place of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BACKUP&lt;/code&gt; and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VACUUM&lt;/code&gt;. However, in my use case, I need to optionally remove some data from the target database before returning it.&lt;/p&gt;

&lt;p&gt;Using improperly maintained sqlite databases in a read-only context is probably a rare problem, but hopefully the info in this post helps other sqlite novices.&lt;/p&gt;

&lt;p&gt;As a summary:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Journal mode is embedded in the sqlite database file itself.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;backup&lt;/code&gt; command changes the journal mode of the target database to match the source database.&lt;/li&gt;
  &lt;li&gt;Check the journal mode of a database with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlite3 db.sqlite &quot;PRAGMA journal_mode;&quot;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Change the journal mode of a database with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlite3 db.sqlite &quot;PRAGMA journal_mode=DELETE;&quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sources&quot;&gt;Sources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sqlite.org/pragma.html#pragma_journal_mode&quot;&gt;SQLite: Pragma statements supported by SQLite&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sqlite.org/c3ref/backup_finish.html&quot;&gt;SQLite: Online Backup API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sqlite.org/lang_vacuum.html#vacuuminto&quot;&gt;SQLite: VACUUM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.sqlitecloud.io/journal-modes-in-sqlite&quot;&gt;Journal Modes in SQLite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 07 Jun 2025 09:27:00 -0500</pubDate>
        <link>https://twocentstudios.com/2025/06/07/sql-databases-bundle/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/06/07/sql-databases-bundle/</guid>
        
        <category>ekilive</category>
        
        <category>apple</category>
        
        <category>ios</category>
        
        <category>debugging</category>
        
        
      </item>
    
      <item>
        <title>Eki Live - Zero-Touch Assistant for Navigating Tokyo&apos;s Railways</title>
        <description>&lt;p&gt;I’m excited to announce my latest app Eki Like or 駅ライブ in Japanese.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-v1-app-icon.png&quot; width=&quot;&quot; height=&quot;200&quot; alt=&quot;App icon for Eki Live v1.0&quot; title=&quot;App icon for Eki Live v1.0&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;App icon for Eki Live v1.0&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Tokyo-area residents can download it &lt;a href=&quot;https://apps.apple.com/us/app/eki-live/id6745218674&quot;&gt;on the App Store&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Eki Live tracks the train you’re currently on and shows the current/next station on your route.&lt;/p&gt;

&lt;p&gt;The main interface is a Live Activity:&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-live-activity-en.png&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;Live Activity on the lock screen and Dynamic Island&quot; title=&quot;Live Activity on the lock screen and Dynamic Island&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Live Activity on the lock screen and Dynamic Island&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But there’s also a more detailed view inside the app:&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-v1-home-en.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Home screen of Eki Live (English version)&quot; title=&quot;Home screen of Eki Live (English version)&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Home screen of Eki Live (English version)&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The unique point of Eki Live is that it’s designed as a &lt;strong&gt;zero-touch&lt;/strong&gt; app:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The app runs silently (and lightly) in the background throughout the day.&lt;/li&gt;
  &lt;li&gt;When it detects you’re on a train, the app automatically determines which railway line you’re on and which direction you’re headed.&lt;/li&gt;
  &lt;li&gt;The app starts a Live Activity that appears on your lock screen and Dynamic Island (on supported iPhones).&lt;/li&gt;
  &lt;li&gt;When your trip is over, the Live Activity automatically disappears.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All this happens with &lt;em&gt;zero user interaction&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I’ve been using the app during the last few months of development and I think it’s kind of magical. Please &lt;a href=&quot;https://apps.apple.com/us/app/eki-live/id6745218674&quot;&gt;give it a try&lt;/a&gt; and send me your thoughts at &lt;a href=&quot;support@twocentstudios.com?subject=Eki%20Live%20Feedback&quot;&gt;support@twocentstudios.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’d like a deep dive into Eki Live, why I made it, its limitations, and what I’ve got planned for it next, please keep reading.&lt;/p&gt;

&lt;h2 id=&quot;limitations&quot;&gt;Limitations&lt;/h2&gt;

&lt;p&gt;Eki Live relies primarily on Apple’s Location Services framework – which itself relies mostly on GPS data. Therefore, Eki Live has very limited operation on underground railway lines. This often includes the many stations that are covered or partially underground, as well as tunnels and dense city-areas.&lt;/p&gt;

&lt;p&gt;For efficient background standby operation, Eki Live uses a Location Services API called &lt;em&gt;significant location changes&lt;/em&gt;. The app stays asleep in the background like all other apps on your device, but is awoken by the system when your device moves some distance from its previous location. When awoken, Eki Live briefly checks whether the device is moving at train-speeds, and if not, it goes right back to sleep. This means that Eki Live will wake up and find your current railway at minimum a few hundred meters after you’ve departed your origin station and sometimes longer. The detection time can be random depending on several factors (whether the system is already using your location, your battery level, etc.).&lt;/p&gt;

&lt;p&gt;When GPS accuracy drops significantly, Eki Live will report stations as &lt;strong&gt;Nearby&lt;/strong&gt; instead of &lt;strong&gt;Next&lt;/strong&gt; or &lt;strong&gt;Now&lt;/strong&gt;. When no new GPS coordinates have been delivered by the system in over 60 seconds, Eki Live will switch to reduced accuracy mode with hatching and a low signal indicator shown in the Live Activity and in the app.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-v1-reduced-accuracy.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Reduced accuracy mode is triggered when no GPS coordinates have been received in 60 seconds or more&quot; title=&quot;Reduced accuracy mode is triggered when no GPS coordinates have been received in 60 seconds or more&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Reduced accuracy mode is triggered when no GPS coordinates have been received in 60 seconds or more&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As of v1.0, Eki Live will dismiss itself once you’ve stopped moving at train speeds for a period of about 10 minutes. This is only a temporarily limitation and will be improved. If you’re feeling impatient, you can swipe left on the Live Activity on the lock screen to dismiss it.&lt;/p&gt;

&lt;p&gt;Similarly, Eki Live will usually handle above ground transfers within a couple hundred meters of the transfer station, but it depends on how divergent the new railway line is from the previous one. This is also a limitation I think I’ll be able to improve in the near future.&lt;/p&gt;

&lt;p&gt;Differentiating between railway lines that run parallel is difficult for Eki Live’s tracking algorithm without more input than just GPS. At the moment, Eki Live will use data about which stations you’ve stopped at versus which you’ve passed to determine which of up to several parallel railways you’re currently on. But this can take as much time as it takes to get to a few stations. If you’re feeling impatient, you can always tap Eki Live’s Live Activity to open the app and tap another railway candidate.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-v1-railway-selection.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;You can open the app to manually select your current railway if it&apos;s not the top candidate; in this example the Meguro-line&quot; title=&quot;You can open the app to manually select your current railway if it&apos;s not the top candidate; in this example the Meguro-line&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;You can open the app to manually select your current railway if it&apos;s not the top candidate; in this example the Meguro-line&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Eki Live does not currently differentiate between local and express trains for railways that have them. However, Eki Live will sometimes show stations as &lt;strong&gt;Passing&lt;/strong&gt; instead of &lt;strong&gt;Now&lt;/strong&gt; when it has high confidence a station will be passed and not stopped at. This depends on many cars the train has and which car (front or back) you are currently occupying.&lt;/p&gt;

&lt;p&gt;Finally, there is an undocumented hard-limit on the number of Live Activities an iOS app can start during a period of time while the app is in the background. As of iOS 18.4, the limit is 10 times per 24-hour window. This means that Eki Live will only be able to &lt;em&gt;start&lt;/em&gt; 10 Live Activities per day from the background. In practice this should be an incredibly rare occurrence. But if it does happen, the workaround would be to open the app, which would start the Live Activity directly on device.&lt;/p&gt;

&lt;p&gt;My mission from version 1.0 onward is to overcome these limitations one-by-one to make the app fulfill its promise of being truly zero-touch on any railway.&lt;/p&gt;

&lt;h2 id=&quot;privacy&quot;&gt;Privacy&lt;/h2&gt;

&lt;p&gt;The goal of Eki Live is to improve your ease of navigation around Tokyo. Eki Live does not and will never have ads or sell data to third-parties.&lt;/p&gt;

&lt;p&gt;Eki Live does not send any raw location data (i.e. latitude, longitude) off device (I have no interest in knowing where you are or where you’ve been).&lt;/p&gt;

&lt;p&gt;The only exception to the above is a technical detail due to an Apple API limitation, which I will explain below.&lt;/p&gt;

&lt;p&gt;In order for the app to start a Live Activity automatically while the app is not open, it must send data to Apple’s push notification server (APNS). APNS then forwards the data back to the device.&lt;/p&gt;

&lt;p&gt;When Eki Live is running in the background and determines which railway line you’re on, it sends (as an example) the following information to a twocentstudios.com server:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  focusStationPhaseKey: &apos;focusStationPhase.upcoming&apos;,
  focusStation: &apos;Jiyugaoka&apos;,
  laterLaterStation: &apos;Gakugei-daigaku&apos;,
  laterStation: &apos;Toritsu-daigaku&apos;,
  railway: &apos;Toyoko Line&apos;,
  railwayDestinationStation: &apos;Shibuya&apos;,
  railwayHexColor: &apos;#DA0442&apos;,
  isReducedAccuracy: false
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above information is packaged up without any parsing or logging and forwarded directly to APNS. It has only the information required to populate the first state of the Live Activity that will start on your device. The device address keys for APNS are generated anonymously by the operating system and are also not logged or associated with you in any way.&lt;/p&gt;

&lt;p&gt;Only the first set of data must be relayed through APNS in order to start the Live Activity. After the Live Activity successfully starts, it is updated directly on the device without any external server communication.&lt;/p&gt;

&lt;p&gt;I hope this superfluous server-based workaround for the ActivityKit API will be eliminated in the future.&lt;/p&gt;

&lt;p&gt;If for some reason you want to opt-out of any server-based communication:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deny background Location Services permissions (please still permit “when in use” Location Services permissions)&lt;/li&gt;
  &lt;li&gt;Open the app manually each time you’d like to start tracking a journey.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All static data for stations and railways is included when downloading the app and is stored locally on your device. All location-based searching happens locally.&lt;/p&gt;

&lt;h2 id=&quot;battery-impact&quot;&gt;Battery impact&lt;/h2&gt;

&lt;p&gt;Eki Live is carefully designed to minimize battery impact.&lt;/p&gt;

&lt;p&gt;I’m acutely aware that iOS users are extremely protective of battery life, and apps that run in the background are rightfully treated with great suspect.&lt;/p&gt;

&lt;p&gt;Eki Live has two states:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;idle in the background&lt;/li&gt;
  &lt;li&gt;tracking a journey&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short, in my testing, Eki Live has the following battery impact:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;While idle&lt;/strong&gt; - an unmeasurably small amount of battery impact.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;While actively tracking a journey&lt;/strong&gt; - about the same battery impact as listening to a song on bluetooth headphones locally in the Music app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re looking for more detail, I’ll clarify exactly how Eki Live affects battery life below.&lt;/p&gt;

&lt;p&gt;While idle in the background, Eki Live uses zero processing power. It may or may not use some resident memory (an attribute managed by the operating system alongside all other backgrounded apps).&lt;/p&gt;

&lt;p&gt;When iOS detects your device has moved some hundreds of meters, it will wake up Eki Live for a few seconds to provide location data. Eki Live will quickly check whether your device is moving at train speeds. If it’s not, it goes right back to sleep.&lt;/p&gt;

&lt;p&gt;If the device &lt;em&gt;is&lt;/em&gt; moving, Eki Live switches into tracking mode.&lt;/p&gt;

&lt;p&gt;In tracking mode, Eki Live processes new GPS coordinates up to one coordinate per second while moving, and fewer while stopped at stations. Processing involves a few local SQLite database queries and some math operations. When the app is open, the map is updated as new GPS coordinates are received. When the app is closed, the app will only send updates when the contents of the Live Activity change (e.g. the station phase changes from “soon” to “now”).&lt;/p&gt;

&lt;p&gt;The processing work described above still has some room for optimizations, so future releases will include battery life improvements.&lt;/p&gt;

&lt;h2 id=&quot;eki-live-and-ambient-computing&quot;&gt;Eki Live and ambient computing&lt;/h2&gt;

&lt;p&gt;Eki Live is an experiment in &lt;a href=&quot;https://en.wikipedia.org/wiki/Ambient_intelligence&quot;&gt;ambient computing&lt;/a&gt;. Ambient computing is technology that blends into the environment and uses context to respond to human behavior without explicit commands. In the case of Eki Live, the app uses iPhone sensors to determine whether it’s on a train and integrate the sensor data with map data to determine which railway you’re on.&lt;/p&gt;

&lt;p&gt;My friend Sergio and I were at lunch talking about smartphones and apps several years ago. He said something that, at the time, didn’t totally make sense based on how limited iOS was outside of the app ecosystem. Paraphrasing him: “People don’t want to open apps. I should be able to get 90% of what I need from an app without opening it.”&lt;/p&gt;

&lt;p&gt;In the long early years of iOS, push notifications were the only way for an app to escape its bounds and integrate into other parts of the system UI. I was skeptical of Sergio’s sentiment at the time because it felt impossible to achieve. Push notifications are somewhat one-dimensional in what kind of user value you can deliver.&lt;/p&gt;

&lt;p&gt;In the more recent era of iOS, there are many more integration points for apps into the system UI: &lt;a href=&quot;https://support.apple.com/en-us/118610&quot;&gt;Widgets&lt;/a&gt;, &lt;a href=&quot;https://support.apple.com/guide/iphone/use-the-dynamic-island-iph28f50d10d/ios&quot;&gt;Live Activities&lt;/a&gt;, &lt;a href=&quot;https://developer.apple.com/app-clips/&quot;&gt;App Clips&lt;/a&gt;, &lt;a href=&quot;https://support.apple.com/guide/shortcuts/welcome/ios&quot;&gt;Shortcuts&lt;/a&gt;, &lt;a href=&quot;https://support.apple.com/en-us/118232&quot;&gt;Spotlight&lt;/a&gt;, etc. Each of these carves out a new niche and bridges the gap between app UI and system UI.&lt;/p&gt;

&lt;p&gt;Outside the iOS world, there’s been an influx of consumer hardware experiments that push ambient computing in some way: wearables like the defunct &lt;a href=&quot;https://en.wikipedia.org/wiki/Humane_Inc.&quot;&gt;Humane pin&lt;/a&gt;; voice assistants like Alexa speakers; and robot vacuums to name a few. Mixed reality wearables may eventually become ubiquitous and escape the app-centered philosophy still core to the OS of the Apple Vision Pro.&lt;/p&gt;

&lt;p&gt;All this is to say that Eki Live is my own skeptical experiment into escaping the app-bounds. As an app dev, the easiest delusion to fall into is “people want to open my app”. Eki Live is the first app I’ve tried to design around users getting value from the app without needing to open it or even remember it exists.&lt;/p&gt;

&lt;p&gt;The key phrase in that last sentence is “user value”. Showing users exactly what they want before they know they want it is very very hard. And to me, it’s annoying when it’s not right. For example, the “context aware” Widget Stacks built into iOS are hopeless. For all but the most obvious use cases it’s impossible to predict what people want to do with 100% accuracy. The only reason I started working on Eki Live was based on &lt;em&gt;probably&lt;/em&gt; having the ability to predict when someone was riding a train and then being able to present the UI automatically in a non-obtrusive way that still provided enough value.&lt;/p&gt;

&lt;p&gt;And, from a development perspective, it was not easy to connect all those dots. As of version 1.0, the dots are still somewhat loosely connected (as detailed in the Limitations section above):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The app waking up in the background is limited by the accuracy of the Core Location APIs to quickly report significant location changes.&lt;/li&gt;
  &lt;li&gt;The app being able to accurately detect your current railway line is based on the accuracy of GPS and the density of other railways in the area.&lt;/li&gt;
  &lt;li&gt;The amount of information the app can show is limited to the space allotted to Live Activities on the lock screen and Dynamic Island.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If all these parts worked flawlessly, you would always have an indicator of the current/next station inconspicuously located in view. But what is the &lt;em&gt;value&lt;/em&gt; in that?&lt;/p&gt;

&lt;h2 id=&quot;why-do-train-passengers-need-to-see-the-currentnext-station&quot;&gt;Why do train passengers need to see the current/next station?&lt;/h2&gt;

&lt;p&gt;Put simply, when riding a train, you need to know what station you’re at so you can decide &lt;em&gt;whether or not to get off the train&lt;/em&gt;. By nature, the current/next station information is only relevant for a few minutes at a time, and thus your awareness of it as a rider needs to be continuously updated.&lt;/p&gt;

&lt;p&gt;Something I noticed during my alpha testing of Eki Live is that there’s a psychological aspect to &lt;em&gt;needing&lt;/em&gt; to know where you are at any given time. This might affect certain people more than others. Whether it’s a nagging feeling of “oh no, did I miss my stop?” or something deeper about being moved through space in a way that humans only began to experience in the last couple hundred years, I still feel it’s difficult to completely give up my awareness as a passenger in a train, car, etc. Although this phenomenon may be real and may drive retention, it’s probably not enough of a top-of-mind motivator for someone want to download the app.&lt;/p&gt;

&lt;p&gt;There are a few &lt;em&gt;train native&lt;/em&gt; ways to stay updated on the train’s current location or otherwise know when to get off the train (I’ll ignore app-based tools for the moment).&lt;/p&gt;

&lt;h3 id=&quot;door-adjacent-live-updating-signage&quot;&gt;Door-adjacent live-updating signage&lt;/h3&gt;

&lt;p&gt;Most train cars have a full color LCD or at least dot-matrix screen near the doors that shows the current or next station on the line:&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-jr-door-lcd-sign.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Next station information in an LCD screen above the door on a JR Line car&quot; title=&quot;Next station information in an LCD screen above the door on a JR Line car&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Next station information in an LCD screen above the door on a JR Line car&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The screen cycles through several different information sets like all stops, platform maps, delay information, etc., so the exact information you need may be unavailable at the moment you need it (when quickly deciding whether to exit the train before the doors close).&lt;/li&gt;
  &lt;li&gt;The screen cycles through ~4 languages/scripts, so it may be unreadable to you for short periods.&lt;/li&gt;
  &lt;li&gt;The screen may not be visible from all standing/sitting positions, especially on crowded trains.&lt;/li&gt;
  &lt;li&gt;The text on the screen may be too small to read from your position.&lt;/li&gt;
  &lt;li&gt;Dot-matrix screens are particularly low-information density and hard to parse.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;audio-announcements&quot;&gt;Audio announcements&lt;/h3&gt;

&lt;p&gt;Announcements for the train’s current location are made over the loudspeakers in each car. They usually include an announcement for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The next station as soon as the doors close at the current station.&lt;/li&gt;
  &lt;li&gt;The approaching station within a couple hundred meters.&lt;/li&gt;
  &lt;li&gt;The current station as the doors are opening.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depending on the line, these announcements are made consecutively in Japanese and English. They sometimes include a list of the connecting railway lines at a station, which side the doors will open on, a reminder of the rules of riding the train, or non-automated, urgent information about delays or accidents.&lt;/p&gt;

&lt;p&gt;Audio announcements are useful, but also have weak points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Audio announcements are push-based not pull-based (i.e. not on-demand) – you need to pay attention at the right time or always be passively listening.&lt;/li&gt;
  &lt;li&gt;Audio announcements can be difficult to hear in noisy cars.&lt;/li&gt;
  &lt;li&gt;Audio announcements are inaudible when listening to music or spoken-word content on headphones.&lt;/li&gt;
  &lt;li&gt;Non-automated announcements (live from the conductor) can be especially difficult to understand.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;platform-signage&quot;&gt;Platform signage&lt;/h3&gt;

&lt;p&gt;When pulling into a station, the station’s name and its one or two adjacent stations are often written in various locations along the platform. Generally, whether or not you can see one of them as a rider is random depending on which train car you’re in, your relationship to a window facing the platform, and whether there are other passengers (on the train or waiting on the platform) blocking your view.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/station-detail-bashamichi-photo.jpg&quot; width=&quot;&quot; height=&quot;200&quot; alt=&quot;Platform signage on the opposite wall of the platform at Bashamichi station&quot; title=&quot;Platform signage on the opposite wall of the platform at Bashamichi station&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Platform signage on the opposite wall of the platform at Bashamichi station&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;timetable&quot;&gt;Timetable&lt;/h3&gt;

&lt;p&gt;If you somehow have access to the train’s timetable &lt;em&gt;and&lt;/em&gt; the train you’re riding stays true to that timetable through your arrival station, you could use your watch to know approximately when to get off the train.&lt;/p&gt;

&lt;p&gt;My other train-related app &lt;a href=&quot;/2024/07/27/eki-bright-tokyo-area-train-timetables/&quot;&gt;Eki Bright&lt;/a&gt; actually facilitates this method once you’ve selected your destination in the app. It shows your arrival time next to the current time as a Live Activity.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-arrival-time-dynamic-island.jpg&quot; width=&quot;&quot; height=&quot;200&quot; alt=&quot;Eki Bright&apos;s Live Activity showing a 15:11 arrival time at Naka-meguro station after setting up a DIY Route in the app&quot; title=&quot;Eki Bright&apos;s Live Activity showing a 15:11 arrival time at Naka-meguro station after setting up a DIY Route in the app&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Eki Bright&apos;s Live Activity showing a 15:11 arrival time at Naka-meguro station after setting up a DIY Route in the app&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;navigation-apps&quot;&gt;Navigation apps&lt;/h3&gt;

&lt;p&gt;Any number of popular navigation apps (Google Maps, Apple Maps, Jourdan Norikai Annai) will show you all kinds of information about your journey, both within the app and in other parts of the system via Live Activities, widgets, notifications, etc.&lt;/p&gt;

&lt;p&gt;However, the main downside to all of these apps is that you always need to explicitly tell the app that you’ve started a trip, where your destination is, and which specific departed train you’re riding. Or if you just want to see your current location on a map, you need to open the app and wait for the GPS to kick in.&lt;/p&gt;

&lt;p&gt;If you’re just taking a quick trip or you’re on a route you know well, it’s usually not worth the hassle to open a navigation app to search for and select your exact itinerary, especially if you’ve already departed.&lt;/p&gt;

&lt;h3 id=&quot;where-eki-live-shines&quot;&gt;Where Eki Live shines&lt;/h3&gt;

&lt;p&gt;Eki Live is especially useful for those everyday, routine rides. You don’t need to remember to open an app. You don’t need to bother selecting a route. It just appears when its relevant and disappears when it’s not. It adds another layer of security and awareness, especially when you’ve got your headphones in and are locked into reading an article or manga, watching a video, scrolling endlessly, or deep in a mobile game. It only needs a few pixels of otherwise unused screen real estate.&lt;/p&gt;

&lt;p&gt;Tourists may also find Eki Live useful, but I haven’t explored this use case fully. In theory, having another tool that automatically shows information about what railway line you’re riding could help tourists from getting lost. But especially with Eki Live’s current limitations on underground operation, thinking about another app may be a distraction.&lt;/p&gt;

&lt;h2 id=&quot;roadmap&quot;&gt;Roadmap&lt;/h2&gt;

&lt;p&gt;The first thing on the roadmap is to get a general feel for whether this idea connects with people:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Is the value-proposition presented in a way that makes people curious enough to download the app, set it up, and see it working as designed with their own eyes?&lt;/li&gt;
  &lt;li&gt;Do users start to rely on it enough to complain about its limitations?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means marketing the app well enough to fill the top of the funnel.&lt;/p&gt;

&lt;p&gt;Assuming the above two points check out and the app concept is worth pursuing further, I’ll be working on two concurrent high-level goals:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Improve usability&lt;/strong&gt;: add more ways for users to customize the app if they so choose - snooze automatic tracking for some period of time; better support manually triggered tracking; add station arrival alarms; show more information in the app about the current railway; show estimated arrival times.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Improve the tracking algorithm&lt;/strong&gt;: improve the train alighting detection; improve the differentiation between parallel railways; underground railway detection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’d also like to incorporate some of the research done for Eki Live into Eki Bright as I originally intended. But that is lower priority until the concept of Eki Live is thoroughly proven or disproven.&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;I’m really looking forward to receiving feedback from everyone that tries out Eki Live. There are so many unique ways people get around Tokyo. Hopefully Eki Live can find its niche.&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Jun 2025 07:27:00 -0500</pubDate>
        <link>https://twocentstudios.com/2025/06/03/eki-live-announcement/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/06/03/eki-live-announcement/</guid>
        
        <category>ekilive</category>
        
        <category>app</category>
        
        
      </item>
    
      <item>
        <title>Train Tracker Devlog 02</title>
        <description>&lt;p&gt;It’s been about 6 weeks since the last &lt;a href=&quot;/2025/04/15/train-tracker-checkpoint-devlog/&quot;&gt;train tracker devlog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve been making an iOS app that automatically detects what train you’re riding (in Tokyo) and shows the current/next station in a Live Activity, all without needing to open the app.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-live-activity-en.png&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;Eki Live&apos;s Live Activity on the lock screen and Dynamic Island&quot; title=&quot;Eki Live&apos;s Live Activity on the lock screen and Dynamic Island&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Eki Live&apos;s Live Activity on the lock screen and Dynamic Island&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m finally on the cusp of the release of version 1.0 of Eki Live, the christened name of the previous working title &lt;em&gt;Train Tracker&lt;/em&gt;. At the end of the last post, I detailed what I thought was next on my TODO list.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Improve the algorithm to determine the correct railway faster, handle transfers, and off-board seamlessly.&lt;/li&gt;
    &lt;li&gt;Improve the design of the Live Activity.&lt;/li&gt;
    &lt;li&gt;Remove the debug screens and rework the in-app UI for onboarding, settings, and simple monitoring.&lt;/li&gt;
    &lt;li&gt;Create branding and add all the required info for the App Store.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;I did indeed finish ~all of~ most of these TODOs, but like usual it took a lot longer than I expected. Let’s start with the easy stuff first.&lt;/p&gt;

&lt;h3 id=&quot;home-ui&quot;&gt;Home UI&lt;/h3&gt;

&lt;p&gt;The UI for Eki Live is nowhere near as expansive as humble &lt;a href=&quot;https://twocentstudios.com/2024/07/27/eki-bright-tokyo-area-train-timetables/&quot;&gt;Eki Bright&lt;/a&gt;, which has a screen for each resource like station, timetable, railway, bookmarks, nearby station, search, etc. Eki Live is really just one screen, and in the ethos of the app, most users will rarely see it; the app is intended to function as an automatically appearing and disappearing Live Activity.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-v1-home-en.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Eki Live&apos;s home screen, en route to Jiyugaoka station&quot; title=&quot;Eki Live&apos;s home screen, en route to Jiyugaoka station&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Eki Live&apos;s home screen, en route to Jiyugaoka station&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, there are a few required visuals and functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The current railway, direction, focus station, and later stations: a larger, more detailed reflection of the data shown in the Live Activity.&lt;/li&gt;
  &lt;li&gt;A map with the user’s current location: a confirmation for users that they are where they think they are.&lt;/li&gt;
  &lt;li&gt;A list of other selectable railway candidates: in the dense railway environment of Tokyo, more often than not there are railways that run parallel for stretches of track. Eki Live defaults to the top ranked candidate based on an algorithmic score that improves with more data, but I wanted to give users the ability to override or lock-in the top candidate at will.&lt;/li&gt;
  &lt;li&gt;Menu: there are a few functions I wanted to include even if they are rarely used. A permissions checkup screen since Location Services permissions are imperative. A way to reset the algorithm in case it encounters a situation I can’t handle automatically yet. Eventually some other options too like a snooze button or list of alerts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My previous custom debug screens became outdated and I integrated the debug visuals into a “show stats” option that anyone can enable.&lt;/p&gt;

&lt;video src=&quot;/images/eki-live-v1-home-stats-en.mov&quot; controls=&quot;&quot; height=&quot;400&quot;&gt;&lt;/video&gt;

&lt;p&gt;I fell into the trap of over-optimizing the UI because honestly it’s one of my favorite parts of iOS development. I had to keep reminding myself that most users wouldn’t and &lt;em&gt;shouldn’t&lt;/em&gt; see this home screen if I had done the rest of my job properly.&lt;/p&gt;

&lt;h3 id=&quot;onboarding&quot;&gt;Onboarding&lt;/h3&gt;

&lt;p&gt;Eki Live doesn’t work like a normal app, so I spent more time than I usually do on an onboarding flow when the user opens the app for the first time.&lt;/p&gt;

&lt;p&gt;I’m not sure whether I’ve struck the right balance of over-explaining vs. under-explaining, perhaps the former. The main concern was that I need the user to understand the value proposition of the app and &lt;em&gt;why&lt;/em&gt; I need such intrusive Location Services permissions. Otherwise, they won’t allow background permissions, the app won’t start up, and they will forget about it and go on with their life.&lt;/p&gt;

&lt;video src=&quot;/images/eki-live-v1-onboarding-en.mov&quot; preload=&quot;none&quot; poster=&quot;/images/eki-live-v1-onboarding-en.png&quot; controls=&quot;&quot; height=&quot;400&quot;&gt;&lt;/video&gt;

&lt;h3 id=&quot;english-support&quot;&gt;English support&lt;/h3&gt;

&lt;p&gt;I was very on the fence about supporting English for the version 1 release, or really at all. Sure, I have English in the underlying station data, but I never got around to fully supporting English in Eki Bright because there just too many screens and too many layout edge cases to deal with for a non-target audience.&lt;/p&gt;

&lt;p&gt;For Eki Live, however, I decided that since my UI footprint was low and some of my beta testers preferred English, I would take a day to do a spike and see how much work it would add.&lt;/p&gt;

&lt;p&gt;There were a few tough points (Info.plist strings, lots of onboarding string, app extension strings), but the main breakthrough was simply using the compressed width system font. This got the width of the romaji station names down to near the width of the kanji versions. The amount of layout tweaks was minimal.&lt;/p&gt;

&lt;p&gt;I think English support makes more sense in Eki Live because in theory I could target overseas tourists as potential users. By design, Eki Bright doesn’t make sense as an app for tourists.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-v1-home-en-ja.png&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Eki Live&apos;s home screen in English and Japanese localizations&quot; title=&quot;Eki Live&apos;s home screen in English and Japanese localizations&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Eki Live&apos;s home screen in English and Japanese localizations&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;algorithm-improvements&quot;&gt;Algorithm improvements&lt;/h3&gt;

&lt;p&gt;After finishing all the above essentials for app release, I pushed a Test Flight v0.1, send it out to some beta testers, and then went out and took a few train rides.&lt;/p&gt;

&lt;p&gt;It was still a little exciting when, after riding about a stop and a half, the Live Activity would suddenly pop up showing the next station. However, with my critic hat on, I was becoming less bullish:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It didn’t feel &lt;em&gt;magical&lt;/em&gt; having to wait so long for Eki Live to finally conclude I was on a train and appear in my Dynamic Island, especially for short rides.&lt;/li&gt;
  &lt;li&gt;It didn’t feel &lt;em&gt;magical&lt;/em&gt; that the app couldn’t differentiate between the Yamanote Line and the Keihin-Tohoku Line, even after they’d split at Shinagawa.&lt;/li&gt;
  &lt;li&gt;It didn’t feel &lt;em&gt;magical&lt;/em&gt; that the app couldn’t differentiate between the local-like Keihin-Tohoku Line and the express-like Tokaido Line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was at a crossroads in early May: do I release the app as-is or do I improve the train tracking algorithm?&lt;/p&gt;

&lt;p&gt;At first, it wasn’t a decision I actively made. While I waited for Test Flight review I wanted to do a spike to get a feel for how much work it would take to improve the algorithm.&lt;/p&gt;

&lt;p&gt;At that time I was using only station locations as my main data source for determining which railway and direction the user was riding. In one way this was a strength because it meant I could more easily expand the scope of the app in the future to support all of Japan or even other countries.&lt;/p&gt;

&lt;p&gt;Using only station locations was a weakness for accuracy and immediacy though. Although it’s much more difficult to obtain and maintain, having the full outline of the geopoints that make up a railway as it traverses between stations would in theory enable boosts in both detection accuracy and immediacy.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-railway-vs-station-coords.jpg&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;Station geopoints (large yellow dots) vs. railway geopoints (small white dots) for the Tsurumi line&quot; title=&quot;Station geopoints (large yellow dots) vs. railway geopoints (small white dots) for the Tsurumi line&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Station geopoints (large yellow dots) vs. railway geopoints (small white dots) for the Tsurumi line&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The easiest way to understand the limitations of using only station data is by looking at the eastern railway corridor between around Yohohama station and Tsurumi station:&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-mini-tokyo-3d-east-corridor.jpg&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;Parallel railways in the south eastern corridor from Yokohama to Tsurumi station as shown on minitokyo3d.com&quot; title=&quot;Parallel railways in the south eastern corridor from Yokohama to Tsurumi station as shown on minitokyo3d.com&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Parallel railways in the south eastern corridor from Yokohama to Tsurumi station as shown on minitokyo3d.com&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For this stretch, there are 8 or so railways that run parallel for some portion before branching off. The Tokaido is the most express, only stopping at Yokohama and Kawasaki (further north of Tsurumi). Without supplementing the station data with additional data showing the relationships between the stations and railways, it would be impossible to determine the Tokaido was even in the list of candidates for trains the user is aboard.&lt;/p&gt;

&lt;p&gt;I realized that having the railway geopoint data wouldn’t solve &lt;em&gt;all&lt;/em&gt; the problems with the algorithm, but it &lt;em&gt;could&lt;/em&gt; raise the limit of possibility for speed and accuracy of the algorithm.&lt;/p&gt;

&lt;p&gt;The problem was that I didn’t immediately have a source of data for all railway geopoints. I started looking for options.&lt;/p&gt;

&lt;p&gt;The obvious first attempt was using the railway geopoint data included in the existing dataset I was using. However, this data was optimized for another use case and after a couple hours of combing through a multi-megabyte JSON file, I was stumped at how to parse it into the simple format I needed: ordered geopoints associated by railway.&lt;/p&gt;

&lt;p&gt;The most promising second option was Open Street Maps (OSM). It checked a lot of boxes: the data was free, continuously updated, open to updating from anyone, included all data in Japan and much of the rest of the world, included stations, railways, and railway geopoints, and had a robust query language and tooling.&lt;/p&gt;

&lt;p&gt;I did a spike and got pretty far in transforming the data into the format I needed from OSM. I spent days writing custom fetch queries and building tooling to evaluate the results.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-osm-overpass-query.png&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;A hard-won query to Open Street Maps to fetch all station and railway data in Japan&quot; title=&quot;A hard-won query to Open Street Maps to fetch all station and railway data in Japan&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A hard-won query to Open Street Maps to fetch all station and railway data in Japan&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I built a SwiftUI Preview to show random railways in the parsed OSM database to help me spot check the data:&lt;/p&gt;

&lt;video src=&quot;/images/eki-live-osm-random-railway-viewer.mov&quot; preload=&quot;none&quot; poster=&quot;/images/eki-live-osm-random-railway-viewer.jpg&quot; controls=&quot;&quot; height=&quot;450&quot;&gt;&lt;/video&gt;

&lt;p&gt;In the end, the data was just too raw for my use case. Station and railway names and colors were completely non-standardized across the dataset. The accuracy of railway geopoints would have to be crosschecked one-by-one. I realized it would take weeks or months of manual work to get to the point where the data could be trusted enough to rebuild as the foundation of the app.&lt;/p&gt;

&lt;p&gt;And I hadn’t even started rewriting the algorithm yet.&lt;/p&gt;

&lt;p&gt;I was about to give up when I made one last attempt at parsing the data from my original source. With some LLM help, I finally cracked the parser and with a few revisions and some more custom tooling, I finally had a reliable source of railway geopoint data to use in the algorithm.&lt;/p&gt;

&lt;video src=&quot;/images/eki-live-railway-viewer-app.mov&quot; preload=&quot;none&quot; poster=&quot;/images/eki-live-railway-viewer-app.jpg&quot; controls=&quot;&quot; height=&quot;450&quot;&gt;&lt;/video&gt;

&lt;p&gt;My idea for the new algorithm was to expand on the scoring system I had started before. My hypothesis was that by combining all the data I had into a score at a single point in time, then weighting those scores over time, I could manage the complexity and use real data to tweak the scoring system to continuously improve it.&lt;/p&gt;

&lt;p&gt;In reality, I still don’t feel confident I have a handle on the complexity yet.&lt;/p&gt;

&lt;p&gt;On a positive note, by this point I’d been collecting data from the app for over a month and had a couple dozen trips worth of data I could play back to evaluate the algorithm as I was redeveloping it. This time, I created a macOS app that gave me both greater playback control and more insight into the algorithm.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-train-tracker-viewer-paused.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;The paused state of the custom train tracker viewer app I built to develop/debug Eki Live&apos;s tracking algorithm&quot; title=&quot;The paused state of the custom train tracker viewer app I built to develop/debug Eki Live&apos;s tracking algorithm&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The paused state of the custom train tracker viewer app I built to develop/debug Eki Live&apos;s tracking algorithm&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I was still having trouble keeping all the edge cases in my head. Especially how unreliable GPS data is. I’d &lt;em&gt;usually&lt;/em&gt; get new coordinates from Core Location once per second, but not always. I’d &lt;em&gt;usually&lt;/em&gt; get coordinates within 20 meters of accuracy for above ground lines, but not always, and not when I needed them the most (at station boundaries). I had to make a lot of conflicting decisions about how to fill in gaps in the sensor data. I had to make peace again with using &lt;em&gt;only&lt;/em&gt; the sensor data I already had.&lt;/p&gt;

&lt;p&gt;At this point, I started to feel the weight of the decision-by-indecision to not ship V1 of Eki Live in early May. I had spent weeks getting the railway geopoint data and maybe a week on the new algorithm, but it still wasn’t obviously better than the existing algorithm I’d threw together in a couple days (that version itself being an evolution of other approaches).&lt;/p&gt;

&lt;p&gt;I used this panic and sunk cost fallacy indulgence to power through a couple more days of algorithm tweaking. Hour after hour tweaking constants and watching my ghost trains cruise along the same paths I’d see 1000 times at 10x speed.&lt;/p&gt;

&lt;video src=&quot;/images/eki-live-train-tracker-running.mov&quot; preload=&quot;none&quot; poster=&quot;/images/eki-live-train-tracker-running.jpg&quot; controls=&quot;&quot; height=&quot;450&quot;&gt;&lt;/video&gt;

&lt;p&gt;There wasn’t one particular breakthrough insight, but soon enough I did finally feel confident enough that I was ready to integrate the new algorithm, sand off the rough edges, and ship another beta.&lt;/p&gt;

&lt;h3 id=&quot;app-store-marketing&quot;&gt;App Store Marketing&lt;/h3&gt;

&lt;p&gt;The last piece of the puzzled I’d been putting off was the app icon, marketing images, and App Store copy.&lt;/p&gt;

&lt;p&gt;I’d re-learned a couple lessons from previous app icon attempts: an app icon can always can be visually simpler and more distinct and unique.&lt;/p&gt;

&lt;p&gt;I had sketched out a quick idea for an app icon in Procreate and used it for the early Test Flight builds.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-beta-app-icon.png&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;Procreate-sketched app icon for Eki Live&apos;s Test Flight beta releases&quot; title=&quot;Procreate-sketched app icon for Eki Live&apos;s Test Flight beta releases&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Procreate-sketched app icon for Eki Live&apos;s Test Flight beta releases&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It wasn’t quite bold enough. Too much white space.&lt;/p&gt;

&lt;p&gt;I riffed on it using vector tools in Figma and ended up with something I like and feels right on my iOS home screen. I like it enough that I might redo Eki Bright’s icon with a variant of the idea.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-v1-app-icon.png&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;App icon for Eki Live version 1.0&quot; title=&quot;App icon for Eki Live version 1.0&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;App icon for Eki Live version 1.0&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similarly for the App Store marketing images, I wanted to go a little more splashy than plain screenshots of the app. There is certainly room for improvement, but I’m hoping a lot of the appeal hits by the third image.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-v1-app-store-marketing-screenshots.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Marketing screenshots for Eki Live version 1.0&quot; title=&quot;Marketing screenshots for Eki Live version 1.0&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Marketing screenshots for Eki Live version 1.0&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I went a little lighter on the App Store description than I previously had, and with a few last checks, Eki Live version 1.0 was ready to ship.&lt;/p&gt;

&lt;h3 id=&quot;submission-and-review&quot;&gt;Submission and review&lt;/h3&gt;

&lt;p&gt;My last bit of panic was realizing that I hadn’t yet got Eki Live through App Store review yet. Each Test Flight review had taken ~3 days but had passed.&lt;/p&gt;

&lt;p&gt;I was specifically worried because the main user value of Eki Live is that you don’t have to remember to open the app in order for it to start tracking and appear as a Live Activity. This functionality was disallowed by the ActivityKit APIs until iOS 17.2, when the server-driven push-to-start Live Activity API was released. Push-to-start is my workaround for starting a Live Activity in the background. Although there’s no rule against it in the App Store review guidelines (as far as I know), I was still concerned that Apple would view it as going against the spirit of the API.&lt;/p&gt;

&lt;p&gt;In any case, it was something I should have de-risked earlier in the month before I started rewriting the tracking algorithm. I could have submitted an early build even if I wasn’t planning on releasing it yet.&lt;/p&gt;

&lt;p&gt;Luckily, App Store approved v1 with little fanfare. For now, Eki Live remains in app review’s good graces.&lt;/p&gt;

&lt;h3 id=&quot;external-marketing&quot;&gt;External Marketing&lt;/h3&gt;

&lt;p&gt;I’m planning to get more serious about marketing for this app.&lt;/p&gt;

&lt;p&gt;For a while, I’ve been thinking about ways to leverage video-based social media (e.g. TikTok, Instagram Reels) as a free-to-play passive advertising channel for my apps, but couldn’t quite figure out the right video format.&lt;/p&gt;

&lt;p&gt;While out riding the trains doing a testing run, I was watching Eki Live while periodically looking out the train window onto the sunny Kanagawa suburban countryside. An idea hit that, hey, aren’t there lots of ASMR-like videos on social media of people just riding trains? Hadn’t I already spent hours upon hours staring somewhat mesmerized at Eki Live’s interface slowly ticking by?&lt;/p&gt;

&lt;p&gt;I spent a short morning coding up a debug-only accessible interface mod for the Eki Live in-app UI. It displays a live camera feed on the top third of the window, hides some UI, and can start/stop a screen recording using &lt;a href=&quot;https://developer.apple.com/documentation/replaykit&quot;&gt;ReplayKit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Afterwards, I hopped back on a mostly empty afternoon train out to Ofuna and recorded some videos that look like this:&lt;/p&gt;

&lt;video src=&quot;/images/eki-live-v1-camera-view-hongodai.mov&quot; preload=&quot;none&quot; poster=&quot;/images/eki-live-v1-camera-view-hongodai.jpg&quot; controls=&quot;&quot; height=&quot;400&quot;&gt;&lt;/video&gt;

&lt;p&gt;I’m not sure whether these will hit, but I will keep iterating and with some luck have a new passive stream of new users at top of funnel.&lt;/p&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next steps&lt;/h3&gt;

&lt;p&gt;There’s plenty more on the horizon for Eki Live, but I’m hoping to first get some positive feedback on the direction before investing more development (and research) time. I realize that filling that top of the funnel with effective marketing will be critical in getting enough signal to make a call on whether or not to continue.&lt;/p&gt;

&lt;p&gt;If/when I do proceed, my next steps will be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improving the ability for the algorithm to detect train alighting and transfers.&lt;/li&gt;
  &lt;li&gt;Letting users receive alerts when they approach stations of their choice.&lt;/li&gt;
  &lt;li&gt;Allowing users who don’t want to allow background location permissions to still use the app in a streamlined way.&lt;/li&gt;
  &lt;li&gt;Enabling support for snoozing background tracking for arbitrary periods (e.g. if taking a vacation, going on a road trip).&lt;/li&gt;
  &lt;li&gt;Improving the ability for the algorithm to track in underground trains or other low-signal areas.&lt;/li&gt;
  &lt;li&gt;Add unique visualization of the journey on the map within the app.&lt;/li&gt;
  &lt;li&gt;Add static timetable support and arrival time estimates.&lt;/li&gt;
  &lt;li&gt;Add express train support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h3&gt;

&lt;p&gt;As an indie dev with near infinite freedom, I almost feel like it’s my obligation to take moonshots and experiment in ways that bigger companies can’t.&lt;/p&gt;

&lt;p&gt;Starting from the first prototype station departure Widgets of Eki Bright, the timetable lists, the DIY routing feature, and now the live automatic station tracking of Eki Live, I know I’m following this thread &lt;em&gt;somewhere&lt;/em&gt;. Whether it’ll be this idea or the next one that lands, my optimism is only growing.&lt;/p&gt;

&lt;p&gt;For all who’ve been following along on this journey, thanks for reading. Eki Live v1.0 will be available in the App Store soon.&lt;/p&gt;
</description>
        <pubDate>Thu, 29 May 2025 07:22:00 -0500</pubDate>
        <link>https://twocentstudios.com/2025/05/29/train-tracker-devlog-02/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/05/29/train-tracker-devlog-02/</guid>
        
        <category>ekibright</category>
        
        <category>ekilive</category>
        
        <category>ios</category>
        
        
      </item>
    
      <item>
        <title>Train Tracker Devlog</title>
        <description>&lt;p&gt;Last month, I took a step back from development of my train timetables &lt;a href=&quot;/2024/07/27/eki-bright-tokyo-area-train-timetables&quot;&gt;iOS app Eki Bright&lt;/a&gt; to think about the app in a broader context. I’ve iterated on Version 1 on and off for nearly a year, with use cases emerging out of a basic feature set and evolving with my own daily usage of the app.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v1-7-marketing.png&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;Marketing screenshots for Eki Bright v1.7&quot; title=&quot;Marketing screenshots for Eki Bright v1.7&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Marketing screenshots for Eki Bright v1.7&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As a solo developer, it’s difficult to maintain a clear perspective about any given project as it grows. It’s a balance of having a strong vision but carefully allowing reality to gently guide that vision.&lt;/p&gt;

&lt;p&gt;All this is to say I spent some time thinking hard about what version 2 of Eki Bright would look like if I started over today. How could I optimize the app for the way I use it now? How can I entice potential users and provide value to new users immediately?&lt;/p&gt;

&lt;p&gt;If I stopped with version 1, as a user, I’d be relatively satisfied. I know how to navigate the app and work around the various UX speed bumps and oil slicks to achieve my goal of riding the train system here in Tokyo. I can overlook the problems in the app in ways a random iPhone user wouldn’t. I knowingly stopped short of perfection on a few feature implementations in favor of getting them shipped.&lt;/p&gt;

&lt;p&gt;I started to see a vision for how the app could work in a &lt;em&gt;progressive enhancement&lt;/em&gt; sort of way for the various use cases I’ve uncovered. I started to see how important it was to do as much heavy lifting in the app as possible. There’s always going to be tension between a “semi-pro” app that gives the user full control while also doing work on their behalf without asking.&lt;/p&gt;

&lt;p&gt;A key part of the vision for version 2 that emerged was that Eki Bright can be a lot smarter about understanding the user’s context. With location services, it should be possible to understand whether the user is walking to a train station and wants to know if they should run to get the next train, or whether they’re riding a train and want to know when they’ll arrive at their destination.&lt;/p&gt;

&lt;p&gt;I started by segmenting out users into part of an app usage lifecycle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What would make a iPhone user want to download the app in the first place? Why (if at all) are Tokyo residents unsatisfied with their current navigation apps?&lt;/li&gt;
  &lt;li&gt;For a first time user, what feature could act as an immediate hook/wedge to provide value with zero setup or explanation and remind them to come back again the next day?&lt;/li&gt;
  &lt;li&gt;For users who have seen consistent results, what motivation would they have to want to dig deeper and trade some customization effort to get significantly more value out of the app?&lt;/li&gt;
  &lt;li&gt;For users who have used the app consistently for some time, what features can be enhanced automatically based on usage history?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The features that make up this theoretical system are quite complicated! An interface that adapts to the kind of user, the user’s usage history, and the user’s current context was somewhat of a overwhelming task for me to take on all at once.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v2-feature-list.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Sketching out the lattice of features that could make up Eki Bright v2&quot; title=&quot;Sketching out the lattice of features that could make up Eki Bright v2&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Sketching out the lattice of features that could make up Eki Bright v2&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So after doing some brainstorming and pencil mockups, I decided to start prototyping a “hook” feature to capture that first segment of users: those who have not downloaded the app and first time users. A feature that is buzzy and attractive to prospective users, and is low touch and requires nearly zero configuration for first time users.&lt;/p&gt;

&lt;p&gt;That feature was a &lt;em&gt;train finder&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With the timetable data embedded in the app combined with live location data from the user’s device, I reasoned it should be possible to find the exact train a user was riding if they opened Eki Bright while enroute. If the app could do this, it’d cut down on the work necessary to unlock downstream benefits for the user like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Checking what time the train will arrive at a destination station&lt;/li&gt;
  &lt;li&gt;Setting an alarm for the destination station&lt;/li&gt;
  &lt;li&gt;Checking what other stations are stops along the way&lt;/li&gt;
  &lt;li&gt;Setting up a &lt;a href=&quot;/2025/01/24/eki-bright-the-case-for-diy-routing/&quot;&gt;DIY route&lt;/a&gt; to more thoroughly track a transfer&lt;/li&gt;
  &lt;li&gt;Sharing a route and arrival time to a friend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, I still intended the train finder feature to be part of Eki Bright. I imagined the user opening up the Eki Bright app along their journey, the app quickly booting up location services and narrowing down the possible railways and trains within a few seconds, and the user being able to quickly take some related actions from there.&lt;/p&gt;

&lt;p&gt;My friend David asked “why not have it run in the background so you don’t need to open the app?” I initially balked, not wanting to add background location tracking to Eki Bright due to its potential to be heavy on the device battery. I also couldn’t see how background tracking could streamline the experience beyond reducing that 1-2 second train calculation time with the tradeoff that all this work would waste battery in the cases the user never opened the app. The background activity idea stayed in the back of my mind though.&lt;/p&gt;

&lt;p&gt;I started prototyping the algorithm for turning a time-series of GPS coordinates into a railway, a direction on that railway, and ultimately a train.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-first-algorithm.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Thinking through an train tracking algorithm. This particular algorithm turned out to be a dud.&quot; title=&quot;Thinking through an train tracking algorithm. This particular algorithm turned out to be a dud.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Thinking through an train tracking algorithm. This particular algorithm turned out to be a dud.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After my first day working on the algorithm, I realized that it was going to require a lot iteration on real data from inside the various trains running all over Tokyo. It wasn’t reasonable to think I could ride a train all day with my iPhone and MacBook debugging the algorithm on live data.&lt;/p&gt;

&lt;p&gt;I therefore spent a day creating an app for collecting sessions of GPS coordinates. This has turned out to be a huge boon for development efficiency.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/gps-collector-screens.jpg&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;GPS collector app I created and used to get batches of real data from the field&quot; title=&quot;GPS collector app I created and used to get batches of real data from the field&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;GPS collector app I created and used to get batches of real data from the field&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This personal-use GPS Collector app allows me to collect raw data from Core Location in the background and annotate it while riding the various routes I take around the Tokyo area. I divide each trip up into a &lt;em&gt;session&lt;/em&gt;, then manually annotate the session with the railway, direction, departure station, and arrival station to serve as ground truth annotations. I allow exporting in GPX format (for usage within Xcode) and as JSON I can import into and decode with other apps.&lt;/p&gt;

&lt;p&gt;Seeing the raw data revealed a litany of edge cases my algorithm would need to handle. First off, any train that goes underground is a non-starter for a GPS-reliant system; I’d have to make peace with that fact for now. Core Location data includes speed and heading, which is useful, but is itself a derived value and can be gleaned from other sources. GPS accuracy will sometimes plummet temporarily inside the boundaries of a station and sometimes randomly inside dense city limits. Waypoints are usually returned one-per-second, but sometimes will cut out for seconds or minutes. Some trains go from underground to above ground at least once along their designated route.&lt;/p&gt;

&lt;p&gt;I spent a week or so collecting GPS data while working on other apps. I returned to Eki Bright to finish up a first draft of an algorithm that took an entire time-series of GPS data and returned a ranked list of candidates: a railway, the direction on that railway, and the previous and next station.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RidingTrainFinderCandidate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;railway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Railway&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RailDirection&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previousStation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Station&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nextStation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Station&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// let train: TrainTimetable -- TODO: determine which train&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I added a debug viewer to visualize how my algorithm was responding to test data as it was played back. It was mostly working! It was also kind of fun to watch the playback. Being able to throw together a view like this for the sole purpose of debugging an algorithm is a huge win for SwiftUI.&lt;/p&gt;

&lt;video src=&quot;/images/train-tracker-debug-view-01.mp4&quot; controls=&quot;&quot; poster=&quot;/images/train-tracker-debug-view-01.png&quot; preload=&quot;none&quot; height=&quot;400&quot;&gt;&lt;/video&gt;

&lt;p&gt;I’d hit a development checkpoint, and as cool as my little debug tracker view was, I was still far from a shippable feature that solved a real problem. My next step was extending the algorithm to guess which train the user was on (not exactly a straightforward algorithm to write based on the shape of my train timetable data).&lt;/p&gt;

&lt;p&gt;However, I thought back to my friend David’s remark about an app that works in the background. I thought, if I freed myself from the artificial constraints of Eki Bright as it currently existed, how could this algorithm still be useful?&lt;/p&gt;

&lt;p&gt;A new vision emerged of an app that solved a much shallower problem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sometimes when I’m on a crowded train and I’ve got my headphones in, it’s hard to tell what station I’m approaching. I can’t see the display above the train car door or out the window.&lt;/li&gt;
  &lt;li&gt;What if I had a Live Activity in my Dynamic Island that updated live as I stopped at or passed each station along a railway?&lt;/li&gt;
  &lt;li&gt;And what if I didn’t have to manually select what railway I was on and what direction I was going?&lt;/li&gt;
  &lt;li&gt;Better yet, what if I &lt;em&gt;didn’t even have to open the app&lt;/em&gt; and the Live Activity would automatically appear when I was riding a train and disappear when I got off?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I could pull it off, this feature would be supplemental to any other navigation app. It also has a bit of “cool technology” vibe to it that could entice a download and serve as a conversation piece.&lt;/p&gt;

&lt;p&gt;Realizing this new vision came with its own new implementation challenges.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Monitor significant location changes in the background to save battery life, then switch to live location monitoring when moving at train speeds.&lt;/li&gt;
  &lt;li&gt;Detect the railway and railway direction.&lt;/li&gt;
  &lt;li&gt;Continuously update which stations have been visited and passed, and which station is next on the railway, even if it’s far away.&lt;/li&gt;
  &lt;li&gt;Start a Live Activity in the background when confidence in the current railway is high enough.&lt;/li&gt;
  &lt;li&gt;Update the Live Activity as the user approaches, arrives at, and departs a station.&lt;/li&gt;
  &lt;li&gt;End the Live Activity and switch back to monitoring significant location changes once the user has alighted their train.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I knew that significant location changes, app background activity, and the way each of these system features interacts with the relatively new (iOS 16+) Live Activities API was going to pose as the biggest risk to executing the seamless zero-touch app experience I envisioned.&lt;/p&gt;

&lt;p&gt;I started by creating a new app project and creating a GRDB-backed event logging system. Next, I configured the app to request background location permission. I then created the bones of a location tracking algorithm that preserved battery life. I logged app lifecycle events and events for my location tracking algorithm to ensure I could quickly debug why the app was or wasn’t “waking up” or “sleeping” when I expected it to while out in the field.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-app-events.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Log of app events so I can verify background behavior&quot; title=&quot;Log of app events so I can verify background behavior&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Log of app events so I can verify background behavior&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next big task was reimagining my existing railway-finding algorithm for a different system lifecycle. This also meant I needed to pare down my very large train timetable static database for this new use case. I only needed the list of railways and stations. I followed a similar development flow as last time; I created a couple new debug views to view the live GPS waypoints and follow these waypoints on a map alongside the train tracking algorithm outputs.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-waypoints-view.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Raw waypoints view to allow confirmation of incoming data&quot; title=&quot;Raw waypoints view to allow confirmation of incoming data&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Raw waypoints view to allow confirmation of incoming data&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I started with a version that played back existing GPS data. A dashboard view showed just the user-facing data: the detected railway and “focus” station.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-debug-dashboard.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;A debug view that plays back previously captured GPS data at variable speed and shows user-facing data&quot; title=&quot;A debug view that plays back previously captured GPS data at variable speed and shows user-facing data&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A debug view that plays back previously captured GPS data at variable speed and shows user-facing data&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There was also a list view showing the scores assigned by the algorithm and used to determine the ultimate result shown to the user.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-debug-list.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;The derived scores used by the algorithm to determine what railway and focus station is shown to the user&quot; title=&quot;The derived scores used by the algorithm to determine what railway and focus station is shown to the user&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The derived scores used by the algorithm to determine what railway and focus station is shown to the user&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, once I was satisfied with the algorithm accuracy on the snapshot data, I migrated this view to use only live device data.&lt;/p&gt;

&lt;p&gt;Watching the algorithm run live was exciting. I felt like I’d hit another checkpoint as the device would wake up and start gathering GPS data in the background, then start showing me which railway I was on and which station was next as soon as I opened it.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-debug-live-tracking.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Same as above but using live GPS data&quot; title=&quot;Same as above but using live GPS data&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Same as above but using live GPS data&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With a basic (but admittedly incomplete) tracking algorithm proven, the last piece of the puzzle I needed to de-risk was starting the Live Activity automatically in the background. Unfortunately this is where I hit a frustrating roadblock.&lt;/p&gt;

&lt;p&gt;In a careful scan of the lengthy &lt;a href=&quot;https://developer.apple.com/documentation/activitykit/displaying-live-data-with-live-activities#Review-Live-Activity-presentations&quot;&gt;Live Activities documentation&lt;/a&gt;, I found the line:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your app can only start Live Activities while it’s in the foreground. However, you can update or end a Live Activity from your app while it runs in the background.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I confirmed this artificial limitation by attempting it and logging errors in my event tracking database.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;LiveActivities Error: The operation couldn’t be completed. Target is not foreground&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I felt like requiring the user to open the app each time they wanted the live activity to run – even if it was as simple as opening and immediately closing the app – would be too tedious an ask as a prerequisite for daily usage.&lt;/p&gt;

&lt;p&gt;Before I neutered my vision or gave up on the idea entirely, I had one card left up my sleeve. From the documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Starting with iOS 17.2 and iPadOS 17.2, you can also start Live Activities with ActivityKit push notifications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So a push notification from a server can start a Live Activity without being initiated by a user (as I’d personally experienced with the Apple Sports app), but for some reason it can’t be started by the device itself? Strange, but since my app is already running in the background, I could technically fire off a network request to my own server with the data I wanted to start the Live Activity with and use my server as a pseudo-proxy to start a Live Activity. It feels like a loophole, but perhaps it’s simply a case of an Apple product manager not re-evaluating an initial safeguard after changing a related feature.&lt;/p&gt;

&lt;p&gt;Setting up push notifications is &lt;em&gt;involved&lt;/em&gt;. I really did not want to be on the hook for maintaining another set of dependencies, but it was the only option left on the table.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aside: is it possible to send a push notification directly from a device instead of through an intermediary server controlled by the developer? In other words, could the device send a request to the APNS server directly that would send a push notification right back to it? In theory it seems possible, with the big security downside that the p8 key would need to be included in plain text within the app bundle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ll leave the long debug story of how I got push notifications working for another time, but after a couple days of development, I confirmed that I could indeed start a Live Activity from the background using an intermediary server.&lt;/p&gt;

&lt;p&gt;Whether or not the App Store app review team considers this to be a permitted workaround is still a huge risk. I’m not sure how I can determine their stance without finishing up version 1 of the app and submitting it for review. Even an unfinished version going through Test Flight review isn’t a guarantee App Store review will also approve.&lt;/p&gt;

&lt;p&gt;So this is my current checkpoint: a new app binary with lot of debug screens that starts and updates Live Activities from the background as the user rides a railway in Tokyo.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-proto-live-activity.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Prototype version of the working train tracker Live Activity on the lock screen&quot; title=&quot;Prototype version of the working train tracker Live Activity on the lock screen&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Prototype version of the working train tracker Live Activity on the lock screen&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-proto-dynamic-island.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Prototype version of the working train tracker Live Activity in the Dynamic Island&quot; title=&quot;Prototype version of the working train tracker Live Activity in the Dynamic Island&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Prototype version of the working train tracker Live Activity in the Dynamic Island&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My plan is to release this app standalone. How it fits into the existing and future Eki Bright vision isn’t yet determined. Perhaps the train tracker app is a free marketing driver for Eki Bright. Perhaps the train tracker app evolves separately from Eki Bright and eventually obsoletes Eki Bright. I’m not sure, but my instinct is to test it in the market in isolation first.&lt;/p&gt;

&lt;p&gt;What do I need to finish up in order to ship?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improve the algorithm to determine the correct railway faster, handle transfers, and off-board seamlessly.&lt;/li&gt;
  &lt;li&gt;Improve the design of the Live Activity.&lt;/li&gt;
  &lt;li&gt;Remove the debug screens and rework the in-app UI for onboarding, settings, and simple monitoring.&lt;/li&gt;
  &lt;li&gt;Create branding and add all the required info for the App Store.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m getting faster at getting through this part of the process, but it still takes time. However, I do feel some accomplishment in having semi-efficiently prototyped enough to de-risk this project.&lt;/p&gt;

&lt;p&gt;I’m planning to write a few technical posts that detail the caveats of Live Activities once I’m more confident in the robustness of my implementation. Until then.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Apr 2025 12:06:00 -0500</pubDate>
        <link>https://twocentstudios.com/2025/04/15/train-tracker-checkpoint-devlog/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/04/15/train-tracker-checkpoint-devlog/</guid>
        
        <category>ekibright</category>
        
        <category>ekilive</category>
        
        <category>ios</category>
        
        
      </item>
    
  </channel>
</rss>
