<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>twocentstudios</title>
    <description>A coding blog covering iOS, Swift, and other programming topics.</description>
    <link>https://twocentstudios.com/blog/tags/ekilive/index.html</link>
    <atom:link href="https://twocentstudios.com/blog/tags/ekilive/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 28 May 2025 23:06:19 -0500</pubDate>
    <lastBuildDate>Wed, 28 May 2025 23:06:19 -0500</lastBuildDate>
    <generator>Jekyll v3.9.3</generator>
    
      <item>
        <title>Train Tracker Devlog 02</title>
        <description>&lt;p&gt;It’s been about 6 weeks since the last &lt;a href=&quot;/2025/04/15/train-tracker-checkpoint-devlog/&quot;&gt;train tracker devlog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve been making an iOS app that automatically detects what train you’re riding (in Tokyo) and shows the current/next station in a Live Activity, all without needing to open the app.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-live-activity-en.png&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;Eki Live&apos;s Live Activity on the lock screen and Dynamic Island&quot; title=&quot;Eki Live&apos;s Live Activity on the lock screen and Dynamic Island&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Eki Live&apos;s Live Activity on the lock screen and Dynamic Island&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m finally on the cusp of the release of version 1.0 of Eki Live, the christened name of the previous working title &lt;em&gt;Train Tracker&lt;/em&gt;. At the end of the last post, I detailed what I thought was next on my TODO list.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Improve the algorithm to determine the correct railway faster, handle transfers, and off-board seamlessly.&lt;/li&gt;
    &lt;li&gt;Improve the design of the Live Activity.&lt;/li&gt;
    &lt;li&gt;Remove the debug screens and rework the in-app UI for onboarding, settings, and simple monitoring.&lt;/li&gt;
    &lt;li&gt;Create branding and add all the required info for the App Store.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;I did indeed finish ~all of~ most of these TODOs, but like usual it took a lot longer than I expected. Let’s start with the easy stuff first.&lt;/p&gt;

&lt;h3 id=&quot;home-ui&quot;&gt;Home UI&lt;/h3&gt;

&lt;p&gt;The UI for Eki Live is nowhere near as expansive as humble &lt;a href=&quot;https://twocentstudios.com/2024/07/27/eki-bright-tokyo-area-train-timetables/&quot;&gt;Eki Bright&lt;/a&gt;, which has a screen for each resource like station, timetable, railway, bookmarks, nearby station, search, etc. Eki Live is really just one screen, and in the ethos of the app, most users will rarely see it; the app is intended to function as an automatically appearing and disappearing Live Activity.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-v1-home-en.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Eki Live&apos;s home screen, en route to Jiyugaoka station&quot; title=&quot;Eki Live&apos;s home screen, en route to Jiyugaoka station&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Eki Live&apos;s home screen, en route to Jiyugaoka station&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, there are a few required visuals and functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The current railway, direction, focus station, and later stations: a larger, more detailed reflection of the data shown in the Live Activity.&lt;/li&gt;
  &lt;li&gt;A map with the user’s current location: a confirmation for users that they are where they think they are.&lt;/li&gt;
  &lt;li&gt;A list of other selectable railway candidates: in the dense railway environment of Tokyo, more often than not there are railways that run parallel for stretches of track. Eki Live defaults to the top ranked candidate based on an algorithmic score that improves with more data, but I wanted to give users the ability to override or lock-in the top candidate at will.&lt;/li&gt;
  &lt;li&gt;Menu: there are a few functions I wanted to include even if they are rarely used. A permissions checkup screen since Location Services permissions are imperative. A way to reset the algorithm in case it encounters a situation I can’t handle automatically yet. Eventually some other options too like a snooze button or list of alerts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My previous custom debug screens became outdated and I integrated the debug visuals into a “show stats” option that anyone can enable.&lt;/p&gt;

&lt;video src=&quot;/images/eki-live-v1-home-stats-en.mov&quot; controls=&quot;&quot; height=&quot;400&quot;&gt;&lt;/video&gt;

&lt;p&gt;I fell into the trap of over-optimizing the UI because honestly it’s one of my favorite parts of iOS development. I had to keep reminding myself that most users wouldn’t and &lt;em&gt;shouldn’t&lt;/em&gt; see this home screen if I had done the rest of my job properly.&lt;/p&gt;

&lt;h3 id=&quot;onboarding&quot;&gt;Onboarding&lt;/h3&gt;

&lt;p&gt;Eki Live doesn’t work like a normal app, so I spent more time than I usually do on an onboarding flow when the user opens the app for the first time.&lt;/p&gt;

&lt;p&gt;I’m not sure whether I’ve struck the right balance of over-explaining vs. under-explaining, perhaps the former. The main concern was that I need the user to understand the value proposition of the app and &lt;em&gt;why&lt;/em&gt; I need such intrusive Location Services permissions. Otherwise, they won’t allow background permissions, the app won’t start up, and they will forget about it and go on with their life.&lt;/p&gt;

&lt;video src=&quot;/images/eki-live-v1-onboarding-en.mov&quot; preload=&quot;none&quot; poster=&quot;/images/eki-live-v1-onboarding-en.png&quot; controls=&quot;&quot; height=&quot;400&quot;&gt;&lt;/video&gt;

&lt;h3 id=&quot;english-support&quot;&gt;English support&lt;/h3&gt;

&lt;p&gt;I was very on the fence about supporting English for the version 1 release, or really at all. Sure, I have English in the underlying station data, but I never got around to fully supporting English in Eki Bright because there just too many screens and too many layout edge cases to deal with for a non-target audience.&lt;/p&gt;

&lt;p&gt;For Eki Live, however, I decided that since my UI footprint was low and some of my beta testers preferred English, I would take a day to do a spike and see how much work it would add.&lt;/p&gt;

&lt;p&gt;There were a few tough points (Info.plist strings, lots of onboarding string, app extension strings), but the main breakthrough was simply using the compressed width system font. This got the width of the romaji station names down to near the width of the kanji versions. The amount of layout tweaks was minimal.&lt;/p&gt;

&lt;p&gt;I think English support makes more sense in Eki Live because in theory I could target overseas tourists as potential users. By design, Eki Bright doesn’t make sense as an app for tourists.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-v1-home-en-ja.png&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Eki Live&apos;s home screen in English and Japanese localizations&quot; title=&quot;Eki Live&apos;s home screen in English and Japanese localizations&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Eki Live&apos;s home screen in English and Japanese localizations&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;algorithm-improvements&quot;&gt;Algorithm improvements&lt;/h3&gt;

&lt;p&gt;After finishing all the above essentials for app release, I pushed a Test Flight v0.1, send it out to some beta testers, and then went out and took a few train rides.&lt;/p&gt;

&lt;p&gt;It was still a little exciting when, after riding about a stop and a half, the Live Activity would suddenly pop up showing the next station. However, with my critic hat on, I was becoming less bullish:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It didn’t feel &lt;em&gt;magical&lt;/em&gt; having to wait so long for Eki Live to finally conclude I was on a train and appear in my Dynamic Island, especially for short rides.&lt;/li&gt;
  &lt;li&gt;It didn’t feel &lt;em&gt;magical&lt;/em&gt; that the app couldn’t differentiate between the Yamanote Line and the Keihin-Tohoku Line, even after they’d split at Shinagawa.&lt;/li&gt;
  &lt;li&gt;It didn’t feel &lt;em&gt;magical&lt;/em&gt; that the app couldn’t differentiate between the local-like Keihin-Tohoku Line and the express-like Tokaido Line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was at a crossroads in early May: do I release the app as-is or do I improve the train tracking algorithm?&lt;/p&gt;

&lt;p&gt;At first, it wasn’t a decision I actively made. While I waited for Test Flight review I wanted to do a spike to get a feel for how much work it would take to improve the algorithm.&lt;/p&gt;

&lt;p&gt;At that time I was using only station locations as my main data source for determining which railway and direction the user was riding. In one way this was a strength because it meant I could more easily expand the scope of the app in the future to support all of Japan or even other countries.&lt;/p&gt;

&lt;p&gt;Using only station locations was a weakness for accuracy and immediacy though. Although it’s much more difficult to obtain and maintain, having the full outline of the geopoints that make up a railway as it traverses between stations would in theory enable boosts in both detection accuracy and immediacy.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-railway-vs-station-coords.jpg&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;Station geopoints (large yellow dots) vs. railway geopoints (small white dots) for the Tsurumi line&quot; title=&quot;Station geopoints (large yellow dots) vs. railway geopoints (small white dots) for the Tsurumi line&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Station geopoints (large yellow dots) vs. railway geopoints (small white dots) for the Tsurumi line&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The easiest way to understand the limitations of using only station data is by looking at the eastern railway corridor between around Yohohama station and Tsurumi station:&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-mini-tokyo-3d-east-corridor.jpg&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;Parallel railways in the south eastern corridor from Yokohama to Tsurumi station as shown on minitokyo3d.com&quot; title=&quot;Parallel railways in the south eastern corridor from Yokohama to Tsurumi station as shown on minitokyo3d.com&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Parallel railways in the south eastern corridor from Yokohama to Tsurumi station as shown on minitokyo3d.com&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For this stretch, there are 8 or so railways that run parallel for some portion before branching off. The Tokaido is the most express, only stopping at Yokohama and Kawasaki (further north of Tsurumi). Without supplementing the station data with additional data showing the relationships between the stations and railways, it would be impossible to determine the Tokaido was even in the list of candidates for trains the user is aboard.&lt;/p&gt;

&lt;p&gt;I realized that having the railway geopoint data wouldn’t solve &lt;em&gt;all&lt;/em&gt; the problems with the algorithm, but it &lt;em&gt;could&lt;/em&gt; raise the limit of possibility for speed and accuracy of the algorithm.&lt;/p&gt;

&lt;p&gt;The problem was that I didn’t immediately have a source of data for all railway geopoints. I started looking for options.&lt;/p&gt;

&lt;p&gt;The obvious first attempt was using the railway geopoint data included in the existing dataset I was using. However, this data was optimized for another use case and after a couple hours of combing through a multi-megabyte JSON file, I was stumped at how to parse it into the simple format I needed: ordered geopoints associated by railway.&lt;/p&gt;

&lt;p&gt;The most promising second option was Open Street Maps (OSM). It checked a lot of boxes: the data was free, continuously updated, open to updating from anyone, included all data in Japan and much of the rest of the world, included stations, railways, and railway geopoints, and had a robust query language and tooling.&lt;/p&gt;

&lt;p&gt;I did a spike and got pretty far in transforming the data into the format I needed from OSM. I spent days writing custom fetch queries and building tooling to evaluate the results.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-osm-overpass-query.png&quot; width=&quot;&quot; height=&quot;350&quot; alt=&quot;A hard-won query to Open Street Maps to fetch all station and railway data in Japan&quot; title=&quot;A hard-won query to Open Street Maps to fetch all station and railway data in Japan&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A hard-won query to Open Street Maps to fetch all station and railway data in Japan&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I built a SwiftUI Preview to show random railways in the parsed OSM database to help me spot check the data:&lt;/p&gt;

&lt;video src=&quot;/images/eki-live-osm-random-railway-viewer.mov&quot; preload=&quot;none&quot; poster=&quot;/images/eki-live-osm-random-railway-viewer.jpg&quot; controls=&quot;&quot; height=&quot;450&quot;&gt;&lt;/video&gt;

&lt;p&gt;In the end, the data was just too raw for my use case. Station and railway names and colors were completely non-standardized across the dataset. The accuracy of railway geopoints would have to be crosschecked one-by-one. I realized it would take weeks or months of manual work to get to the point where the data could be trusted enough to rebuild as the foundation of the app.&lt;/p&gt;

&lt;p&gt;And I hadn’t even started rewriting the algorithm yet.&lt;/p&gt;

&lt;p&gt;I was about to give up when I made one last attempt at parsing the data from my original source. With some LLM help, I finally cracked the parser and with a few revisions and some more custom tooling, I finally had a reliable source of railway geopoint data to use in the algorithm.&lt;/p&gt;

&lt;video src=&quot;/images/eki-live-railway-viewer-app.mov&quot; preload=&quot;none&quot; poster=&quot;/images/eki-live-railway-viewer-app.jpg&quot; controls=&quot;&quot; height=&quot;450&quot;&gt;&lt;/video&gt;

&lt;p&gt;My idea for the new algorithm was to expand on the scoring system I had started before. My hypothesis was that by combining all the data I had into a score at a single point in time, then weighting those scores over time, I could manage the complexity and use real data to tweak the scoring system to continuously improve it.&lt;/p&gt;

&lt;p&gt;In reality, I still don’t feel confident I have a handle on the complexity yet.&lt;/p&gt;

&lt;p&gt;On a positive note, by this point I’d been collecting data from the app for over a month and had a couple dozen trips worth of data I could play back to evaluate the algorithm as I was redeveloping it. This time, I created a macOS app that gave me both greater playback control and more insight into the algorithm.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-train-tracker-viewer-paused.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;The paused state of the custom train tracker viewer app I built to develop/debug Eki Live&apos;s tracking algorithm&quot; title=&quot;The paused state of the custom train tracker viewer app I built to develop/debug Eki Live&apos;s tracking algorithm&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The paused state of the custom train tracker viewer app I built to develop/debug Eki Live&apos;s tracking algorithm&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I was still having trouble keeping all the edge cases in my head. Especially how unreliable GPS data is. I’d &lt;em&gt;usually&lt;/em&gt; get new coordinates from Core Location once per second, but not always. I’d &lt;em&gt;usually&lt;/em&gt; get coordinates within 20 meters of accuracy for above ground lines, but not always, and not when I needed them the most (at station boundaries). I had to make a lot of conflicting decisions about how to fill in gaps in the sensor data. I had to make peace again with using &lt;em&gt;only&lt;/em&gt; the sensor data I already had.&lt;/p&gt;

&lt;p&gt;At this point, I started to feel the weight of the decision-by-indecision to not ship V1 of Eki Live in early May. I had spent weeks getting the railway geopoint data and maybe a week on the new algorithm, but it still wasn’t obviously better than the existing algorithm I’d threw together in a couple days (that version itself being an evolution of other approaches).&lt;/p&gt;

&lt;p&gt;I used this panic and sunk cost fallacy indulgence to power through a couple more days of algorithm tweaking. Hour after hour tweaking constants and watching my ghost trains cruise along the same paths I’d see 1000 times at 10x speed.&lt;/p&gt;

&lt;video src=&quot;/images/eki-live-train-tracker-running.mov&quot; preload=&quot;none&quot; poster=&quot;/images/eki-live-train-tracker-running.jpg&quot; controls=&quot;&quot; height=&quot;450&quot;&gt;&lt;/video&gt;

&lt;p&gt;There wasn’t one particular breakthrough insight, but soon enough I did finally feel confident enough that I was ready to integrate the new algorithm, sand off the rough edges, and ship another beta.&lt;/p&gt;

&lt;h3 id=&quot;app-store-marketing&quot;&gt;App Store Marketing&lt;/h3&gt;

&lt;p&gt;The last piece of the puzzled I’d been putting off was the app icon, marketing images, and App Store copy.&lt;/p&gt;

&lt;p&gt;I’d re-learned a couple lessons from previous app icon attempts: an app icon can always can be visually simpler and more distinct and unique.&lt;/p&gt;

&lt;p&gt;I had sketched out a quick idea for an app icon in Procreate and used it for the early Test Flight builds.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-beta-app-icon.png&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;Procreate-sketched app icon for Eki Live&apos;s Test Flight beta releases&quot; title=&quot;Procreate-sketched app icon for Eki Live&apos;s Test Flight beta releases&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Procreate-sketched app icon for Eki Live&apos;s Test Flight beta releases&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It wasn’t quite bold enough. Too much white space.&lt;/p&gt;

&lt;p&gt;I riffed on it using vector tools in Figma and ended up with something I like and feels right on my iOS home screen. I like it enough that I might redo Eki Bright’s icon with a variant of the idea.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-v1-app-icon.png&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;App icon for Eki Live version 1.0&quot; title=&quot;App icon for Eki Live version 1.0&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;App icon for Eki Live version 1.0&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similarly for the App Store marketing images, I wanted to go a little more splashy than plain screenshots of the app. There is certainly room for improvement, but I’m hoping a lot of the appeal hits by the third image.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-live-v1-app-store-marketing-screenshots.jpg&quot; width=&quot;&quot; height=&quot;450&quot; alt=&quot;Marketing screenshots for Eki Live version 1.0&quot; title=&quot;Marketing screenshots for Eki Live version 1.0&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Marketing screenshots for Eki Live version 1.0&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I went a little lighter on the App Store description than I previously had, and with a few last checks, Eki Live version 1.0 was ready to ship.&lt;/p&gt;

&lt;h3 id=&quot;submission-and-review&quot;&gt;Submission and review&lt;/h3&gt;

&lt;p&gt;My last bit of panic was realizing that I hadn’t yet got Eki Live through App Store review yet. Each Test Flight review had taken ~3 days but had passed.&lt;/p&gt;

&lt;p&gt;I was specifically worried because the main user value of Eki Live is that you don’t have to remember to open the app in order for it to start tracking and appear as a Live Activity. This functionality was disallowed by the ActivityKit APIs until iOS 17.2, when the server-driven push-to-start Live Activity API was released. Push-to-start is my workaround for starting a Live Activity in the background. Although there’s no rule against it in the App Store review guidelines (as far as I know), I was still concerned that Apple would view it as going against the spirit of the API.&lt;/p&gt;

&lt;p&gt;In any case, it was something I should have de-risked earlier in the month before I started rewriting the tracking algorithm. I could have submitted an early build even if I wasn’t planning on releasing it yet.&lt;/p&gt;

&lt;p&gt;Luckily, App Store approved v1 with little fanfare. For now, Eki Live remains in app review’s good graces.&lt;/p&gt;

&lt;h3 id=&quot;external-marketing&quot;&gt;External Marketing&lt;/h3&gt;

&lt;p&gt;I’m planning to get more serious about marketing for this app.&lt;/p&gt;

&lt;p&gt;For a while, I’ve been thinking about ways to leverage video-based social media (e.g. TikTok, Instagram Reels) as a free-to-play passive advertising channel for my apps, but couldn’t quite figure out the right video format.&lt;/p&gt;

&lt;p&gt;While out riding the trains doing a testing run, I was watching Eki Live while periodically looking out the train window onto the sunny Kanagawa suburban countryside. An idea hit that, hey, aren’t there lots of ASMR-like videos on social media of people just riding trains? Hadn’t I already spent hours upon hours staring somewhat mesmerized at Eki Live’s interface slowly ticking by?&lt;/p&gt;

&lt;p&gt;I spent a short morning coding up a debug-only accessible interface mod for the Eki Live in-app UI. It displays a live camera feed on the top third of the window, hides some UI, and can start/stop a screen recording using &lt;a href=&quot;https://developer.apple.com/documentation/replaykit&quot;&gt;ReplayKit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Afterwards, I hopped back on a mostly empty afternoon train out to Ofuna and recorded some videos that look like this:&lt;/p&gt;

&lt;video src=&quot;/images/eki-live-v1-camera-view-hongodai.mov&quot; preload=&quot;none&quot; poster=&quot;/images/eki-live-v1-camera-view-hongodai.jpg&quot; controls=&quot;&quot; height=&quot;400&quot;&gt;&lt;/video&gt;

&lt;p&gt;I’m not sure whether these will hit, but I will keep iterating and with some luck have a new passive stream of new users at top of funnel.&lt;/p&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next steps&lt;/h3&gt;

&lt;p&gt;There’s plenty more on the horizon for Eki Live, but I’m hoping to first get some positive feedback on the direction before investing more development (and research) time. I realize that filling that top of the funnel with effective marketing will be critical in getting enough signal to make a call on whether or not to continue.&lt;/p&gt;

&lt;p&gt;If/when I do proceed, my next steps will be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improving the ability for the algorithm to detect train alighting and transfers.&lt;/li&gt;
  &lt;li&gt;Letting users receive alerts when they approach stations of their choice.&lt;/li&gt;
  &lt;li&gt;Allowing users who don’t want to allow background location permissions to still use the app in a streamlined way.&lt;/li&gt;
  &lt;li&gt;Enabling support for snoozing background tracking for arbitrary periods (e.g. if taking a vacation, going on a road trip).&lt;/li&gt;
  &lt;li&gt;Improving the ability for the algorithm to track in underground trains or other low-signal areas.&lt;/li&gt;
  &lt;li&gt;Add unique visualization of the journey on the map within the app.&lt;/li&gt;
  &lt;li&gt;Add static timetable support and arrival time estimates.&lt;/li&gt;
  &lt;li&gt;Add express train support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h3&gt;

&lt;p&gt;As an indie dev with near infinite freedom, I almost feel like it’s my obligation to take moonshots and experiment in ways that bigger companies can’t.&lt;/p&gt;

&lt;p&gt;Starting from the first prototype station departure Widgets of Eki Bright, the timetable lists, the DIY routing feature, and now the live automatic station tracking of Eki Live, I know I’m following this thread &lt;em&gt;somewhere&lt;/em&gt;. Whether it’ll be this idea or the next one that lands, my optimism is only growing.&lt;/p&gt;

&lt;p&gt;For all who’ve been following along on this journey, thanks for reading. Eki Live v1.0 will be available in the App Store soon.&lt;/p&gt;
</description>
        <pubDate>Thu, 29 May 2025 07:22:00 -0500</pubDate>
        <link>https://twocentstudios.com/2025/05/29/train-tracker-devlog-02/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/05/29/train-tracker-devlog-02/</guid>
        
        <category>ekibright</category>
        
        <category>ekilive</category>
        
        <category>ios</category>
        
        
      </item>
    
      <item>
        <title>Train Tracker Devlog</title>
        <description>&lt;p&gt;Last month, I took a step back from development of my train timetables &lt;a href=&quot;/2024/07/27/eki-bright-tokyo-area-train-timetables&quot;&gt;iOS app Eki Bright&lt;/a&gt; to think about the app in a broader context. I’ve iterated on Version 1 on and off for nearly a year, with use cases emerging out of a basic feature set and evolving with my own daily usage of the app.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v1-7-marketing.png&quot; width=&quot;&quot; height=&quot;250&quot; alt=&quot;Marketing screenshots for Eki Bright v1.7&quot; title=&quot;Marketing screenshots for Eki Bright v1.7&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Marketing screenshots for Eki Bright v1.7&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As a solo developer, it’s difficult to maintain a clear perspective about any given project as it grows. It’s a balance of having a strong vision but carefully allowing reality to gently guide that vision.&lt;/p&gt;

&lt;p&gt;All this is to say I spent some time thinking hard about what version 2 of Eki Bright would look like if I started over today. How could I optimize the app for the way I use it now? How can I entice potential users and provide value to new users immediately?&lt;/p&gt;

&lt;p&gt;If I stopped with version 1, as a user, I’d be relatively satisfied. I know how to navigate the app and work around the various UX speed bumps and oil slicks to achieve my goal of riding the train system here in Tokyo. I can overlook the problems in the app in ways a random iPhone user wouldn’t. I knowingly stopped short of perfection on a few feature implementations in favor of getting them shipped.&lt;/p&gt;

&lt;p&gt;I started to see a vision for how the app could work in a &lt;em&gt;progressive enhancement&lt;/em&gt; sort of way for the various use cases I’ve uncovered. I started to see how important it was to do as much heavy lifting in the app as possible. There’s always going to be tension between a “semi-pro” app that gives the user full control while also doing work on their behalf without asking.&lt;/p&gt;

&lt;p&gt;A key part of the vision for version 2 that emerged was that Eki Bright can be a lot smarter about understanding the user’s context. With location services, it should be possible to understand whether the user is walking to a train station and wants to know if they should run to get the next train, or whether they’re riding a train and want to know when they’ll arrive at their destination.&lt;/p&gt;

&lt;p&gt;I started by segmenting out users into part of an app usage lifecycle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What would make a iPhone user want to download the app in the first place? Why (if at all) are Tokyo residents unsatisfied with their current navigation apps?&lt;/li&gt;
  &lt;li&gt;For a first time user, what feature could act as an immediate hook/wedge to provide value with zero setup or explanation and remind them to come back again the next day?&lt;/li&gt;
  &lt;li&gt;For users who have seen consistent results, what motivation would they have to want to dig deeper and trade some customization effort to get significantly more value out of the app?&lt;/li&gt;
  &lt;li&gt;For users who have used the app consistently for some time, what features can be enhanced automatically based on usage history?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The features that make up this theoretical system are quite complicated! An interface that adapts to the kind of user, the user’s usage history, and the user’s current context was somewhat of a overwhelming task for me to take on all at once.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/eki-bright-v2-feature-list.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Sketching out the lattice of features that could make up Eki Bright v2&quot; title=&quot;Sketching out the lattice of features that could make up Eki Bright v2&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Sketching out the lattice of features that could make up Eki Bright v2&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So after doing some brainstorming and pencil mockups, I decided to start prototyping a “hook” feature to capture that first segment of users: those who have not downloaded the app and first time users. A feature that is buzzy and attractive to prospective users, and is low touch and requires nearly zero configuration for first time users.&lt;/p&gt;

&lt;p&gt;That feature was a &lt;em&gt;train finder&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With the timetable data embedded in the app combined with live location data from the user’s device, I reasoned it should be possible to find the exact train a user was riding if they opened Eki Bright while enroute. If the app could do this, it’d cut down on the work necessary to unlock downstream benefits for the user like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Checking what time the train will arrive at a destination station&lt;/li&gt;
  &lt;li&gt;Setting an alarm for the destination station&lt;/li&gt;
  &lt;li&gt;Checking what other stations are stops along the way&lt;/li&gt;
  &lt;li&gt;Setting up a &lt;a href=&quot;/2025/01/24/eki-bright-the-case-for-diy-routing/&quot;&gt;DIY route&lt;/a&gt; to more thoroughly track a transfer&lt;/li&gt;
  &lt;li&gt;Sharing a route and arrival time to a friend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, I still intended the train finder feature to be part of Eki Bright. I imagined the user opening up the Eki Bright app along their journey, the app quickly booting up location services and narrowing down the possible railways and trains within a few seconds, and the user being able to quickly take some related actions from there.&lt;/p&gt;

&lt;p&gt;My friend David asked “why not have it run in the background so you don’t need to open the app?” I initially balked, not wanting to add background location tracking to Eki Bright due to its potential to be heavy on the device battery. I also couldn’t see how background tracking could streamline the experience beyond reducing that 1-2 second train calculation time with the tradeoff that all this work would waste battery in the cases the user never opened the app. The background activity idea stayed in the back of my mind though.&lt;/p&gt;

&lt;p&gt;I started prototyping the algorithm for turning a time-series of GPS coordinates into a railway, a direction on that railway, and ultimately a train.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-first-algorithm.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Thinking through an train tracking algorithm. This particular algorithm turned out to be a dud.&quot; title=&quot;Thinking through an train tracking algorithm. This particular algorithm turned out to be a dud.&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Thinking through an train tracking algorithm. This particular algorithm turned out to be a dud.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After my first day working on the algorithm, I realized that it was going to require a lot iteration on real data from inside the various trains running all over Tokyo. It wasn’t reasonable to think I could ride a train all day with my iPhone and MacBook debugging the algorithm on live data.&lt;/p&gt;

&lt;p&gt;I therefore spent a day creating an app for collecting sessions of GPS coordinates. This has turned out to be a huge boon for development efficiency.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/gps-collector-screens.jpg&quot; width=&quot;&quot; height=&quot;300&quot; alt=&quot;GPS collector app I created and used to get batches of real data from the field&quot; title=&quot;GPS collector app I created and used to get batches of real data from the field&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;GPS collector app I created and used to get batches of real data from the field&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This personal-use GPS Collector app allows me to collect raw data from Core Location in the background and annotate it while riding the various routes I take around the Tokyo area. I divide each trip up into a &lt;em&gt;session&lt;/em&gt;, then manually annotate the session with the railway, direction, departure station, and arrival station to serve as ground truth annotations. I allow exporting in GPX format (for usage within Xcode) and as JSON I can import into and decode with other apps.&lt;/p&gt;

&lt;p&gt;Seeing the raw data revealed a litany of edge cases my algorithm would need to handle. First off, any train that goes underground is a non-starter for a GPS-reliant system; I’d have to make peace with that fact for now. Core Location data includes speed and heading, which is useful, but is itself a derived value and can be gleaned from other sources. GPS accuracy will sometimes plummet temporarily inside the boundaries of a station and sometimes randomly inside dense city limits. Waypoints are usually returned one-per-second, but sometimes will cut out for seconds or minutes. Some trains go from underground to above ground at least once along their designated route.&lt;/p&gt;

&lt;p&gt;I spent a week or so collecting GPS data while working on other apps. I returned to Eki Bright to finish up a first draft of an algorithm that took an entire time-series of GPS data and returned a ranked list of candidates: a railway, the direction on that railway, and the previous and next station.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RidingTrainFinderCandidate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;railway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Railway&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RailDirection&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previousStation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Station&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nextStation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Station&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// let train: TrainTimetable -- TODO: determine which train&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I added a debug viewer to visualize how my algorithm was responding to test data as it was played back. It was mostly working! It was also kind of fun to watch the playback. Being able to throw together a view like this for the sole purpose of debugging an algorithm is a huge win for SwiftUI.&lt;/p&gt;

&lt;video src=&quot;/images/train-tracker-debug-view-01.mp4&quot; controls=&quot;&quot; poster=&quot;/images/train-tracker-debug-view-01.png&quot; preload=&quot;none&quot; height=&quot;400&quot;&gt;&lt;/video&gt;

&lt;p&gt;I’d hit a development checkpoint, and as cool as my little debug tracker view was, I was still far from a shippable feature that solved a real problem. My next step was extending the algorithm to guess which train the user was on (not exactly a straightforward algorithm to write based on the shape of my train timetable data).&lt;/p&gt;

&lt;p&gt;However, I thought back to my friend David’s remark about an app that works in the background. I thought, if I freed myself from the artificial constraints of Eki Bright as it currently existed, how could this algorithm still be useful?&lt;/p&gt;

&lt;p&gt;A new vision emerged of an app that solved a much shallower problem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sometimes when I’m on a crowded train and I’ve got my headphones in, it’s hard to tell what station I’m approaching. I can’t see the display above the train car door or out the window.&lt;/li&gt;
  &lt;li&gt;What if I had a Live Activity in my Dynamic Island that updated live as I stopped at or passed each station along a railway?&lt;/li&gt;
  &lt;li&gt;And what if I didn’t have to manually select what railway I was on and what direction I was going?&lt;/li&gt;
  &lt;li&gt;Better yet, what if I &lt;em&gt;didn’t even have to open the app&lt;/em&gt; and the Live Activity would automatically appear when I was riding a train and disappear when I got off?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I could pull it off, this feature would be supplemental to any other navigation app. It also has a bit of “cool technology” vibe to it that could entice a download and serve as a conversation piece.&lt;/p&gt;

&lt;p&gt;Realizing this new vision came with its own new implementation challenges.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Monitor significant location changes in the background to save battery life, then switch to live location monitoring when moving at train speeds.&lt;/li&gt;
  &lt;li&gt;Detect the railway and railway direction.&lt;/li&gt;
  &lt;li&gt;Continuously update which stations have been visited and passed, and which station is next on the railway, even if it’s far away.&lt;/li&gt;
  &lt;li&gt;Start a Live Activity in the background when confidence in the current railway is high enough.&lt;/li&gt;
  &lt;li&gt;Update the Live Activity as the user approaches, arrives at, and departs a station.&lt;/li&gt;
  &lt;li&gt;End the Live Activity and switch back to monitoring significant location changes once the user has alighted their train.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I knew that significant location changes, app background activity, and the way each of these system features interacts with the relatively new (iOS 16+) Live Activities API was going to pose as the biggest risk to executing the seamless zero-touch app experience I envisioned.&lt;/p&gt;

&lt;p&gt;I started by creating a new app project and creating a GRDB-backed event logging system. Next, I configured the app to request background location permission. I then created the bones of a location tracking algorithm that preserved battery life. I logged app lifecycle events and events for my location tracking algorithm to ensure I could quickly debug why the app was or wasn’t “waking up” or “sleeping” when I expected it to while out in the field.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-app-events.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Log of app events so I can verify background behavior&quot; title=&quot;Log of app events so I can verify background behavior&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Log of app events so I can verify background behavior&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next big task was reimagining my existing railway-finding algorithm for a different system lifecycle. This also meant I needed to pare down my very large train timetable static database for this new use case. I only needed the list of railways and stations. I followed a similar development flow as last time; I created a couple new debug views to view the live GPS waypoints and follow these waypoints on a map alongside the train tracking algorithm outputs.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-waypoints-view.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Raw waypoints view to allow confirmation of incoming data&quot; title=&quot;Raw waypoints view to allow confirmation of incoming data&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Raw waypoints view to allow confirmation of incoming data&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I started with a version that played back existing GPS data. A dashboard view showed just the user-facing data: the detected railway and “focus” station.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-debug-dashboard.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;A debug view that plays back previously captured GPS data at variable speed and shows user-facing data&quot; title=&quot;A debug view that plays back previously captured GPS data at variable speed and shows user-facing data&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;A debug view that plays back previously captured GPS data at variable speed and shows user-facing data&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There was also a list view showing the scores assigned by the algorithm and used to determine the ultimate result shown to the user.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-debug-list.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;The derived scores used by the algorithm to determine what railway and focus station is shown to the user&quot; title=&quot;The derived scores used by the algorithm to determine what railway and focus station is shown to the user&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;The derived scores used by the algorithm to determine what railway and focus station is shown to the user&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, once I was satisfied with the algorithm accuracy on the snapshot data, I migrated this view to use only live device data.&lt;/p&gt;

&lt;p&gt;Watching the algorithm run live was exciting. I felt like I’d hit another checkpoint as the device would wake up and start gathering GPS data in the background, then start showing me which railway I was on and which station was next as soon as I opened it.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-debug-live-tracking.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Same as above but using live GPS data&quot; title=&quot;Same as above but using live GPS data&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Same as above but using live GPS data&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With a basic (but admittedly incomplete) tracking algorithm proven, the last piece of the puzzle I needed to de-risk was starting the Live Activity automatically in the background. Unfortunately this is where I hit a frustrating roadblock.&lt;/p&gt;

&lt;p&gt;In a careful scan of the lengthy &lt;a href=&quot;https://developer.apple.com/documentation/activitykit/displaying-live-data-with-live-activities#Review-Live-Activity-presentations&quot;&gt;Live Activities documentation&lt;/a&gt;, I found the line:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your app can only start Live Activities while it’s in the foreground. However, you can update or end a Live Activity from your app while it runs in the background.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I confirmed this artificial limitation by attempting it and logging errors in my event tracking database.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;LiveActivities Error: The operation couldn’t be completed. Target is not foreground&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I felt like requiring the user to open the app each time they wanted the live activity to run – even if it was as simple as opening and immediately closing the app – would be too tedious an ask as a prerequisite for daily usage.&lt;/p&gt;

&lt;p&gt;Before I neutered my vision or gave up on the idea entirely, I had one card left up my sleeve. From the documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Starting with iOS 17.2 and iPadOS 17.2, you can also start Live Activities with ActivityKit push notifications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So a push notification from a server can start a Live Activity without being initiated by a user (as I’d personally experienced with the Apple Sports app), but for some reason it can’t be started by the device itself? Strange, but since my app is already running in the background, I could technically fire off a network request to my own server with the data I wanted to start the Live Activity with and use my server as a pseudo-proxy to start a Live Activity. It feels like a loophole, but perhaps it’s simply a case of an Apple product manager not re-evaluating an initial safeguard after changing a related feature.&lt;/p&gt;

&lt;p&gt;Setting up push notifications is &lt;em&gt;involved&lt;/em&gt;. I really did not want to be on the hook for maintaining another set of dependencies, but it was the only option left on the table.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aside: is it possible to send a push notification directly from a device instead of through an intermediary server controlled by the developer? In other words, could the device send a request to the APNS server directly that would send a push notification right back to it? In theory it seems possible, with the big security downside that the p8 key would need to be included in plain text within the app bundle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ll leave the long debug story of how I got push notifications working for another time, but after a couple days of development, I confirmed that I could indeed start a Live Activity from the background using an intermediary server.&lt;/p&gt;

&lt;p&gt;Whether or not the App Store app review team considers this to be a permitted workaround is still a huge risk. I’m not sure how I can determine their stance without finishing up version 1 of the app and submitting it for review. Even an unfinished version going through Test Flight review isn’t a guarantee App Store review will also approve.&lt;/p&gt;

&lt;p&gt;So this is my current checkpoint: a new app binary with lot of debug screens that starts and updates Live Activities from the background as the user rides a railway in Tokyo.&lt;/p&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-proto-live-activity.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Prototype version of the working train tracker Live Activity on the lock screen&quot; title=&quot;Prototype version of the working train tracker Live Activity on the lock screen&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Prototype version of the working train tracker Live Activity on the lock screen&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;caption-wrapper&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;/images/train-tracker-proto-dynamic-island.jpg&quot; width=&quot;&quot; height=&quot;400&quot; alt=&quot;Prototype version of the working train tracker Live Activity in the Dynamic Island&quot; title=&quot;Prototype version of the working train tracker Live Activity in the Dynamic Island&quot; /&gt;&lt;div class=&quot;caption-text&quot;&gt;Prototype version of the working train tracker Live Activity in the Dynamic Island&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My plan is to release this app standalone. How it fits into the existing and future Eki Bright vision isn’t yet determined. Perhaps the train tracker app is a free marketing driver for Eki Bright. Perhaps the train tracker app evolves separately from Eki Bright and eventually obsoletes Eki Bright. I’m not sure, but my instinct is to test it in the market in isolation first.&lt;/p&gt;

&lt;p&gt;What do I need to finish up in order to ship?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improve the algorithm to determine the correct railway faster, handle transfers, and off-board seamlessly.&lt;/li&gt;
  &lt;li&gt;Improve the design of the Live Activity.&lt;/li&gt;
  &lt;li&gt;Remove the debug screens and rework the in-app UI for onboarding, settings, and simple monitoring.&lt;/li&gt;
  &lt;li&gt;Create branding and add all the required info for the App Store.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m getting faster at getting through this part of the process, but it still takes time. However, I do feel some accomplishment in having semi-efficiently prototyped enough to de-risk this project.&lt;/p&gt;

&lt;p&gt;I’m planning to write a few technical posts that detail the caveats of Live Activities once I’m more confident in the robustness of my implementation. Until then.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Apr 2025 12:06:00 -0500</pubDate>
        <link>https://twocentstudios.com/2025/04/15/train-tracker-checkpoint-devlog/</link>
        <guid isPermaLink="true">https://twocentstudios.com/2025/04/15/train-tracker-checkpoint-devlog/</guid>
        
        <category>ekibright</category>
        
        <category>ekilive</category>
        
        <category>ios</category>
        
        
      </item>
    
  </channel>
</rss>
